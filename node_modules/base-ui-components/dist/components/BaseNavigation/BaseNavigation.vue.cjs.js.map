{"version":3,"file":"BaseNavigation.vue.cjs.js","sources":["../../../src/components/BaseNavigation/BaseNavigation.vue"],"sourcesContent":["<template>\n  <nav\n    :aria-label=\"navigationLabel\"\n    class=\"base-navigation\">\n    <!-- VIEW FOR DESKTOP APPLICATIONS -->\n    <ul\n      v-if=\"!isMobile\"\n      ref=\"desktopNavigation\"\n      class=\"base-navigation__nav-items\">\n      <!-- PRIMARY ELEMENTS -->\n      <li\n        v-for=\"element in primaryItems\"\n        :key=\"`p-${element.id}`\"\n        class=\"base-navigation__nav-item\">\n        <BaseLink\n          :render-link-as=\"renderAs\"\n          :value=\"showShortLabel && element.shortLabel ? element.shortLabel : element.label\"\n          :aria-current=\"element.id === activeElementIdInt ? 'page' : null\"\n          :identifier-property-value=\"element.route || undefined\"\n          :url=\"element.url || undefined\"\n          :class=\"['base-navigation__nav-item-link',\n                   { 'base-navigation__nav-item-link--active': activeElementIdInt === element.id }]\">\n          <template #label=\"{ label }\">\n            <span :class=\"{ 'base-navigation__nav-item-link__text--truncation': showShortLabel }\">\n              {{ label }}\n            </span>\n          </template>\n        </BaseLink>\n      </li>\n      <!-- SECONDARY ELEMENTS -->\n      <li\n        v-for=\"element in secondaryItems\"\n        :key=\"`s-${element.id}`\"\n        class=\"base-navigation__nav-item base-navigation__nav-item--secondary\">\n        <BaseLink\n          :render-link-as=\"renderAs\"\n          :value=\"showShortLabel && element.shortLabel ? element.shortLabel : element.label\"\n          :aria-current=\"element.id === activeElementIdInt ? 'page' : null\"\n          :identifier-property-value=\"element.route || undefined\"\n          :url=\"element.url || undefined\"\n          :class=\"['base-navigation__nav-item-link',\n                   { 'base-navigation__nav-item-link--active': activeElementIdInt === element.id }]\">\n          <template #label=\"{ label }\">\n            <span :class=\"{ 'base-navigation__nav-item-link__text--truncation': showShortLabel }\">\n              {{ label }}\n            </span>\n          </template>\n        </BaseLink>\n      </li>\n    </ul>\n\n    <!-- MOBILE VIEW -->\n    <template v-else>\n      <!-- THE VISIBLE NAV BAR WITH THE ACTIVE ELEMENT AND HAMBURGER MENU -->\n      <div\n        ref=\"mobileViewNavigation\"\n        class=\"base-navigation__mobile-nav-bar\">\n        <!-- ACTIVE NAV ITEM -->\n        <div\n          class=\"base-navigation__nav-item\">\n          <BaseLink\n            :render-link-as=\"renderAs\"\n            :value=\"showShortLabel && activeElement.shortLabel ?\n              activeElement.shortLabel : activeElement.label\"\n            :additional-attributes=\"{ ariaCurrentValue: 'page', exactPath: true }\"\n            :identifier-property-value=\"activeElement.route\"\n            class=\"base-navigation__nav-item-link\n                   base-navigation__nav-item-link--active\">\n            <template #label=\"{ label }\">\n              <span :class=\"{ 'base-navigation__nav-item-link__text--truncation': showShortLabel }\">\n                {{ label }}\n              </span>\n            </template>\n          </BaseLink>\n        </div>\n        <!-- HAMBURGER MENU -->\n        <BaseButton\n          v-if=\"isMobile && mobileDropDownElements.length\"\n          ref=\"menuButton\"\n          button-style=\"row\"\n          text=\"\"\n          :icon-title=\"menuButtonLabel\"\n          :icon=\"navOpen ? 'remove' : 'drag-lines'\"\n          :aria-expanded=\"navOpen.toString()\"\n          class=\"base-navigation__mobile-menu-button\"\n          @clicked=\"navOpen = !navOpen\" />\n      </div>\n      <!-- DROP DOWN MENU -->\n      <transition name=\"translateY\">\n        <ul\n          v-if=\"navOpen\"\n          class=\"base-navigation__drop-down\">\n          <!-- PRIMARY ELEMENTS -->\n          <li\n            v-for=\"element in mobileLeftElements\"\n            :key=\"`pm-${element.id}`\"\n            class=\"base-navigation__nav-item\">\n            <BaseLink\n              :render-link-as=\"renderAs\"\n              :value=\"showShortLabel && element.shortLabel ? element.shortLabel : element.label\"\n              :identifier-property-value=\"element.route || undefined\"\n              :url=\"element.url || undefined\"\n              :class=\"['base-navigation__nav-item-link',\n                       { 'base-navigation__nav-item-link--separator': mobileLeftElements.length\n                         + mobileRightElements.length > 2 },\n                       { 'base-navigation__nav-item-link--active': activeElementIdInt === element.id }]\"\n              @click.native=\"navOpen = false\"\n              @keydown.enter.native=\"navOpen = false\">\n              <template #label=\"{ label }\">\n                <span :class=\"{ 'base-navigation__nav-item-link__text--truncation': showShortLabel }\">\n                  {{ label }}\n                </span>\n              </template>\n            </BaseLink>\n          </li>\n          <!-- SECONDARY ELEMENTS -->\n          <li\n            v-for=\"element in mobileRightElements\"\n            :key=\"`sm-${element.id}`\"\n            :class=\"['base-navigation__nav-item', 'base-navigation__nav-item--secondary',\n                     { 'base-navigation__nav-item--separator': showSeparator }]\">\n            <BaseLink\n              :render-link-as=\"renderAs\"\n              :value=\"showShortLabel && element.shortLabel ? element.shortLabel : element.label\"\n              :identifier-property-value=\"element.route || undefined\"\n              :url=\"element.url || undefined\"\n              :class=\"['base-navigation__nav-item-link',\n                       { 'base-navigation__nav-item-link--active': activeElementIdInt === element.id }]\"\n              @click.native=\"navOpen = false\"\n              @keydown.enter.native=\"navOpen = false\">\n              <template #label=\"{ label }\">\n                <span :class=\"{ 'base-navigation__nav-item-link__text--truncation': showShortLabel }\">\n                  {{ label }}\n                </span>\n              </template>\n            </BaseLink>\n          </li>\n        </ul>\n      </transition>\n    </template>\n  </nav>\n</template>\n\n<script>\nimport BaseButton from '@/components/BaseButton/BaseButton';\nimport BaseLink from '@/components/BaseLink/BaseLink';\nimport { debounce } from '@/utils/utils';\n\nexport default {\n  name: 'BaseNavigation',\n  components: {\n    BaseButton,\n    BaseLink,\n  },\n  props: {\n    /**\n     * list of primary navigation items, with the following properties:\n     *\n     *    **id** `string` - a unique id\n     *    **label** `string` - a label for the route to be displayed\n     *    **shortLabel** `string?` - a shorter version of the label to be shown if the regular label does not\n     *      fit the element anymore\n     *    **route** `string?` - the route of the element should navigate to\n     *    **url** `string?` - the external url to navigate to on element click\n     *    **routeMatch** `RegEx?` - provide a regular expression that will be used to determine\n     *      the currently active element\n     *\n     *  caveat: the object requires either the `route` or the `url` property!\n     *\n     * on a desktop screen, these elements will be rendered on the left-hand side of the navigation\n     * on a mobile screen, these elements will be rendered in the upper half of the dropdown list\n     */\n    primaryItems: {\n      type: Array,\n      default: () => [\n        {\n          id: '1',\n          label: 'Label',\n          shortLabel: '',\n          route: '/',\n        },\n      ],\n      validator: arr => arr.every(entry => !['id', 'label']\n        .some(property => !Object.keys(entry).includes(property)) && (entry.route || entry.url)),\n    },\n    /**\n     * list of secondary navigation items, with the following properties:\n     *\n     *    **id** `string` - a unique id\n     *    **label** `string` - a label for the route to be displayed\n     *    **shortLabel** `?string` - a shorter version of the label to be shown if the regular label does not\n     *      fit the element anymore\n     *   **route** `string?` - the route of the element should navigate to\n     *    **url** `string?` - the external url to navigate to on element click\n     *    **routeMatch** `RegEx?` - provide a regular expression that will be used to determine\n     *      the currently active element\n     *\n     *  caveat: the object requires either the `route` or the `url` property!\n     *\n     * on a desktop screen, these elements will be rendered on the right-hand side of the navigation\n     * on a mobile screen, these elements will be rendered in the lower half of the dropdown list\n     */\n    secondaryItems: {\n      type: Array,\n      default: () => [\n        {\n          id: '1',\n          label: 'Label',\n          shortLabel: '',\n          route: '/',\n        },\n      ],\n      validator: arr => arr.every(entry => !['id', 'label']\n        .some(property => !Object.keys(entry).includes(property)) && (entry.route || entry.url)),\n    },\n    /**\n     * specify how link element should be rendered - this needs to be a\n     * valid vue link component (e.g. `RouterLink`, `NuxtLink`) and vue-router\n     * is necessary\n     */\n    renderAs: {\n      type: String,\n      default: 'a',\n      validate: val => ['RouterLink', 'NuxtLink', 'a'].includes(val),\n    },\n    /**\n     * specify a label for the navigation bar - for accessibility reasons\n     */\n    navigationLabel: {\n      type: String,\n      default: 'App Navigation',\n    },\n    /**\n     * provide a accessible label for the mobile menu icon\n     */\n    menuButtonLabel: {\n      type: String,\n      default: 'Toggle Navigation',\n    },\n    /**\n     * active Element can be set two ways:\n     * 1) provide a regex in property `routeMatch` for each element in\n     *  `primaryItems` and `secondaryItems`\n     * 2) handle the active element in the front end and set the active\n     *  element id with this property - this property will have priority over\n     *  `routeMatch`\n     */\n    activeElementId: {\n      type: [String, Number],\n      default: null,\n    },\n    /**\n     * define a custom size (in px) when the component should switch to mobile view\n     *  (with hamburger menu icon)\n     */\n    mobileSize: {\n      type: Number,\n      default: 640,\n    },\n  },\n  data() {\n    return {\n      /**\n       * variable to control navigation drop down on mobile\n       * @type {boolean}\n       */\n      navOpen: false,\n      /**\n       * after calculating all the element widths - should short label be shown?\n       * @type {boolean}\n       */\n      showShortLabel: false,\n      /**\n       * resize observer to recalculate if label fits or short label should be shown\n       * @type {any}\n       */\n      resizeTimeout: null,\n      /**\n       * store if window size is mobile <640px (or custom `mobileSize`) to render correct elements\n       */\n      isMobile: false,\n    };\n  },\n  computed: {\n    /**\n     * determine if router is available\n     * @returns {boolean}\n     */\n    routerAvailable() {\n      return !!this.$router;\n    },\n    /**\n     * provide a list of all nav elements on the page (=primary and secondary items\n     *  combined)\n     * @returns {Object[]}\n     */\n    navElements() {\n      return [].concat(this.primaryItems, this.secondaryItems);\n    },\n    /**\n     * return the active list element or an empty object if $route not initialized yet\n     * (empty object to avoid undefined errors)\n     * @returns {{}|Object}\n     */\n    activeElement() {\n      // if no other match is found the first list item will be used.\n      let element = null;\n      // prioritize active element set via props\n      if (this.activeElementId) {\n        element = this.navElements.find(e => e.id === this.activeElementId);\n        // if prop is not set check for the current active element via route match\n      } else if (this.$route) {\n        const { path } = this.$route;\n        element = this.navElements.find(e => e.routeMatch && path.search(e.routeMatch) >= 0);\n        // if no element was found with routeMatch property take a last attempt to\n        // match the route\n        if (!element) {\n          element = this.navElements.find(e => path === e.route);\n        }\n      }\n      // restrict warning to when element was searched for but no element was found and no option was set\n      // to define one\n      if (!element && !this.navElements.some(e => e.routeMatch) && !this.activeElementId) {\n        // provide a warnign to the user\n        // eslint-disable-next-line no-console\n        console.warn('Attention - no active element could be identified and the first list item will be used!'\n          + 'Please set an active element via prop `activeElementId` or `routeMatch` property.');\n      }\n\n      // use the found element or if nothing was found use the first element in\n      // list\n      return element || this.navElements[0];\n    },\n    /**\n     * the id of the currently active element\n     * @returns {?string}\n     */\n    activeElementIdInt() {\n      return this.activeElement?.id ?? '';\n    },\n    /**\n     * list of navigation elements minus the currently active element\n     * @returns {Object[]}\n     */\n    mobileDropDownElements() {\n      return this.navElements.filter(e => e.id !== this.activeElementIdInt);\n    },\n    /**\n     * return all elements that should appear in the mobile drop down below the separation line\n     * (filtering out the active item)\n     * @returns {Object[]}\n     */\n    mobileRightElements() {\n      return this.secondaryItems.filter(e => e.id !== this.activeElementIdInt);\n    },\n    /**\n     * return all elements that should appear in the mobile drop down above the separation line\n     * (filtering out the active item)\n     * @returns {Object[]}\n     */\n    mobileLeftElements() {\n      return this.primaryItems.filter(e => e.id !== this.activeElementIdInt);\n    },\n    /**\n     * drop down primary and secondary separator should only be shown if in total min 3 items\n     * @returns {boolean}\n     */\n    showSeparator() {\n      return !!this.mobileLeftElements.length && !!this.mobileRightElements.length\n        && (this.mobileLeftElements.length + this.mobileRightElements.length) > 2;\n    },\n  },\n  mounted() {\n    // set the is mobile variable\n    this.calcIsMobile();\n    // give mobile elements time to render\n    this.$nextTick(() => {\n      // get an initial calculation of the label and element widths\n      this.calcTextWidth();\n    });\n    // add an event listener to re-calculate on window resize\n    window.addEventListener('resize', this.resizeTriggered);\n  },\n  destroyed() {\n    // Remove resize event listener on destroy\n    window.removeEventListener('resize', this.resizeTriggered);\n  },\n  methods: {\n    /**\n     * determine if labels fit the navigation element or if short labels should be used\n     */\n    calcTextWidth() {\n      // clone the navigation element in question\n      const cloneRefName = this.isMobile ? 'mobileViewNavigation' : 'desktopNavigation';\n      // clone the element\n      const clonedNavigation = this.$refs[cloneRefName].cloneNode(true);\n      // get the element width (needed to set clone width and for mobile calculations)\n      const navigationWidth = this.$refs[cloneRefName].clientWidth;\n      // set the cloned element width\n      clonedNavigation.style.maxWidth = `${navigationWidth}px`;\n      // add the cloned element to the DOM\n      this.$refs[cloneRefName].parentElement.append(clonedNavigation);\n      // different elements need to be checked if it is mobile (<640px or custom mobileSize) or desktop\n      if (this.isMobile) {\n        // get the menu button width\n        const menuButtonWidth = this.$refs.menuButton.$el.clientWidth;\n        // get the link element (<a>) of the active element\n        const activeLinkElement = clonedNavigation.firstChild.firstChild;\n        // get the text element (<span>) of the active element\n        const activeTextElement = activeLinkElement.firstChild;\n        // get the padding of the link element\n        const activeLinkPadding = Number(window.getComputedStyle(activeLinkElement).paddingLeft\n          .replace('px', ''));\n        // now set the regular label of the currently active element as innerText\n        activeTextElement.innerText = this.activeElement.label;\n        // check if short label should be shown by\n        // a) checking if active element label does not fit in the navigation width (- the menu button width)\n        this.showShortLabel = (navigationWidth - menuButtonWidth - (2 * activeLinkPadding)\n          < activeTextElement.scrollWidth)\n          // b) if any of the dropdown entries does not fit into the navigation width\n          || this.mobileDropDownElements.some((item) => {\n            // assign the relevant label\n            activeTextElement.innerText = item.label;\n            // see if it fits\n            return (Math.ceil(navigationWidth - (2 * activeLinkPadding))\n              < activeTextElement.scrollWidth);\n          });\n      } else {\n        // get grandchildren of navigation element -> <li> elements\n        this.showShortLabel = [...clonedNavigation.childNodes].flat()\n          // filter out separation lines and other potential items that do not contain a link element\n          .filter(li => li instanceof HTMLElement && li.getElementsByClassName('base-navigation__nav-item-link')[0])\n          // check if one of the elements has text that does not fit the link element\n          .some((li, index) => {\n            // get the link (<a>) element\n            const linkElement = li.firstChild;\n            // get the text (<span>) element\n            const textElement = linkElement.firstChild;\n            // set the innerText of the span to the full label of the element with the same index in the navElements array\n            textElement.innerText = this.navElements[index]?.label;\n            // get the link element padding to substract from available width\n            const linkPadding = Number(window.getComputedStyle(linkElement).paddingLeft.replace('px', ''));\n            // check if text fits link element width of if scrollWidth exceeds it\n            return (Math.ceil(linkElement.clientWidth - (2 * linkPadding)) < textElement.scrollWidth);\n          });\n      }\n      // remove the cloned elements\n      clonedNavigation.remove();\n    },\n    /**\n     * resize function with timeout to minimize number of label display recalculations\n     */\n    resizeTriggered() {\n      debounce(300, () => {\n        this.calcIsMobile();\n        // give mobile elements time to render\n        this.$nextTick(() => {\n          this.calcTextWidth();\n        });\n      })();\n    },\n    /**\n     * set isMobile variable (function called on window resize)\n     */\n    calcIsMobile() {\n      this.isMobile = window?.innerWidth < this.mobileSize ?? false;\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../../styles/variables.scss\";\n\n.base-navigation {\n  box-shadow: $box-shadow-reg;\n  position: relative;\n  display: flex;\n  width: 100%;\n  height: $row-height-large;\n  background: $box-color;\n\n  // for all elements\n  .base-navigation__nav-item {\n    white-space: nowrap;\n    overflow: hidden;\n    height: $row-height-large;\n\n    .base-navigation__nav-item-link {\n      display: flex;\n      height: 100%;\n      box-sizing: border-box;\n      position: relative;\n      padding: 0 $spacing;\n      cursor: pointer;\n      align-items: center;\n      transition: all 0.2s ease-in-out;\n      color: inherit;\n      background-color: white;\n      text-align: center;\n      white-space: nowrap;\n      text-decoration: none;\n\n      &:hover, &:focus, &:active, &:focus-within {\n        text-decoration: none;\n        color: $app-color;\n      }\n\n      &.base-navigation__nav-item-link--active {\n        // add one pixel to active border and make smaller again by reducing the spread-radius\n        // otherwise there is an artefact line left or right of the element sometimes\n        box-shadow: $box-shadow-reg, inset 0 (-#{$border-active-width + 1}) 0 -1px $app-color;\n      }\n\n      .base-navigation__nav-item-link__text--truncation {\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n    }\n  }\n\n  // desktop element styling\n  .base-navigation__nav-items {\n    display: flex;\n    width: 100%;\n    align-items: center;\n\n    .base-navigation__nav-item {\n      &:nth-child(1 of .base-navigation__nav-item--secondary) {\n        margin-left: auto;\n      }\n    }\n  }\n\n  // mobile element styling\n  .base-navigation__mobile-nav-bar {\n    display: flex;\n    flex-direction: row;\n    width: 100%;\n    background: $box-color;\n    // add z-index here so drop down is behind nav bar\n    z-index: calc(#{map-get($zindex, dropdown)} + 1);\n\n    .base-navigation__mobile-menu-button {\n      margin-left: auto;\n\n      &.base-navigation__mobile-menu-button--hidden {\n        visibility: hidden;\n      }\n    }\n  }\n\n  // mobile drop down styling\n  .base-navigation__drop-down {\n    position: absolute;\n    display: inline-block;\n    width: 100%;\n    background: $box-color;\n    box-shadow: $drop-shadow;\n    border-top: $separation-line;\n    margin-top: $row-height-large;\n    z-index: map-get($zindex, dropdown);\n\n    .base-navigation__nav-item {\n      &:nth-child(1 of .base-navigation__nav-item--secondary) {\n        border-top: $separation-line;\n      }\n    }\n  }\n}\n\n// drop down animations\n.translateY-enter {\n  transform:translateY(-10px);\n  opacity: 0;\n}\n\n.translateY-enter-active,.translateY-leave-active {\n  transform-origin: top left 0;\n  transition:.2s ease;\n}\n\n.translateY-leave-to{\n  transform: translateY(-10px);\n  opacity: 0;\n}\n</style>\n"],"names":["_sfc_main","BaseButton","BaseLink","arr","entry","property","val","element","path","e","_a","cloneRefName","clonedNavigation","navigationWidth","menuButtonWidth","activeLinkElement","activeTextElement","activeLinkPadding","item","li","index","linkElement","textElement","linkPadding","debounce"],"mappings":"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"}