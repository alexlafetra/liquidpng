{"version":3,"file":"BaseLoader.vue.cjs.js","sources":["../../../src/components/BaseLoader/BaseLoader.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"loader\"\n    :style=\"{ ...position, ...{ '--loader-color': loaderColor } }\"\n    class=\"base-loader\">\n    <svg\n      v-if=\"!hide\"\n      class=\"base-loader-circular\">\n      <circle\n        class=\"base-loader-path\"\n        cx=\"50\"\n        cy=\"50\"\n        r=\"20\"\n        fill=\"none\"\n        stroke-width=\"4\"\n        stroke-miterlimit=\"10\" />\n    </svg>\n  </div>\n</template>\n\n<script>/**\n * Minimal loader component to be reused in other components\n */\nimport { ref, watch } from 'vue';\nimport { useAnnouncer } from '@/composables/useAnnouncer';\n\nexport default {\n  name: 'BaseLoader',\n  props: {\n    /**\n     * define a color for the loader\n     */\n    loaderColor: {\n      type: String,\n      default: '',\n    },\n    /**\n     * add positional properties like for a style object\n     */\n    position: {\n      type: Object,\n      default: () => ({}),\n    },\n    /**\n     * set this to `true` if you want to keep element (with height and width) but dont\n     * want the loader to show\n     */\n    hide: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * define a text that should be read as soon as loader appears\n     */\n    textOnLoaderShow: {\n      type: String,\n      default: 'loading',\n    },\n  },\n  setup(props) {\n    /**\n     * set up a reference to the element to be able to attach the announcements element\n     * @type {Ref<UnwrapRef<null|HTMLElement>>}\n     */\n    const loader = ref(null);\n    /**\n     * timeout variable to only set announcement after a certain time passed\n     * @type {Ref<UnwrapRef<null|number>>}\n     */\n    const timeout = ref(null);\n    /**\n     * insert an HTML element with aria-live assertive that will announce the\n     * loading process\n     */\n    const { announcement } = useAnnouncer(loader);\n\n    /**\n     * function called on changes to the loader element or prop `hide`\n     * announcing the text set in prop `textOnLoaderShow`\n     */\n    function setLoaderAnnouncement() {\n      // first check if loader is now present and not hidden\n      if (loader.value && !props.hide) {\n        // if so need to be working with a timeout here so the announcement\n        // is not overwritten by later actions\n        if (timeout.value) {\n          clearTimeout(timeout.value);\n          timeout.value = null;\n        }\n        timeout.value = setTimeout(() => {\n          // now check again if element is still visible\n          if (loader.value && !props.hide) {\n            // if yes - make loading announcement\n            announcement.value = props.textOnLoaderShow;\n          }\n        }, 1000);\n      }\n    }\n\n    // watch the element to add the text as soon as it is rendered\n    // (other option: prop `hide` is set true - this needed to be handled\n    // in options API since watcher not triggering here)\n    watch(loader, () => {\n      setLoaderAnnouncement();\n    });\n    return {\n      loader,\n      announcement,\n      setLoaderAnnouncement,\n    };\n  },\n  data() {\n    return {\n      timeout: null,\n    };\n  },\n  watch: {\n    /**\n     * for some reason in frontend setup watcher did not trigger for prop `hide`\n     * so added it here\n     */\n    hide() {\n      this.setLoaderAnnouncement();\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n  @import '../../styles/variables.scss';\n\n  .base-loader{\n    position: absolute;\n    width: 100px;\n    height: 100px;\n    top: 20%;\n    left: 50%;\n    transform: translate(-50%,-50%);\n    overflow: hidden;\n\n    .base-loader-circular{\n      animation: rotate 2s linear infinite;\n      height: 100px;\n      position: relative;\n      width: 100px;\n\n      .base-loader-path {\n        stroke-dasharray: 1,200;\n        stroke-dashoffset: 0;\n        animation:\n          dash 1.5s ease-in-out infinite;\n        stroke: var(--loader-color, $app-color);\n        color: var(--loader-color, $app-color);\n      }\n    }\n  }\n\n  @keyframes rotate{\n    100%{\n      transform: rotate(360deg);\n    }\n  }\n\n  @keyframes dash{\n    0%{\n      stroke-dasharray: 1,200;\n      stroke-dashoffset: 0;\n    }\n    50%{\n      stroke-dasharray: 89,200;\n      stroke-dashoffset: -35;\n    }\n    100%{\n      stroke-dasharray: 89,200;\n      stroke-dashoffset: -124;\n    }\n  }\n</style>\n"],"names":["_sfc_main","props","loader","ref","timeout","announcement","useAnnouncer","setLoaderAnnouncement","watch"],"mappings":"2RA0BAA,EAAA,CACA,KAAA,aACA,MAAA,CAIA,YAAA,CACA,KAAA,OACA,QAAA,EACA,EAIA,SAAA,CACA,KAAA,OACA,QAAA,KAAA,CAAA,EACA,EAKA,KAAA,CACA,KAAA,QACA,QAAA,EACA,EAIA,iBAAA,CACA,KAAA,OACA,QAAA,SACA,CACA,EACA,MAAAC,EAAA,CAKA,MAAAC,EAAAC,MAAA,IAAA,EAKAC,EAAAD,MAAA,IAAA,EAKA,CAAA,aAAAE,CAAA,EAAAC,EAAA,aAAAJ,CAAA,EAMA,SAAAK,GAAA,CAEAL,EAAA,OAAA,CAAAD,EAAA,OAGAG,EAAA,QACA,aAAAA,EAAA,KAAA,EACAA,EAAA,MAAA,MAEAA,EAAA,MAAA,WAAA,IAAA,CAEAF,EAAA,OAAA,CAAAD,EAAA,OAEAI,EAAA,MAAAJ,EAAA,iBAEA,EAAA,GAAA,EAEA,CAKAO,OAAAA,EAAA,MAAAN,EAAA,IAAA,CACAK,GACA,CAAA,EACA,CACA,OAAAL,EACA,aAAAG,EACA,sBAAAE,CACA,CACA,EACA,MAAA,CACA,MAAA,CACA,QAAA,IACA,CACA,EACA,MAAA,CAKA,MAAA,CACA,KAAA,sBAAA,CACA,CACA,CACA"}