{"version":3,"file":"BaseLink.vue.cjs.js","sources":["../../../src/components/BaseLink/BaseLink.vue"],"sourcesContent":["<template>\n  <!-- v-clean-dom-nodes is here because space was added before and after the link which\n    was not the desired effect when link was followed by a comma in BaseTextList - also\n    see ticket #2283#note-11 -->\n  <component\n    :is=\"renderAs\"\n    v-bind=\"linkAttributes\"\n    v-clean-dom-nodes\n    :aria-controls=\"isTooltip ? `tooltipBox-${_uid}`: null\"\n    :aria-expanded=\"isTooltip ? showTooltip.toString() : null\"\n    :aria-label=\"isChip || isTooltip ? title : null\"\n    :tabindex=\"isTooltip ? 0 : null\"\n    :title=\"title\"\n    :class=\"[\n      'base-link',\n      {\n        'base-link--chip': isChip,\n        'base-link--internal': isInternal,\n        'base-link--external': isExternal,\n        'base-link--tooltip': isTooltip,\n        'base-link--active': showTooltip,\n        'base-link--space-after': spaceAfter,\n      },\n    ]\"\n    @keyup.enter=\"clickHandler\"\n    @click=\"clickHandler\">\n    <!-- chip, internal, external, text -->\n    <template\n      v-if=\"!isTooltip\">\n      <slot\n        name=\"label\"\n        :label=\"value\">\n        <span\n          v-insert-text-as-html=\"{ value, interpretTextAsHtml }\"\n          :class=\"{ 'no-clean': interpretTextAsHtml }\" />\n      </slot>\n    </template>\n\n    <!-- (i) tooltip -->\n    <template\n      v-if=\"isTooltip\">\n      <span\n        class=\"base-link__label\">\n        <slot\n          name=\"label\"\n          :label=\"value\">\n          <span\n            v-insert-text-as-html=\"{ value, interpretTextAsHtml }\"\n            :class=\"{ 'no-clean': interpretTextAsHtml }\" />\n        </slot>\n      </span>\n\n      <span\n        ref=\"icon\"\n        class=\"base-link__icon\">\n        <BaseIcon\n          v-show=\"!isLoading\"\n          name=\"information\" />\n      </span>\n\n      <span\n        v-if=\"isLoading\"\n        class=\"base-link__loader\">\n        <BaseLoader\n          v-if=\"isLoading\" />\n      </span>\n\n      <BaseTooltipBox\n        v-if=\"showTooltip\"\n        :id=\"`tooltipBox-${_uid}`\"\n        :attach-to=\"$refs.icon\"\n        :modal-on-mobile=\"false\"\n        :role=\"'tooltip'\"\n        :styles=\"tooltipStyles\"\n        :threshold-top=\"tooltipThresholdTop\"\n        :type-on-mobile=\"tooltipTypeOnMobile\"\n        @close=\"showTooltip = !showTooltip\">\n        <!-- @slot slot to inject content\n          @binding {Object} item - a tooltip object -->\n        <slot\n          name=\"tooltip\"\n          :item=\"tooltip\">\n          <span\n            v-if=\"tooltip.label\"\n            class=\"base-tooltip__label\">\n            {{ tooltip.label }}\n          </span>\n\n          <div\n            v-for=\"(item, index) in tooltip\"\n            :key=\"index\"\n            class=\"base-tooltip__row\">\n            {{ item.label }}:\n            <template v-if=\"item.url\">\n              <a\n                v-insert-text-as-html=\"{ value: item.value, interpretTextAsHtml }\"\n                :href=\"item.url\"\n                :title=\"item.altTitle || undefined\"\n                class=\"base-link--external\">\n                {{ item.value }}\n              </a>\n            </template>\n            <!-- eslint-disable-next-line vue/singleline-html-element-content-newline max-len -->\n            <template v-else><span v-insert-text-as-html=\"{ value: item.value, interpretTextAsHtml }\" /></template>\n          </div>\n        </slot>\n      </BaseTooltipBox>\n    </template>\n  </component>\n</template>\n\n<script>\n/**\n * component to display different types of links\n * e.g.: chip, internal, external, text, tooltip, tooltip (async content)\n */\n\nimport cleanDomNodes from '@/directives/cleanDomNodes';\nimport InsertTextAsHtml from '@/directives/InsertTextAsHtml';\n\nexport default {\n  name: 'BaseLink',\n  components: {\n    BaseIcon: () => import('../BaseIcon/BaseIcon').then(m => m.default || m),\n    BaseTooltipBox: () => import('../BaseTooltipBox/BaseTooltipBox').then(m => m.default || m),\n    BaseLoader: () => import('../BaseLoader/BaseLoader').then(m => m.default || m),\n  },\n  directives: {\n    cleanDomNodes,\n    InsertTextAsHtml,\n  },\n  props: {\n    /**\n     * specify a query parameter name for type `chip` links\n     */\n    chipQueryName: {\n      type: String,\n      default: 'chip-link',\n    },\n    /**\n     * specify external link target\n     * @values _blank, _self\n     */\n    externalLinkTarget: {\n      type: String,\n      default: '_blank',\n      validator: val => (val === '_blank' || val === '_self'),\n    },\n    /**\n     * specify the object property that should be used as identifier\n     */\n    identifierPropertyName: {\n      type: String,\n      default: 'source',\n    },\n    /**\n     * specify the internal identifier to route to\n     */\n    identifierPropertyValue: {\n      type: [Number, String],\n      default: '',\n    },\n    /**\n     * specify an internal path to link, only for type chip links\n     */\n    path: {\n      type: String,\n      default: '',\n    },\n    /**\n     * specify how a link element should be rendered\n     * this needs to be a valid vue link component (e.g. `RouterLink`, `NuxtLink`) and vue-router is necessary\n     */\n    renderLinkAs: {\n      type: String,\n      default: 'RouterLink',\n    },\n    /**\n     * add a space \" \" after an element\n     * useful for link-type tooltip in lists\n     */\n    spaceAfter: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * specify texts for the title tag depending on a link type (especially helpful to provide language-specific text)\n     * this needs to be an object with the following properties\n     * (if you don't want to display any specific text, leave an empty string):\n     *\n     *     **chip**: Text is shown on hover of a chip link and gets merged with the type and value attributes.\n     *     **tooltip**: Text is shown on hover of a tooltip link.\n     *     **type**: Text for a single chip type.\n     *       This needs to be an object containing properties matching the different chip types.\n     */\n    titleText: {\n      type: Object,\n      default: () => ({\n        chip: 'Open {type} {value} in search',\n        tooltip: 'Show more information',\n        type: {\n          artists: 'artist',\n          keywords: 'keyword',\n        },\n      }),\n      // checking if all necessary properties are part of the provided object\n      validator: val => ['chip', 'tooltip', 'type'].every(prop => Object.keys(val).includes(prop)),\n    },\n    /**\n     * specify tooltip content\n     * Prop must be either set true or an Object[] to render a type tooltip link.\n     * **Object[]**:\n     *   - `[{ label: 'label', value: 'value', altTitle?: 'altTitle',  url: '#' }]` to render a content list\n     *   - any other structure in combination with the slot `#tooltip`\n     * **Boolean**: use the slot `#tooltip` to customize the content\n     */\n    tooltip: {\n      type: [Boolean, Array],\n      default: false,\n    },\n    /**\n     * async tooltip content, e.g. source, id where to fetch data from\n     * if set, event `@tooltip-clicked` with this object will be emitted\n     */\n    tooltipAsync: {\n      type: Array,\n      default: () => [],\n    },\n    /**\n     * additional tooltip styles\n     * **caveat**: properties `top`, `left`, `right` will be overwritten due position calculation\n     */\n    tooltipStyles: {\n      type: Object,\n      default: () => ({}),\n    },\n    /**\n     * specify how the tooltipBox component is rendered on mobile resolutions\n     *\n     * *box*: component is rendered directly at the info icon\n     * *modal*: component is rendered as a modal popup\n     * *fullscreen*: component is rendered as ap popup with max height and width\n     */\n    tooltipTypeOnMobile: {\n      type: String,\n      default: 'box',\n      validator: val => ['box', 'fullscreen', 'modal'].includes(val),\n    },\n    /**\n     * specify a threshold value in px for the [BaseTooltipBox](BaseTooltipBox) top position calculation\n     *\n     * Note: The value can also be set globally with the CSS variable `--base-tooltip-box-threshold-top`.\n     *       The property will be overwritten by the CSS variable.\n     */\n    tooltipThresholdTop: {\n      type: Number,\n      default: 0,\n    },\n    /**\n     * used in combination with property `identifierPropertyValue` to render a type `chip` element.\n     * `type` identifies a source type for chip click-event e.g.: keyword | skill | object\n     */\n    type: {\n      type: String,\n      default: '',\n    },\n    /**\n     * external url to link to\n     * supported protocols: `http://`, `https://`, `mailto:`, `tel:`\n     */\n    url: {\n      type: String,\n      default: '',\n    },\n    /**\n     * value of the entry\n     */\n    value: {\n      type: String,\n      default: '',\n    },\n    /**\n     *  use this property to set the title attribute\n     *  also for link types other than `chip` and `tooltip`\n     *\n     * if `interpretTextAsHtml` is set `true` for type `chip` and `tootlip`\n     *  add a html-free version of `value` here to be used for the `title`\n     *  attribute and with assistive technologies\n     */\n    altTitle: {\n      type: String,\n      default: '',\n    },\n    /**\n     * set additional attributes directly on the link element,\n     *  this can be HTML link element native attributes or framework\n     *  specific props (e.g. `aria-current-value` to set the aria-current\n     *  attribute, for more possibilities check out the\n     *  [Vue-Router documentation](https://v3.router.vuejs.org/api/)\n     */\n    additionalAttributes: {\n      type: Object,\n      default: () => ({}),\n    },\n    /**\n     * set true to render link `value` as html\n     *\n     *  **caveat**: setting this variable `true` can lead to XSS attacks. Only use\n     *    this prop on trusted content and never on user-provided content.\n     */\n    interpretTextAsHtml: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      isLoading: false,\n      scrollResizeTimeout: null,\n      showTooltip: false,\n    };\n  },\n  computed: {\n    altTitleInt() {\n      return this.altTitle || this.value;\n    },\n    /**\n     * object added as value to `[chipQueryName]` query param when a chip is clicked\n     * @returns {Object}\n     */\n    chipObj() {\n      const obj = {};\n      obj[this.identifierPropertyName] = this.identifierPropertyValue;\n      obj.type = this.type;\n      // this should not have html in it so we use altTitle if provided\n      obj.value = this.altTitleInt;\n      return obj;\n    },\n    /**\n     * check if an url is set and includes a protocol\n     * e.g. 'http://', 'https://', 'mailto:' or 'tel:'\n     *\n     * @returns {boolean}\n     */\n    hasValidUrl() {\n      //\n      return !!(this.url\n        && (this.url.match(/^([a-z][a-z0-9+\\-.]*:\\/\\/)/)\n            || this.url.match(/^mailto:/)\n            || this.url.match(/^tel:/)));\n    },\n    /**\n     * check if the link is type `chip`\n     * @returns {boolean}\n     */\n    isChip() {\n      return !!(this.identifierPropertyValue && this.type);\n    },\n    /**\n     * check if the link is type `external`\n     * @returns {boolean}\n     */\n    isExternal() {\n      return this.hasValidUrl;\n    },\n    /**\n     * check if the link is type `internal`\n     * @returns {boolean}\n     */\n    isInternal() {\n      return !!(this.identifierPropertyValue && !this.type);\n    },\n    /**\n     * check if vue router is available\n     * @returns {boolean}\n     */\n    isRouterAvailable() {\n      return !!this.$router;\n    },\n    /**\n     * check if the link is type `tooltip`\n     * @returns {boolean}\n     */\n    isTooltip() {\n      return !!(this.tooltip || this.tooltip.length || this.tooltipAsync.length);\n    },\n    /**\n     * render component with a specific tag\n     * @returns {'a' | 'router-link' | 'span'}\n     */\n    renderAs() {\n      // external\n      if (this.isExternal) {\n        return 'a';\n      }\n      // internal, chip\n      if (this.isInternal || this.isChip) {\n        return this.isRouterAvailable ? this.renderLinkAs : 'a';\n      }\n      // default, e.g. tooltip\n      return 'span';\n    },\n    /**\n     * link attributes (href, target, to) to bind to the component\n     * depending on link type and router availability\n     * @returns {Object}\n     */\n    linkAttributes() {\n      const router = this.isRouterAvailable ? 'to' : 'href';\n      const obj = {};\n\n      if (this.isExternal) {\n        obj.href = this.url;\n        obj.target = this.externalLinkTarget;\n      }\n\n      if (this.isInternal) {\n        obj[router] = this.identifierPropertyValue;\n      }\n\n      if (this.isChip) {\n        obj[router] = `${this.path}?${this.chipQueryName}=${JSON.stringify(this.chipObj)}`;\n      }\n\n      return {\n        // add attributes set from outside\n        ...this.additionalAttributes,\n        ...obj,\n      };\n    },\n    /**\n     * build the title attribute depending on the current link type\n     * @returns {null|string}\n     */\n    title() {\n      if (this.isTooltip) {\n        return this.altTitle || this.titleText.tooltip;\n      }\n      if (this.isChip) {\n        return this.titleText.chip\n          // replace the placeholder with a matching translated type, otherwise with an empty string\n          .replace('{type}', this.titleText.type[this.type] ? this.titleText.type[this.type] : '')\n          // replace the placeholder with the value (no translation needed)\n          .replace('{value}', this.altTitleInt)\n          // remove multiple spaces with a single space\n          .replace(/\\s+/g, ' ');\n      }\n      // for all other types set the altTitle as title attribute if it was defined\n      if (this.altTitle) {\n        return this.altTitle;\n      }\n      // default\n      return null;\n    },\n  },\n  watch: {\n    tooltip(val) {\n      if (val) {\n        this.isLoading = false;\n        this.showTooltip = true;\n      }\n    },\n  },\n  mounted() {\n    window.addEventListener('scroll', this.scrollResizeHandler);\n    window.addEventListener('resize', this.scrollResizeHandler);\n  },\n  destroyed() {\n    window.removeEventListener('scroll', this.scrollResizeHandler);\n    window.removeEventListener('resize', this.scrollResizeHandler);\n  },\n  methods: {\n    /**\n     * handle click events for different link types\n     */\n    clickHandler() {\n      if (this.isTooltip) {\n        this.tooltipClicked();\n      }\n    },\n    /**\n     * close an open tooltip\n     */\n    closeTooltip() {\n      if (!this.showTooltip) {\n        return;\n      }\n      this.showTooltip = false;\n    },\n    /**\n     * handle tooltip click event\n     */\n    async tooltipClicked() {\n      // check if there is content to display\n      if ((this.tooltip && this.$slots.tooltip) || this.tooltip.length) {\n        this.showTooltip = !this.showTooltip;\n        return;\n      }\n      // check if there is a data definition to load async from\n      if (this.tooltipAsync.length) {\n        this.isLoading = true;\n        /**\n         * @event tooltip-clicked\n         * @param {Array} - async tooltip content\n         *\n         */\n        this.$emit('tooltip-clicked', this.tooltipAsync);\n      }\n    },\n    /**\n     * intercept scroll/resize event and close the tooltip\n     */\n    scrollResizeHandler() {\n      // check if there is a timeout already set and clear it if yes\n      if (this.scrollResizeTimeout) {\n        clearTimeout(this.scrollResizeTimeout);\n        this.scrollResizeTimeout = null;\n      }\n      this.scrollResizeTimeout = setTimeout(() => {\n        if (this.showTooltip) {\n          this.closeTooltip();\n        }\n      }, 100);\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n  @import \"../../styles/variables\";\n\n  .base-link {\n    transition-property: color, text-decoration-color, background-color;\n    transition-duration: 150ms;\n    transition-timing-function: ease-in-out;\n\n    &__label {\n      display: inline-block;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n    }\n\n    &__icon {\n      flex-shrink: 0;\n      position: relative;\n      display: inline-block;\n      height: $icon-small;\n      width: $icon-small;\n      margin-left: $spacing-small-half;\n\n      &::v-deep svg {\n        vertical-align: top;\n        height: 100%;\n        width: 100%;\n      }\n\n      @media screen and (min-width: $mobile-min-width) {\n        height: $icon-medium;\n        width: $icon-medium;\n      }\n    }\n\n    &__loader {\n      position: relative;\n      right: $spacing-small;\n      display: inline-block;\n      transform: scale(0.35);\n    }\n\n    &--external {\n      position: relative;\n      text-decoration: underline;\n      text-decoration-color: $app-color;\n\n      &:focus,\n      &:hover {\n        color: $app-color-secondary;\n        text-decoration-color: $app-color-secondary;\n      }\n    }\n\n    &--internal {\n      color: $app-color;\n      cursor: pointer;\n\n      &:focus,\n      &:hover {\n        color: $app-color-secondary;\n      }\n    }\n\n    &--chip {\n      padding: 0 $spacing-small;\n      margin-right: $spacing-small;\n      background-color: $background-color;\n      text-decoration: none;\n\n      &:focus,\n      &:hover {\n        background-color: $app-color-secondary;\n        color: white;\n        text-decoration: none;\n      }\n    }\n\n    &--tooltip {\n      position: relative;\n      align-items: center;\n      display: inline-flex;\n      max-width: 100%;\n\n      svg {\n        display: inline-block;\n        transition: fill 150ms ease-in;\n      }\n\n      &:focus,\n      &:hover {\n        cursor: pointer;\n        color: $app-color-secondary;\n\n        svg {\n          fill: $app-color-secondary;\n        }\n      }\n    }\n\n    &--active {\n      svg {\n        fill: $app-color-secondary\n      }\n    }\n\n    &--space-after {\n      .base-link__label {\n        &:after {\n          content: \" \";\n          white-space: pre;\n        }\n      }\n    }\n  }\n</style>\n"],"names":["_sfc_main","m","cleanDomNodes","InsertTextAsHtml","val","prop","obj","router"],"mappings":"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"}