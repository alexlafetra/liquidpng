import l from "../BaseForm/BaseForm.vue.es.js";
import { createId as f } from "../../utils/utils.es.js";
import "./BaseFormGroups.vue.es2.js";
import s from "../../_virtual/_plugin-vue2_normalizer.es.js";
const u = {
  name: "BaseFormGroups",
  components: {
    BaseForm: l
  },
  props: {
    /**
     * the json object containing all the field information incl. `x-attrs` custom field
     * for placeholder, field type, etc. For more information on the attributes see
     * [BaseForm](BaseForm).
     * Most importantly the `x-attrs` needs to include the field `form_group` assigning
     *  a number (1-based index!) to each form field by which fields are grouped.
     * Optional: add an attribute `form_group_title` to any group field (the field with the
     *  lowest order takes precedent) to add a form group header.
     */
    formFieldJson: {
      type: Object,
      required: !0
      // validator: (val) =>
    },
    /**
     * the values for each field if any already present
     */
    valueList: {
      type: Object,
      default: () => ({})
    },
    /**
     * set current language
     */
    language: {
      type: String,
      default: "en"
    },
    /**
     * provide information about all available languages
     */
    availableLocales: {
      type: Array,
      default: () => []
    },
    /**
     * define additional style for the form
     * should be an object eg. `{ 'padding-top': 0 }`.
     *  note: this applies to [BaseForm](BaseForm) not the wrapper
     *  component
     */
    formStyle: {
      type: Object,
      default: () => ({})
    },
    /**
     * define fields (specify field name!) for which tabs should be shown
     */
    fieldsWithTabs: {
      type: Array,
      default: () => []
    },
    /**
     * enter the field name of a field that is currently fetching autocomplete
     * results
     */
    fieldIsLoading: {
      type: String,
      default: ""
    },
    /**
     * provide an object that contains the options list for all
     * fields with autocomplete / chips input
     */
    dropDownLists: {
      type: Object,
      default: () => ({})
    },
    /**
     * define if error icon should be shown.
     * for an example on how it looks on an individual form field see [BaseInput](BaseInput)
     */
    showErrorIcon: {
      type: Boolean,
      default: !1
    },
    /**
     * if `true` a remove icon will be shown allowing to remove
     * all input at once.
     * for an example on how it looks on an individual form field see [BaseInput](BaseInput)
     */
    clearable: {
      type: Boolean,
      default: !1
    },
    /**
     * provide an object with settings and properties for each field. This takes an object
     * with the field name as properties with the props nested.
     * `{ fieldName1: { required: false, ... }, fieldName2: { ... } }`.
     *
     * find the possible variables at the respective input components:
     * [BaseInput](BaseInput)
     * [BaseAutocompleteInput](BaseAutocompleteInput)
     * [BaseMultilineTextInput](BaseMultilineTextInput)
     * [BaseChipsInput](BaseChipsInput)
     * [BaseChipsBelow](BaseChipsBelow)
     * [BaseDateInput](BaseDateInput)
     * [BaseToggle](BaseToggle)
     */
    fieldProps: {
      type: Object,
      default: () => ({}),
      validator: (r) => Object.keys(r).length === 0 || Object.values(r).every((e) => Object.keys(e))
    }
  },
  computed: {
    /**
     * modify the component $props, so they can be forwarded to BaseForm directly via
     * v-bind
     * @returns {{}}
     */
    formProps() {
      const r = {
        ...this.$props
      };
      return delete r.formFieldJson, r;
    },
    /**
     * the formFieldJSON needs to be separated in to the specific groups according
     * to `form_group` `x-attrs` field.
     *  Fields that do not have the attribute set will be added at the end.
     * @returns {Object[]}
     */
    formFieldsGrouped() {
      const r = [], e = {};
      return Object.entries(this.formFieldJson).forEach(([o, n]) => {
        if (n["x-attrs"] && n["x-attrs"].form_group) {
          const i = n["x-attrs"].form_group - 1;
          r[i] ? r[i][o] = n : r[i] = {
            [o]: n
          };
        } else
          e[o] = n;
      }), Object.keys(e).length && r.push(e), r;
    },
    /**
     * create an internal id for looping purposes
     * @returns {string}
     */
    groupsId() {
      return f();
    }
  }
};
var a = function() {
  var e = this, o = e._self._c;
  return o("div", { staticClass: "base-form-groups" }, e._l(e.formFieldsGrouped, function(n, i) {
    return o("BaseForm", e._g(e._b({ key: `${e.groupsId}-${i}`, staticClass: "base-form-groups__group", attrs: { "form-field-json": n }, scopedSlots: e._u([{ key: "label-addition", fn: function({ fieldName: t }) {
      return [e._t("label-addition", null, { fieldName: t })];
    } }, { key: "pre-input-field", fn: function({ fieldName: t }) {
      return [e._t("pre-input-field", null, { fieldName: t })];
    } }, { key: "input-field-addition-before", fn: function({ fieldName: t }) {
      return [e._t("input-field-addition-before", null, { fieldName: t })];
    } }, { key: "input-field-inline-before", fn: function({ fieldName: t }) {
      return [e._t("input-field-inline-before", null, { fieldName: t })];
    } }, { key: "input-field-addition-after", fn: function({ fieldName: t }) {
      return [e._t("input-field-addition-after", null, { fieldName: t })];
    } }, { key: "post-input-field", fn: function({ fieldName: t }) {
      return [e._t("post-input-field", null, { fieldName: t })];
    } }, { key: "error-icon", fn: function() {
      return [e._t("error-icon")];
    }, proxy: !0 }, { key: "remove-icon", fn: function() {
      return [e._t("remove-icon")];
    }, proxy: !0 }, { key: "below-input", fn: function({ fieldName: t }) {
      return [e._t("below-input", null, { fieldName: t })];
    } }], null, !0) }, "BaseForm", e.formProps, !1), e.$listeners));
  }), 1);
}, d = [], p = /* @__PURE__ */ s(
  u,
  a,
  d,
  !1,
  null,
  "b3830d06",
  null,
  null
);
const b = p.exports;
export {
  b as default
};
//# sourceMappingURL=BaseFormGroups.vue.es.js.map
