import s from "../BaseIcon/BaseIcon.vue.es.js";
import a from "../BaseBox/BaseBox.vue.es.js";
import i from "../BaseBoxTooltip/BaseBoxTooltip.vue.es.js";
import "./BaseBoxButton.vue.es2.js";
import n from "../../_virtual/_plugin-vue2_normalizer.es.js";
const l = {
  name: "BaseBoxButton",
  components: {
    BaseIcon: s,
    BaseBox: a,
    BaseBoxTooltip: i
  },
  props: {
    /**
     * specify the tag of the button
     */
    renderElementAs: {
      type: String,
      default: "div"
    },
    /**
     * Define type of button box style: 'large' | 'small'
     */
    boxStyle: {
      type: String,
      default: "large",
      validator(o) {
        return ["large", "small"].includes(o);
      }
    },
    /**
     * specify icon name if desired, this uses the `BaseIcon` component;
     * see [BaseIcon](BaseIcon) for available icons
     */
    icon: {
      type: String,
      default: null
    },
    /**
     * show a plus sign next to the icon if `true`
     * only available for large button style
     */
    showPlus: {
      type: Boolean,
      default: !1
    },
    /**
     * specify the text for the button
     */
    text: {
      type: String,
      default: ""
    },
    /**
     * specify subtext for the button
     * only available for large button style
     */
    subtext: {
      type: String,
      default: ""
    },
    /**
     * define box size
     */
    boxSize: {
      type: Object,
      default: () => ({ width: "25%" })
    },
    /**
     * define the ratio of width and height of the box
     * (in percent string, e.g. 1:1 --> '100', 1:2 --> '50')
     */
    boxRatio: {
      type: String,
      default: "100"
    },
    /**
     * set button inactive
     */
    disabled: {
      type: Boolean,
      default: !1
    },
    /**
     * show tooltip
     */
    showTooltip: {
      type: Boolean,
      default: !1
    }
  },
  data() {
    return {
      // to hide subtext if box is to small
      showSubtext: !0
    };
  },
  mounted() {
    this.setShowSubtext(), window.addEventListener("resize", () => {
      this.setShowSubtext();
    });
  },
  methods: {
    clicked(o) {
      this.disabled || this.$emit("clicked", o);
    },
    onTooltip(o) {
      this.$emit("on-tooltip", o);
    },
    setShowSubtext() {
      const o = this.$refs.baseBoxSubtext;
      if (o) {
        const t = o.offsetTop + o.offsetHeight, e = this.$refs.baseBox.$el.offsetHeight;
        this.showSubtext = e >= t;
      }
    }
  }
};
var b = function() {
  var t = this, e = t._self._c;
  return e("base-box", { ref: "baseBox", class: ["base-box-button", { "base-box-button-disabled": t.disabled }], attrs: { "render-element-as": t.renderElementAs, "box-size": t.boxSize, "box-ratio": t.boxRatio, disabled: t.disabled }, on: { clicked: t.clicked } }, [t.boxStyle === "large" ? e("div", { staticClass: "button-box-content" }, [e("div", { staticClass: "button-box-center" }, [e("div", { staticClass: "button-box-image-row" }, [e("div", { staticClass: "button-box-plus-container" }, [t.showPlus ? e("base-icon", { staticClass: "button-box-icon button-box-plus", attrs: { name: "plus", alt: "add" } }) : t._e()], 1), e("div", { staticClass: "button-box-icon-container" }, [t.icon ? e("base-icon", { staticClass: "button-box-icon", attrs: { name: t.icon } }) : t._e()], 1)]), e("div", { staticClass: "button-box-text" }, [t._v(" " + t._s(t.text) + " ")])]), e("div", { ref: "baseBoxSubtext", class: ["button-box-subtext", { "base-button-box__subtext-hidden": !t.showSubtext }] }, [t._v(" " + t._s(t.subtext) + " ")]), t.showTooltip ? e("BaseBoxTooltip", { on: { clicked: t.onTooltip } }) : t._e()], 1) : e("div", { staticClass: "button-box-content-small" }, [t.icon ? e("base-icon", { staticClass: "button-box-icon button-box-icon-small", attrs: { name: t.icon } }) : t._e(), e("div", { staticClass: "button-box-text-small" }, [t._v(" " + t._s(t.text) + " ")])], 1), t._t("default")], 2);
}, r = [], u = /* @__PURE__ */ n(
  l,
  b,
  r,
  !1,
  null,
  "d3051d25",
  null,
  null
);
const m = u.exports;
export {
  m as default
};
//# sourceMappingURL=BaseBoxButton.vue.es.js.map
