import o from "../BaseLoader/BaseLoader.vue.es.js";
import { debounce as s } from "../../utils/utils.es.js";
import r from "../../mixins/i18n.es.js";
import "./BaseMediaCarouselItem.vue.es2.js";
import d from "../../_virtual/_plugin-vue2_normalizer.es.js";
const n = {
  name: "BaseMedia",
  components: {
    BaseLoader: o,
    BaseButton: () => import("../BaseButton/BaseButton.vue.es.js").then((i) => i.default || i),
    BaseHlsVideo: () => import("../BaseHlsVideo/BaseHlsVideo.vue.es.js").then((i) => i.default || i)
  },
  mixins: [r],
  props: {
    /**
     * url of the medium to be displayed
     */
    mediaUrl: {
      type: String,
      default: ""
    },
    /**
     * url of image for poster property in html5 video tag
     */
    mediaPosterUrl: {
      type: String,
      default: ""
    },
    /**
     * filename that will be displayed for the medium
     */
    displayName: {
      type: String,
      default: ""
    },
    /**
     * url for downloading the file
     */
    downloadUrl: {
      type: String,
      default: ""
    },
    /**
     * define the media type
     *     options: 'image'|'video'|'audio'|'pdf'
     */
    mediaType: {
      type: String,
      default: "",
      validator(i) {
        return ["image", "video", "audio", "pdf", ""].includes(i);
      }
    },
    /**
     * set height and with from outside
     * e.g. { width: 1280px, height: 720px }
     */
    displaySize: {
      type: Object,
      default: () => ({})
    },
    /**
     * define if download button should be shown and download be enabled
     */
    allowDownload: {
      type: Boolean,
      default: !0
    },
    /**
     * define information texts for download and view (for pdfs) buttons in an
     * object with the respective properties
     *   could be strings or path to i18n json as well
     */
    infoTexts: {
      type: Object,
      default: () => ({
        download: "Download",
        view: "View"
      })
    },
    /**
     * define how the image should be rotated (EXIF orientation values)
     */
    orientation: {
      type: Number,
      default: 0
    },
    /**
     * specify an image srcset as an array of objects in the form
     *     `{ [mediawidth]: 'url' }`
     */
    previews: {
      type: Array,
      default: () => []
    },
    /**
     * additional info text below file name
     */
    additionalInfo: {
      type: Array,
      default: () => []
    },
    /**
     * set autoplay for video
     */
    autoplay: {
      type: Boolean,
      default: !1
    },
    /**
     * info text to display current slide e.g. '1 / 6'
     */
    currentSlideInfo: {
      type: String,
      default: ""
    },
    /**
     * define startLevel (size) of hls-video
     */
    hlsStartLevel: {
      type: Number,
      default: void 0
    }
  },
  data() {
    return {
      // variable for display image error handling
      displayImage: !0,
      isMobile: !1,
      // variable to store calculated footer height
      footerHeight: null
    };
  },
  computed: {
    fileType() {
      if (this.mediaType)
        return this.mediaType;
      const i = this.fileEnding;
      return ["png", "gif", "jpeg", "jpg"].includes(i.toLowerCase()) ? "image" : ["mp4", "m3u8", "ogg"].includes(i.toLowerCase()) ? "video" : ["mp3", "wav", "mpeg"].includes(i.toLowerCase()) ? "audio" : ["pdf"].includes(i.toLowerCase()) ? "document" : "";
    },
    fileName() {
      const i = this.sourceUrl.match(/([^/]+)$/);
      return i ? decodeURI(i[1]) : "";
    },
    fileEnding() {
      const i = this.sourceUrl.match(/\w+\.(\w{2,4})$/);
      return i ? i[1] : "";
    },
    formatNotSupported() {
      return !this.fileType;
    },
    imageSourceSet() {
      return this.previews.length ? this.previews.map((i) => Object.keys(i).map((e) => `${i[e]} ${e}`)).join(", ") : "";
    },
    sourceUrl() {
      const i = this.previews.length - 1;
      return this.previews && this.previews[i] ? Object.values(this.previews[i])[0] : this.mediaUrl;
    }
  },
  mounted() {
    this.isMobile = window.innerWidth <= 640, this.setFooterHeight(), this.resizeObserver().observe(document.body);
  },
  beforeDestroy() {
    this.resizeObserver().unobserve(document.body);
  },
  methods: {
    /**
     * function to trigger download action
     */
    download() {
      (this.allowDownload || !this.allowDownload && this.fileType === "") && this.$emit("download", { url: this.downloadUrl || this.mediaUrl, name: this.fileName });
    },
    /**
     * function to open pdf
     */
    openPdf() {
      window.open(this.mediaUrl);
    },
    /**
     * set footer height
     */
    setFooterHeight() {
      this.$refs.footer && (this.footerHeight = this.$refs.footer.offsetHeight);
    },
    /**
     * check if document width changes and calc/set footer height
     */
    resizeObserver() {
      return new ResizeObserver(s(500, () => this.setFooterHeight()));
    }
  }
};
var l = function() {
  var e = this, t = e._self._c;
  return t("div", { staticClass: "base-media-preview-image-stage", style: { "--footer-height": e.footerHeight + "px" } }, [e.displayImage && e.fileType === "image" ? t("div", { staticClass: "base-media-preview-preloader" }, [t("base-loader", { staticClass: "base-media-preview-preloader-loader" })], 1) : e._e(), e.displayImage && e.fileType === "image" ? t("img", { class: [
    "base-media-preview-image",
    "base-media-preview-rotation-" + e.orientation.toString()
  ], style: e.displaySize, attrs: { src: e.sourceUrl, srcset: e.imageSourceSet, alt: e.fileName, loading: "lazy" }, on: { error: function(a) {
    e.displayImage = !1;
  } } }) : e.fileType === "image" && !e.displayImage ? t("div", { staticClass: "base-media-preview-not-supported base-media-preview-error" }, [t("p", { staticClass: "base-media-preview-not-supported-file-name" }, [e._v(" An error occurred displaying this image. ")])]) : e.fileType === "video" ? t("base-hls-video", { ref: "baseMediaVideo", staticClass: "base-media-preview-image base-media-preview-video", attrs: { "display-size": e.displaySize, "media-url": e.mediaUrl, "media-poster-url": e.mediaPosterUrl, autoplay: e.autoplay, "hls-start-level": e.hlsStartLevel } }) : e.fileType === "audio" ? t("audio", { ref: "baseMediaAudio", staticClass: "base-media-preview__audio", attrs: { controls: "" } }, [e._v(" Your browser does not support the audio tag. "), t("source", { attrs: { src: e.mediaUrl, type: "audio/mpeg" } })]) : t("div", { staticClass: "base-media-preview-not-supported base-media-preview-error" }, [t("p", { staticClass: "base-media-preview-not-supported-file-name" }, [e._v(" " + e._s(e.fileName) + " ")]), t("div", { staticClass: "base-media-preview-not-supported-buttons" }, [e.allowDownload || !e.allowDownload && e.fileType === "" ? t("BaseButton", { staticClass: "base-media-preview__button base-media-preview-not-supported-button", attrs: { text: e.getI18nTerm(e.infoTexts.download), icon: "download", "icon-position": "right", "icon-size": "large" }, on: { clicked: e.download } }) : e._e(), !e.isMobile && e.fileEnding === "pdf" || !e.allowDownload && e.fileEnding === "pdf" ? t("BaseButton", { staticClass: "base-media-preview__button base-media-preview-not-supported-button", attrs: { text: e.getI18nTerm(e.infoTexts.view), icon: "eye", "icon-position": "right", "icon-size": "large" }, on: { clicked: function(a) {
    return e.openPdf();
  } } }) : e._e()], 1), e._l(e.additionalInfo, function(a) {
    return t("p", { key: a, staticClass: "base-media-preview__not-supported-additional" }, [e._v(" " + e._s(a) + " ")]);
  })], 2), t("div", { ref: "footer", staticClass: "base-media-preview-info" }, [t("div", { staticClass: "base-media-preview__info__col base-media-preview__info__col1 base-media-preview__info-text-wrapper" }, [t("p", { staticClass: "base-media-preview-info-text" }, [e._v(" " + e._s(e.displayName) + " ")]), e.additionalInfo.length ? e._l(e.additionalInfo, function(a) {
    return t("p", { key: a, staticClass: "base-media-preview__info-text-additional" }, [e._v(" " + e._s(a) + " ")]);
  }) : e._e()], 2), e.currentSlideInfo ? t("div", { staticClass: "base-media-preview__info__col base-media-preview__info__col2", attrs: { "aria-hidden": "true" } }, [t("p", [e._v(" " + e._s(e.currentSlideInfo) + " ")])]) : e._e(), e.allowDownload ? t("div", { staticClass: "base-media-preview__info__col base-media-preview__info__col3" }, [t("BaseButton", { staticClass: "base-media-preview__button", attrs: { text: e.infoTexts.download, icon: "download", "icon-position": "right", "icon-size": "large" }, on: { clicked: e.download } })], 1) : e._e()])], 1);
}, p = [], u = /* @__PURE__ */ d(
  n,
  l,
  p,
  !1,
  null,
  "741550dd",
  null,
  null
);
const _ = u.exports;
export {
  _ as default
};
//# sourceMappingURL=BaseMediaCarouselItem.vue.es.js.map
