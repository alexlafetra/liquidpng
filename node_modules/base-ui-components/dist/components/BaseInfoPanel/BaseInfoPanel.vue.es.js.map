{"version":3,"file":"BaseInfoPanel.vue.es.js","sources":["../../../src/components/BaseInfoPanel/BaseInfoPanel.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"['base-info-panel', { 'base-info-panel--box-shadow': boxShadow },\n             `base-info-panel--${panelStyle}`]\">\n    <!-- LEFT SIDE - ICON -->\n    <div\n      v-if=\"useIconElement\"\n      :class=\"['base-info-panel__icon-wrapper', `base-info-panel__icon-wrapper--${alignIconInt}`]\">\n      <!-- @slot replace the left side icon element -->\n      <slot\n        name=\"icon\">\n        <BaseIcon\n          :name=\"iconName\"\n          :class=\"['base-info-panel__icon', `base-info-panel__icon--${panelStyle}`]\" />\n      </slot>\n    </div>\n\n    <!-- RIGHT SIDE - TEXT -->\n    <div\n      class=\"base-info-panel__text-wrapper\">\n      <!-- HEADER -->\n      <component\n        :is=\"renderPanelHeaderAs\"\n        v-if=\"useHeaderElement\"\n        class=\"base-info-panel__text-header\">\n        <!-- @slot replace the header instead of using `panelHeaderText` -->\n        <slot\n          name=\"header\">\n          {{ panelHeaderText }}\n        </slot>\n      </component>\n\n      <!-- BODY -->\n      <component\n        :is=\"textBodyWrapper\"\n        v-bind=\"expandable ? expandBoxProps : false\"\n        class=\"base-info-panel__text-body\">\n        <!-- @slot replace the text body with something custom e.g. BaseTextList -->\n        <slot\n          name=\"text\">\n          <p\n            v-for=\"paragraph in displayedText\"\n            :key=\"paragraph\">\n            {{ paragraph }}\n          </p>\n        </slot>\n        <!-- BOTTOM AREA -->\n        <div\n          v-if=\"useBottomElement\"\n          class=\"base-info-panel__text-body-bottom\">\n          <div\n            class=\"base-info-panel__button-row\">\n            <template\n              v-if=\"!!buttonsConfig.length\">\n              <BaseButton\n                v-for=\"{ id, label, icon, iconPosition, disabled } in buttonsConfig\"\n                :key=\"id\"\n                :text=\"label\"\n                :icon=\"icon\"\n                :disabled=\"disabled ?? false\"\n                :icon-position=\"iconPosition || 'right'\"\n                button-style=\"single\"\n                icon-size=\"large\"\n                @clicked=\"emitAction(id)\" />\n            </template>\n            <!-- @slot replace buttons with custom elements or add some other custom element. If body is expandable these elements are rendered within the expand box.  -->\n            <slot name=\"bottom\" />\n          </div>\n        </div>\n      </component>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'BaseInfoPanel',\n  components: {\n    BaseIcon: () => import('@/components/BaseIcon/BaseIcon'),\n    BaseButton: () => import('@/components/BaseButton/BaseButton'),\n  },\n  props: {\n    /**\n     * specify the name of the icon rendered on the left side or use slot `icon`.\n     *  (see [BaseIcon](BaseIcon) for available icons).\n     *  if no icon should be displayed leave the section empty.\n     */\n    iconName: {\n      type: String,\n      default: 'attention',\n    },\n    /**\n     * define if icon should be aligned `top` or `center`.\n     *  if prop `expandable` is true the default is `top` otherwise the default is `center`.\n     *  @values top, center\n     */\n    alignIcon: {\n      type: String,\n      default: '',\n      validator: val => !val || ['top', 'center'].includes(val),\n    },\n    /**\n     * define the styling of the panel (influences e.g. icon size or padding).\n     */\n    panelStyle: {\n      type: String,\n      default: 'large',\n      validator: val => ['large', 'medium'].includes(val),\n    },\n    /**\n     * should box shadow be visible (useful to turn of if component should\n     *  be rendered inside another box e.g.).\n     */\n    boxShadow: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * the panel header text or use slot `header` instead.\n     */\n    panelHeaderText: {\n      type: String,\n      default: '',\n    },\n    /**\n     * define the HTML element as which the header should be rendered.\n     */\n    renderPanelHeaderAs: {\n      type: String,\n      default: 'h2',\n    },\n    /**\n     * define panel body text or use slot `text` instead.\n     */\n    text: {\n      type: [String, Array],\n      default: '',\n    },\n    /**\n     * add buttons at the end of the text element via this config and it will\n     *  render [BaseButton](BaseButton) elements - this should be an array of objects with the following\n     *  properties:\n     *\n     *  **`id`**: identifier that will also be emitted via `action` event on button click\n     *  **`label?`**: button label\n     *  **`icon?`**: button icon to be displayed - for available options see [BaseIcon](BaseIcon)\n     *  **`iconPosition?`**: should icon be displayed `left` or `right` of button label, default\n     *    is `right`\n     *  **`disabled?`**: set button disabled\n     *\n     *  **caveat**: `label` and `icon` property are optional but at least one of them needs to be\n     *    specified!\n     */\n    buttonsConfig: {\n      type: Array,\n      default: () => ([]),\n      // see that every button at least has an id and text OR icon\n      validator: val => val.every(({ id, label, icon }) => id && (label || icon)),\n    },\n    /**\n     * if set true an [BaseExpandBox](BaseExpandBox) is rendered inside the text body\n     *  config for this BaseExpandBox can be set via `expandBoxConfig` prop.\n     */\n    expandable: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * if prop `expandable` is set true use this prop to configure the BaseExpandBox element.\n     *  See [BaseExpandBox](BaseExpandBox#props) for available options.\n     */\n    expandBoxConfig: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n  emits: ['action'],\n  computed: {\n    /**\n     * should icon HTML element be rendered\n     * @returns {boolean}\n     */\n    useIconElement() {\n      return !!this.iconName || !!this.$slots.icon;\n    },\n    /**\n     * should header HTML element be rendered\n     * @returns {boolean}\n     */\n    useHeaderElement() {\n      return !!this.panelHeaderText || !!this.$slots.header;\n    },\n    /**\n     * should text body HTML element be rendered\n     * @returns {boolean}\n     */\n    useBottomElement() {\n      return !!this.buttonsConfig.length || !!this.$slots.bottom;\n    },\n    /**\n     * since prop `text` can be string or array unify for internal rendering\n     *  to always return an array\n     * @returns {string[]}\n     */\n    displayedText() {\n      if (this.text.length && typeof this.text === 'string') {\n        return [this.text];\n      }\n      return this.text;\n    },\n    /**\n     * if user has not set prop `alignIcon` choose value based on prop `expandable`\n     * @returns {string}\n     */\n    alignIconInt() {\n      return this.alignIcon || (this.expandable ? 'top' : 'center');\n    },\n    /**\n     * return the body HTML element - either a native `<div>` or if component\n     *  is `expandable` then the BaseExpandBox component\n     * @returns {(function(): Promise<{VueComponent}>)|string}\n     */\n    textBodyWrapper() {\n      if (this.expandable) {\n        return () => import('@/components/BaseExpandBox/BaseExpandBox');\n      }\n      return 'div';\n    },\n    /**\n     * assemble BaseExpandBox props from internal default settings and user specified\n     *  config\n     * @returns {Object}\n     */\n    expandBoxProps() {\n      return {\n        maxCollapsedHeight: 150,\n        boxShadow: !this.expandable,\n        padding: this.expandable ? 'none' : false,\n        ...this.expandBoxConfig,\n      };\n    },\n  },\n  methods: {\n    /**\n     * emit button click event\n     * @param {string} action - the id of the button clicked\n     */\n    emitAction(action) {\n      /**\n       * inform parent of button click\n       * @event action\n       * @param {string} - the id of the button clicked\n       */\n      this.$emit('action', action);\n    },\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n@import \"../../styles/variables\";\n\n.base-info-panel {\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  background: #ffffff;\n  gap: $spacing;\n  padding: $spacing-large;\n\n  @media screen and (max-width: $mobile) {\n    padding: $spacing;\n  }\n\n  &.base-info-panel--box-shadow {\n    box-shadow: $box-shadow-reg;\n  }\n\n  .base-info-panel__icon-wrapper {\n    flex: 0 0 auto;\n\n    &.base-info-panel__icon-wrapper--center {\n      margin: auto 0;\n    }\n\n    .base-info-panel__icon {\n      height: $icon-max;\n      width: $icon-max;\n      color: $app-color;\n\n      @media screen and (max-width: $mobile) {\n        height: 32px;\n        width: 32px;\n      }\n    }\n  }\n\n  .base-info-panel__text-wrapper {\n    flex: 1 1 auto;\n\n    .base-info-panel__text-body-bottom {\n      margin-top: $spacing-large;\n\n      @media screen and (max-width: $mobile) {\n        margin-top: $spacing;\n      }\n\n      .base-info-panel__button-row {\n        display: flex;\n        flex-direction: row;\n        gap: $spacing;\n        flex-wrap: wrap;\n\n        @media screen and (max-width: $mobile) {\n          flex-direction: column;\n          gap: $spacing-small;\n          align-items: flex-start;\n        }\n      }\n    }\n  }\n\n  &.base-info-panel--large {\n    padding: $spacing-large;\n\n    @media screen and (max-width: $mobile) {\n      padding: $spacing;\n    }\n\n    .base-info-panel__icon {\n      height: $icon-max;\n      width: $icon-max;\n\n      @media screen and (max-width: $mobile) {\n        height: 32px;\n        width: 32px;\n      }\n    }\n  }\n  &.base-info-panel--medium {\n    padding: $spacing;\n\n    @media screen and (max-width: $mobile) {\n      padding: $spacing-small;\n    }\n\n    .base-info-panel__icon {\n      height: 32px;\n      width: 32px;\n\n      @media screen and (max-width: $mobile) {\n        height: $icon-large;\n        width: $icon-large;\n      }\n    }\n  }\n}\n</style>\n"],"names":["_sfc_main","val","id","label","icon","action"],"mappings":"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"}