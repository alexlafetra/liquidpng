{"version":3,"file":"utils.cjs.js","sources":["../../src/utils/utils.js"],"sourcesContent":["export const capitalizeString = (string) => {\n  const newString2 = string.split('/')\n    .map(partialString => partialString.slice(0, 1)\n      .toUpperCase() + partialString.slice(1)).join('/');\n  return newString2.split(' ')\n    .map(partialString => partialString.slice(0, 1)\n      .toUpperCase() + partialString.slice(1)).join(' ');\n};\n\nexport const createId = () => Math.random().toString(36).substr(2, 9);\n\n/**\n * function to extract the value from a nested object property\n * e.g. to get 'prop3' value from { prop1: { prop2: { prop3: [value] }}} provide\n * the object and string `prop1.prop2.prop3`\n *\n * @param {string} string - the nested object property path in dot notation\n * @param {Object} object - the object from which the property value should be extracted\n * @returns {*} - the value contained in the nested object\n */\nexport const extractNestedPropertyValue = (string, object) => string\n  .split('.').reduce((a, b) => {\n    if (a) {\n      return a[b];\n    }\n    // if the previous `a[b]` did not exist `a` is now 'undefined' - return this\n    // directly instead of `a` to make code easier to read\n    return undefined;\n  }, object);\n\n/**\n * function taking a string and returning any name format in an array\n * with primary compare value (=last name) first and\n * secondary compare value (=first name) second\n *\n * @param compareString {string}\n * @returns {[string, string]}\n */\nexport const getNameSortValue = (compareString) => {\n  const compareStringSansNumbers = compareString.replace(/,? [0-9-]+/g, '');\n  if (compareStringSansNumbers.includes(',')) {\n    const compareArray = compareStringSansNumbers.split(', ');\n    return [compareArray[0], compareArray.splice(1).join()];\n  }\n  const compArray = compareStringSansNumbers.split(' ');\n  return [compArray.pop(), compareStringSansNumbers];\n};\n\n/**\n * function for sorting also allowing special sorting of objects for specified\n * attribute\n *\n * @param list {Array}: the list to sort\n * @param objectProp {String}: the property to sort an object by\n * @param sortByName {Boolean}: does it require special name sorting\n * @param valueFunction {Function}: possibility to apply a special function to\n * the value before any further handling (e.g. used for getting language specific\n * label\n * @returns {[*]}\n */\nexport const sort = (\n  list,\n  objectProp = '',\n  sortByName = false,\n  valueFunction = null,\n) => list.sort((a, b) => {\n  // assign respective list values to variables\n  let compareValueA = a;\n  let compareValueB = b;\n  // if a property name was passed use its value for comparison\n  if (objectProp) {\n    compareValueA = compareValueA[objectProp];\n    compareValueB = compareValueB[objectProp];\n  }\n  // if a special function was provided apply it to the value\n  if (valueFunction) {\n    compareValueA = valueFunction(compareValueA);\n    compareValueB = valueFunction(compareValueB);\n  }\n  // if sortByName was specified, get the respective compare values\n  if (sortByName) {\n    let secondaryCompareValueA = '';\n    let secondaryCompareValueB = '';\n    [compareValueA, secondaryCompareValueA] = getNameSortValue(compareValueA);\n    [compareValueB, secondaryCompareValueB] = getNameSortValue(compareValueB);\n\n    // if primary compare values are equal - use secondary compare value\n    if (compareValueA.toLowerCase() === compareValueB.toLowerCase()) {\n      compareValueA = secondaryCompareValueA;\n      compareValueB = secondaryCompareValueB;\n    }\n  }\n  // now do the actual value comparison\n  if (compareValueA.toLowerCase() > compareValueB.toLowerCase()) {\n    return 1;\n  }\n  return -1;\n});\n\nexport const hasData = (fieldValues) => {\n  let hasContent = false;\n  if (fieldValues && typeof fieldValues === 'object') {\n    if (fieldValues.length >= 0) {\n      fieldValues.forEach((values) => {\n        hasContent = hasData(values) || hasContent;\n      });\n    } else {\n      const objectKeys = Object.keys(fieldValues);\n      objectKeys\n        .forEach((key) => {\n          hasContent = hasData(fieldValues[key]) || hasContent;\n        });\n    }\n  } else {\n    hasContent = fieldValues === 0 || !!fieldValues || hasContent;\n  }\n  return hasContent;\n};\n\nexport const debounce = (delay, f) => {\n  let timer = 0;\n  return (...args) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => f.apply(this, args), delay);\n  };\n};\n\n/**\n * highlight characters in a word matching a given string with chosen html tags\n * @param {string} word - the word that should be highlighted\n * @param {string} queryString - the query string that should be highlighted in `word`\n * @param {string[]} highlightTags - the names of one or more html tags to apply\n *  (only names without '<' and '>'! e.g. ['u', 'b'])\n * @returns {string} - the string to fill into v-html\n */\nexport const highlightText = ({ word, queryString, highlightTags = ['u', 'strong'] }) => {\n  const check = new RegExp(queryString, 'ig');\n  const highlightTagsStart = `<${highlightTags.join('><')}>`;\n  const highlightTagsEnd = `</${highlightTags.join('></')}>`;\n  return word.toString()\n    .replace(check, matchedText => (`${highlightTagsStart}${matchedText}${highlightTagsEnd}`));\n};\n"],"names":["capitalizeString","string","newString2","split","map","partialString","slice","toUpperCase","join","createId","Math","random","toString","substr","extractNestedPropertyValue","object","reduce","a","b","getNameSortValue","compareString","compareStringSansNumbers","replace","includes","compareArray","splice","compArray","pop","sort","list","objectProp","arguments","length","undefined","sortByName","valueFunction","compareValueA","compareValueB","secondaryCompareValueA","secondaryCompareValueB","_getNameSortValue","_getNameSortValue2","_slicedToArray","_getNameSortValue3","_getNameSortValue4","toLowerCase","hasData","fieldValues","hasContent","_typeof","forEach","values","objectKeys","Object","keys","key","debounce","delay","f","timer","_len","args","Array","_key","clearTimeout","setTimeout","apply","_this","highlightText","_ref","word","queryString","_ref$highlightTags","highlightTags","check","RegExp","highlightTagsStart","concat","highlightTagsEnd","matchedText"],"mappings":"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"}