{"version":3,"file":"BaseExpandList.vue.cjs.js","sources":["../../../src/components/BaseExpandList/BaseExpandList.vue"],"sourcesContent":["<template>\n  <div class=\"base-expand-list\">\n    <!-- List items with clickable head to expand body -->\n    <div\n      :class=\"['base-box-shadow', { 'base-box-shadow--edit': edit }]\">\n      <ul\n        v-if=\"!edit\">\n        <BaseExpandListRow\n          v-for=\"(items, index) in data\"\n          v-show=\"index < (showAll ? data.length : minItems)\"\n          ref=\"baseExpandListRow\"\n          :key=\"index\"\n          :parent-index=\"index\"\n          :data=\"items\"\n          :multiple=\"multiple\"\n          render-as=\"li\"\n          @expanded-state=\"emitExpandedState\">\n          <template\n            #content=\"props\">\n            <!-- @slot a slot to provide customized entry row\n              @binding {Object} data - an object in `data` array -->\n            <slot\n              name=\"content\"\n              :data=\"props.data\" />\n          </template>\n        </BaseExpandListRow>\n      </ul>\n\n      <!-- List items in draggable area -->\n      <template\n        v-if=\"edit\">\n        <div\n          aria-live=\"assertive\"\n          class=\"assistive-text\">\n          {{ assertiveText }}\n        </div>\n\n        <p\n          :id=\"`draggable-${_uid}`\"\n          class=\"assistive-text\">\n          {{ assistiveText['description'] }}\n        </p>\n\n        <div\n          ref=\"baseExpandListDraggable\"\n          tabindex=\"0\"\n          :aria-labelledby=\"`draggable-${_uid}`\"\n          class=\"base-expand-list__draggable\">\n          <draggable\n            v-model=\"dataInt\"\n            :draggable=\"'.base-expand-list__draggable__item'\"\n            :handle=\"dragHandle\"\n            :disabled=\"disabled\"\n            animation=\"150\"\n            class=\"base-expand-list__draggable\">\n            <BaseExpandListRow\n              v-for=\"(item, index) in dataInt\"\n              ref=\"baseExpandListRow\"\n              :key=\"index\"\n              :data=\"item\"\n              :edit=\"true\"\n              :edit-hide-text=\"editHideText\"\n              :edit-show-text=\"editShowText\"\n              :control-type=\"controlType\"\n              :disabled=\"disabled\"\n              class=\"base-expand-list__draggable__item\"\n              @assistive=\"assistive($event, index)\"\n              @sorted=\"sort($event, index)\"\n              @update:data=\"updateData($event, index)\" />\n          </draggable>\n        </div>\n      </template>\n    </div>\n\n    <BaseButton\n      v-if=\"!edit && data.length > minItems\"\n      :id=\"`base-expand-list-${_uid}`\"\n      :aria-expanded=\"showAll ? 'true' : 'false'\"\n      :has-background-color=\"false\"\n      icon=\"drop-down\"\n      icon-position=\"right\"\n      :text=\"showAll ? showLessText : showMoreText\"\n      :class=\"{ 'base-button-icon-rotate-180': showAll }\"\n      @clicked=\"showAll = !showAll\" />\n  </div>\n</template>\n\n<script>\nimport BaseButton from '@/components/BaseButton/BaseButton';\nimport BaseExpandListRow from './BaseExpandListRow';\n\nexport default {\n  name: 'BaseExpandList',\n  components: {\n    BaseButton,\n    BaseExpandListRow,\n    Draggable: () => import('vuedraggable').then(m => (m.default || m)),\n  },\n  props: {\n    /**\n     * should be an object array with the following properties:\n     *  **label** `string` - the displayed label\n     *  **id** `string` - an identifier\n     *  **data** `Object[]` - an object array with the property:\n     *    \\* **label** `string` (renders component as\n     *    expandable row) or\n     *    * **value** `string` (renders component as entry row)\n     *\n     * optional properties:\n     *  **count** `number` - used for the number shown in brackets\n     *    (else the array length will be used)\n     *  **hidden** `boolean` - used to set visibility and is set in edit mode to toggle item\n     *\n     *  the `.sync` modifier might be used on this prop\n     */\n    data: {\n      type: Array,\n      default: () => [],\n    },\n    /**\n     * set edit mode from outside\n     */\n    edit: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * specify number of minimal displayed items\n     */\n    minItems: {\n      type: Number,\n      default: 3,\n    },\n    /**\n     * expand multiple items\n     */\n    multiple: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * button text to show more content\n     */\n    showMoreText: {\n      type: String,\n      default: 'Show all',\n    },\n    /**\n     * button text to show less content\n     */\n    showLessText: {\n      type: String,\n      default: 'Show less',\n    },\n    /**\n     * button text to hide item\n     */\n    editHideText: {\n      type: String,\n      default: 'Hide',\n    },\n    /**\n     * button text to show item\n     */\n    editShowText: {\n      type: String,\n      default: 'Show',\n    },\n    /**\n     * additional texts for screen-reader users to order items.\n     *   object that needs to have the following properties:\n     *   **activate**: Text read when item is focused, use variable {state} to\n     *    announce item visibility - specify text used in properties 'hidden' and 'visible'\n     *   **activated**: Text read after item was activated (selected by enter key)\n     *   **description**: Text read on initial list focus\n     *   **moved**: Text read after item was moved; can contain variables {pos} (for new position) and {total}\n     *   **visible**: string substituted to 'activate' text for state variable if item is visible\n     *   **hidden**: string substituted to 'activate' text for state variable if item is hidden\n     *\n     */\n    assistiveText: {\n      type: Object,\n      default: () => ({\n        activate: 'Use the Enter key to select item. Item is currently {state}',\n        activated: 'Item selected. Use arrow keys to order item.',\n        description: 'Use Tab key to navigate to item an order item.',\n        moved: 'Item moved: {pos} of {total}',\n        visible: 'visible',\n        hidden: 'hidden',\n      }),\n      validator: val => Object.keys(val)\n        .every(key => ['activate', 'activated', 'description', 'moved', 'visible', 'hidden'].includes(key)),\n    },\n    /**\n     * specify the type of visibility switch in edit mode\n     *  **button**: a [BaseButton](BaseButton) without text\n     *  **toggle**: a [BaseToggle](BaseToggle) element without text\n     */\n    controlType: {\n      type: String,\n      default: 'button',\n      validator: val => ['button', 'toggle'].includes(val),\n    },\n    /**\n     * define which items are expanded\n     */\n    expanded: {\n      type: Array,\n      default: () => [],\n    },\n    /**\n     * option to disable the edit functionalities of the element (toggle and draggable)\n     */\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      assertiveText: '',\n      showAll: false,\n      dataSorted: null,\n      originalData: null,\n      dragHandle: '',\n    };\n  },\n  computed: {\n    // the data array computed for draggable\n    dataInt: {\n      get() {\n        return this.dataSorted || this.data;\n      },\n      set(val) {\n        this.dataSorted = val;\n      },\n    },\n  },\n  watch: {\n    dataSorted: {\n      handler(val) {\n        // check if update is actually done by user during edit mode\n        // (this is the only time internal data should change!)\n        if (this.edit && JSON.stringify(val) !== JSON.stringify(this.data)) {\n          /**\n           * event emitted when data change internally (e.g. sorting, toggling hidden, etc.).\n           *  the `.sync` modifier may be used on the corresponding prop\n           *\n           * @event update:data\n           * @param {Object[]} - the modified data (e.g. from sorting)\n           */\n          this.$emit('update:data', val);\n        }\n      },\n      deep: true,\n    },\n    data: {\n      handler(val) {\n        if (JSON.stringify(val) !== JSON.stringify(this.dataSorted)) {\n          this.dataInt = JSON.parse(JSON.stringify(val));\n        }\n      },\n      deep: true,\n      immediate: true,\n    },\n    /**\n     * watch edit to create a copy of the data for the reset function\n     */\n    edit(val) {\n      this.assertiveText = '';\n      if (val) {\n        this.$nextTick(() => {\n          // set focus draggable area on edit start\n          this.$refs.baseExpandListDraggable.focus({ preventScroll: true });\n        });\n        // save a copy of original data in variable on edit activation\n        this.originalData = JSON.parse(JSON.stringify(this.data));\n      }\n    },\n    /**\n     * watch expanded state and expand items\n     */\n    expanded(val) {\n      this.expandItems(val);\n    },\n  },\n  mounted() {\n    // set draggable area depending on device touch capabilities\n    // ssr: check when component is mounted because isTouchCapable() uses window object\n    this.dragHandle = this.isTouchCapable()\n      ? ['.base-expand-item__handle']\n      : ['.base-expand-item__handle', '.base-expand-item__label'];\n  },\n  methods: {\n    /**\n     * expand items\n     *\n     * @param {Array} state - expanded state, eg: [0, 1]: level1 first item,\n     *  level2 second item is expanded\n     */\n    expandItems(state) {\n      if (!state.length) {\n        return;\n      }\n\n      // show all list items\n      if (state[0] >= this.minItems\n        && this.$refs.baseExpandListRow[state[0]]) {\n        this.showAll = true;\n      }\n\n      // first level\n      if (state[0] !== undefined\n        && this.$refs.baseExpandListRow[state[0]]) {\n        this.$refs.baseExpandListRow[state[0]].expanded = true;\n      }\n\n      // second level\n      if (state[1] !== undefined\n        && this.$refs.baseExpandListRow[state[0]].$refs.baseExpandListRow[state[1]]) {\n        this.$refs.baseExpandListRow[state[0]].$refs.baseExpandListRow[state[1]].expanded = true;\n      }\n    },\n    /**\n     * emit expanded state of items\n     * each array element represents the index of the expanded item per level\n     * eg: [0, 1]: level1 first item, level2 second item is expanded\n     *\n     * @param {Array} value - value to emit\n     */\n    emitExpandedState(value) {\n      /**\n       * event triggered when expanded state changes\n       *\n       * @event expanded-state\n       * @param {Array} - array with indices of the expanded item per level; eg: [0, 1]: level1 first item, level2 second item is expanded\n       */\n      this.$emit('expanded-state', value);\n    },\n    /**\n     * function called from BaseExpandListRow in case a prop of the data variable\n     * changes (e.g. hidden)\n     * @param {Object} rowData - the updated data of the BaseExpandListRow\n     * @param {number} index - the index in the dataInt array\n     */\n    updateData(rowData, index) {\n      this.$set(this.dataSorted, index, rowData);\n    },\n    /**\n     * sort list\n     *\n     * @param {object} obj\n     * @property {string} obj.direction - 'up' or 'down'\n     * @param {number} index - the previous index of the item in the array\n     */\n    sort({ direction }, index) {\n      // check list boundary\n      if ((direction === 'up' && index - 1 < 0)\n        || (direction === 'down' && index + 1 >= this.dataInt.length)) {\n        // current movable item (focus) needs to stay the same\n        this.$refs.baseExpandListRow[index].useAssistiveText = false;\n        this.$refs.baseExpandListRow[index].movable = true;\n        return;\n      }\n\n      // set object to new position\n      const to = direction === 'up' ? index - 1 : index + 1;\n      const from = index;\n      const data = this.dataInt;\n      data.splice(to, 0, data.splice(from, 1)[0]);\n      this.dataInt = data;\n\n      // set assertive text\n      this.assertiveText = this.assistiveText.moved\n        .replace('{pos}', to + 1)\n        .replace('{total}', this.dataInt.length);\n\n      // set current item movable (focus)\n      this.$refs.baseExpandListRow[to].useAssistiveText = false;\n      this.$refs.baseExpandListRow[to].movable = true;\n    },\n    /**\n     * reset list data - this always restores the state of the data on\n     * last save() triggered (=was triggered in parent)\n     * @public\n     */\n    reset() {\n      this.dataInt = JSON.parse(JSON.stringify(this.originalData));\n      // watcher on sortedData is not triggered here (because edit is already false)\n      // - need to propagate event to parent manually\n      this.$emit('update:data', this.dataInt);\n    },\n    /**\n     * save changed data\n     * @public\n     */\n    save() {\n      /**\n       * triggered on button click\n       * @event saved\n       * @param {object} - the data altered and ready for saving\n       */\n      this.$emit('saved', this.dataInt);\n      // update reset data copy\n      this.originalData = JSON.parse(JSON.stringify(this.dataInt));\n    },\n    /**\n     * set assistiveText for screen readers\n     *\n     * @param {string} type\n     * @param {number} index\n     */\n    assistive(type, index) {\n      const visibilityText = this.dataInt[index].hidden\n        ? this.assistiveText.hidden : this.assistiveText.visible;\n      const currentSupportString = this.assistiveText[type].replace('{state}', visibilityText);\n      if (this.assertiveText === currentSupportString) {\n        // clear temporary to trigger screen reader\n        this.assertiveText = '';\n        // screen reader needs delay to trigger aria-live message\n        setTimeout(() => {\n          this.assertiveText = currentSupportString;\n        }, 1);\n        return;\n      }\n      this.assertiveText = currentSupportString;\n    },\n    /**\n     * check touch capabilities of current device\n     *\n     * @returns {boolean|*}\n     */\n    isTouchCapable() {\n      return 'ontouchstart' in window\n        || (window.DocumentTouch && document instanceof window.DocumentTouch)\n        || navigator.maxTouchPoints > 0\n        || window.navigator.msMaxTouchPoints > 0;\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n  .base-expand-list {\n    &__draggable {\n      outline: none;\n    }\n  }\n</style>\n"],"names":["_sfc_main","BaseButton","BaseExpandListRow","m","val","key","state","value","rowData","index","direction","to","from","data","type","visibilityText","currentSupportString"],"mappings":"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"}