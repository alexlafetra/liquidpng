import s from "vuedraggable";
import i from "../BaseBoxButton/BaseBoxButton.vue.es.js";
import "./BaseDropBox.vue.es2.js";
import d from "../../_virtual/_plugin-vue2_normalizer.es.js";
const o = {
  name: "BaseDropBox",
  components: {
    BaseBoxButton: i,
    Draggable: s
  },
  props: {
    /**
     * specify an icon to be displayed centered in the box
     */
    icon: {
      type: String,
      default: null
    },
    /**
     * if `true` a plus sign is displayed in front of the icon
     */
    showPlus: {
      type: Boolean,
      default: !1
    },
    /**
     * the text displayed below the icon
     */
    text: {
      type: String,
      default: ""
    },
    /**
     * specify a potential subtext
     */
    subtext: {
      type: String,
      default: ""
    },
    /**
     * define the box size
     */
    boxSize: {
      type: Object,
      default: () => ({ width: "250px" })
    },
    /**
     * define the ratio of width and height of the box
     * (in percent string, e.g. 1:1 --> `'100'`, 1:2 --> `'50'`)
     */
    boxRatio: {
      type: String,
      default: "100"
    },
    /**
     * specify the tag of the button
     */
    renderElementAs: {
      type: String,
      default: "div"
    },
    /**
     * specify the type of drops
     *     @values files, elements
     */
    dropType: {
      type: String,
      default: "files",
      validate(t) {
        return ["files", "elements"].includes(t);
      }
    },
    /**
     * if the `dropType` is `elements`, specify the element group name
     * this needs to match the group name of the draggable element that should
     * be dragged into this element
     */
    dropElementName: {
      type: String,
      default: ""
    },
    /**
     * if the `dropType` is `elements` specify a class name to limit interactions to a certain element
     */
    dragItemClass: {
      type: String,
      default: ""
    },
    /**
     * set button inactive
     */
    disabled: {
      type: Boolean,
      default: !1
    },
    /**
     * show tooltip
     */
    showTooltip: {
      type: Boolean,
      default: !1
    }
  },
  data() {
    return {
      dragAndDropCapable: !1,
      isDragOver: !1,
      dragList: []
    };
  },
  mounted() {
    this.dragAndDropCapable = this.determineDragAndDropCapable(), this.dragAndDropCapable && this.dropType === "files" && !this.disabled && (["drag", "dragstart", "dragend", "dragover", "dragenter", "dragleave", "drop"].forEach((t) => {
      this.$refs.fileform.addEventListener(t, (e) => {
        e.preventDefault(), e.stopPropagation();
      }, !1);
    }), this.$refs.fileform.addEventListener("drop", (t) => {
      this.isDragOver = !1, this.$emit("dropped-file", t);
    }), ["dragenter", "dragleave"].forEach((t) => {
      this.$refs.fileform.addEventListener(t, (e) => {
        e.dataTransfer.types.includes("draggable") || (this.isDragOver = !this.isDragOver);
      });
    }));
  },
  methods: {
    onDragChange(t) {
      return this.isDragOver || (this.dragItemClass ? t.clone.className.includes(this.dragItemClass) && (this.isDragOver = !0) : this.isDragOver = !0), t.newIndex;
    },
    determineDragAndDropCapable() {
      const t = document.createElement("div");
      return ("draggable" in t || "ondragstart" in t && "ondrop" in t) && "FormData" in window && "FileReader" in window;
    },
    /**
     * method to get the dropped element id and emit it to parent
     */
    addEntry(t) {
      if (this.dropType === "elements") {
        if (this.isDragOver) {
          const e = this.dragList[0].id;
          this.$emit("dropped-element", e);
        }
        this.dragList = [], t.originalEvent.type === "touchend" && (this.isDragOver = !1);
      }
    },
    dragEnter(t) {
      t.pointerType === "touch" && !this.disabled && !this.isDragOver && this.$emit("clicked", t);
    },
    dragLeave(t) {
      t.pointerType === "touch" && !t.relatedTarget || (this.isDragOver = !1);
    },
    onClicked(t) {
      "ontouchstart" in window || navigator.msMaxTouchPoints > 0 || this.disabled || this.$emit("clicked", t);
    },
    onTooltip(t) {
      this.$emit("clicked", t);
    }
  }
};
var n = function() {
  var e = this, a = e._self._c;
  return a("BaseBoxButton", e._b({ class: [
    "base-drop-box",
    { "base-box-button-disabled": e.disabled },
    { "is-drag-over": e.isDragOver }
  ], attrs: { "box-ratio": e.boxRatio, "render-element-as": e.renderElementAs, disabled: e.disabled }, on: { clicked: e.onClicked, onTooltip: e.onTooltip } }, "BaseBoxButton", e.$props, !1), [a("div", { staticClass: "base-drop-box-inner" }, [e.dropType === "elements" ? a("draggable", { staticClass: "base-drop-box-drag-area", attrs: { sort: !1, group: e.dropElementName, "on-change": e.onDragChange, "ghost-class": "base-drop-box-ghost" }, on: { add: e.addEntry }, model: { value: e.dragList, callback: function(r) {
    e.dragList = r;
  }, expression: "dragList" } }, [a("div", { staticClass: "base-drop-box-drag-area", on: { dragleave: e.dragLeave, pointerenter: e.dragEnter, pointerleave: e.dragLeave } }, e._l(e.dragList, function(r) {
    return a("div", { key: r.id, staticClass: "base-drop-box-cloned-items" }, [e._v(" " + e._s(r) + " ")]);
  }), 0)]) : a("form", { ref: "fileform" })], 1)]);
}, l = [], p = /* @__PURE__ */ d(
  o,
  n,
  l,
  !1,
  null,
  "094cef27",
  null,
  null
);
const u = p.exports;
export {
  u as default
};
//# sourceMappingURL=BaseDropBox.vue.es.js.map
