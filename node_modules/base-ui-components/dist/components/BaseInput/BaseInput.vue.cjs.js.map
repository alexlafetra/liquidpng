{"version":3,"file":"BaseInput.vue.cjs.js","sources":["../../../src/components/BaseInput/BaseInput.vue"],"sourcesContent":["<template>\n  <div\n    class=\"base-input\">\n    <!-- LABEL ROW -->\n    <div\n      :class=\"['base-input__label-row', { hide: !showLabelRow }]\"\n      @click.stop=\"\">\n      <!-- need to disable because label is there (below)? -->\n      <!-- eslint-disable-next-line  vuejs-accessibility/label-has-for -->\n      <label\n        :for=\"idInt\"\n        :class=\"['base-input__label', { hide: !showLabel }]\">\n        {{ getLangLabel(label) }}\n      </label>\n      <div class=\"base-input__label-spacer\" />\n      <!-- @slot Slot to allow for additional elements on the right side of the label row <div> (e.g. language tabs)) -->\n      <slot name=\"label-addition\" />\n    </div>\n\n    <!-- ACTUAL INPUT FIELD -->\n    <!-- keydown event would have unwanted side effects here and is not relevant for\n      accessibility -->\n    <!-- eslint-disable-next-line vuejs-accessibility/click-events-have-key-events -->\n    <div\n      v-click-outside=\"clickedOutsideInput\"\n      :class=\"['base-input__input-frame',\n               { 'base-input__input-frame__border': showInputBorder },\n               { 'base-input__input-frame__disabled': disabled },\n               { 'base-input__input-frame__invalid': invalidInt }]\"\n      @focusin=\"clickedInside\"\n      @click=\"clickedInside\">\n      <!-- one class __active for pseudo-class :focus-within, one class __is-active\n      for manually setting input active -->\n      <div\n        :class=\"['base-input__input-container',\n                 {\n                   'base-input__input-container__is-active':\n                     isActiveInt && useFormFieldStyling,\n                 }]\">\n        <!-- @slot add elements before the actual input line but within the input field container -->\n        <slot name=\"pre-input-field\" />\n        <div\n          :class=\"['base-input__input-line-container',\n                   { 'base-input__input-line-container__wrap': !hideInputField }]\">\n          <!-- @slot Slot to allow for additional elements in the input field <div> (e.g. chips) (before <input>) -->\n          <slot name=\"input-field-addition-before\" />\n          <div class=\"base-input__input-line\">\n            <!-- @slot to add elements directly inline before the input (contrary to input-field-addition-before this does not wrap -->\n            <slot name=\"input-field-inline-before\" />\n            <div\n              :class=\"['base-input__input-wrapper',\n                       {\n                         'base-input__input-wrapper__fade-out':\n                           useFadeOut && !isActiveInt && !hideInputField,\n                       }]\">\n              <!-- @slot replace native HTML input element with custom input\n                   @binding { string } id - the id of the BaseInput component - if `id` is not provided in props this is an internal id that should also be set as <input> `id` -->\n              <slot\n                v-bind=\"{\n                  id: idInt,\n                }\"\n                name=\"input\">\n                <!-- need to disable because label is there (below)? -->\n                <!-- eslint-disable-next-line  vuejs-accessibility/form-control-has-label -->\n                <input\n                  :id=\"idInt\"\n                  ref=\"input\"\n                  v-model=\"inputInt\"\n                  :placeholder=\"placeholder\"\n                  :type=\"fieldType === 'number' ? 'text' : fieldType\"\n                  :list=\"dropDownListId || false\"\n                  :disabled=\"disabled\"\n                  :aria-disabled=\"disabled.toString()\"\n                  :aria-activedescendant=\"linkedListOption\"\n                  :aria-describedby=\"idInt\"\n                  :aria-required=\"required.toString()\"\n                  :required=\"required\"\n                  :aria-invalid=\"invalidInt.toString()\"\n                  :minlength=\"minLength\"\n                  :maxlength=\"maxLength\"\n                  :inputmode=\"fieldType === 'number' && allowNegativeNumber ? 'decimal': null\"\n                  enterkeyhint=\"done\"\n                  autocomplete=\"off\"\n                  :class=\"[inputClass, 'base-input__input',\n                           { 'base-input__input__hidden': hideInputField }]\"\n                  @keydown.tab=\"handleInputTab\"\n                  @blur=\"onInputBlur\"\n                  v-on=\"inputListeners\">\n              </slot>\n            </div>\n            <!-- wrapped in a button for accessibility -->\n            <button\n              v-if=\"showRemoveIcon\"\n              class=\"base-input__remove-icon-wrapper\"\n              @keydown.tab=\"blurInput\"\n              @click.stop=\"removeInput\">\n              <!-- @slot use a custom icon instead of standard remove icon -->\n              <slot name=\"remove-icon\">\n                <BaseIcon\n                  name=\"remove\"\n                  title=\"Clear input\"\n                  class=\"base-input__remove-icon\" />\n              </slot>\n            </button>\n            <div\n              v-if=\"loadable\"\n              class=\"base-input__loader\">\n              <BaseLoader\n                :hide=\"!isLoading\"\n                :text-on-loader-show=\"assistiveText.loaderActive\" />\n            </div>\n            <!-- @slot for adding elements after input (e.g. used to add loader) -->\n            <slot name=\"input-field-addition-after\" />\n          </div>\n        </div>\n        <div\n          v-if=\"showErrorIcon && invalidInt\"\n          class=\"base-input__error-icon-wrapper\">\n          <!-- @slot use a custom icon instead of standard error/warning icon -->\n          <slot name=\"error-icon\">\n            <BaseIcon\n              name=\"attention\"\n              class=\"base-input__error-icon\" />\n          </slot>\n        </div>\n        <!-- @slot after the actual input element over whole height of the input field container -->\n        <slot name=\"post-input-field\" />\n      </div>\n    </div>\n\n    <!-- BELOW INPUT FIELD -->\n    <div>\n      <!-- @slot below-input slot added to e.g. add drop down -->\n      <!-- this way it does not interfere with error message -->\n      <slot name=\"below-input\" />\n    </div>\n    <div\n      v-if=\"invalidInt && errorMessageInt\"\n      class=\"base-input__invalid-message\">\n      {{ getLangLabel(errorMessageInt) }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport ClickOutside from 'vue-click-outside';\nimport BaseIcon from '@/components/BaseIcon/BaseIcon';\nimport { createId } from '@/utils/utils';\nimport i18n from '../../mixins/i18n';\n\n/**\n * Form Input Field Component\n */\n\nexport default {\n  name: 'BaseInput',\n  directives: {\n    ClickOutside,\n  },\n  components: {\n    BaseIcon,\n    BaseLoader: () => import('@/components/BaseLoader/BaseLoader').then(m => m.default || m),\n  },\n  mixins: [i18n],\n  model: {\n    prop: 'input',\n    event: 'input',\n  },\n  props: {\n    /**\n     * input field settable from outside\n     */\n    input: {\n      type: [String, Number],\n      default: '',\n    },\n    /** label for input field, required for usability purposes, handle\n     * showing of label with property `showLabel`\n     */\n    label: {\n      type: String,\n      required: true,\n    },\n    /**\n     * defines if input label should be visible\n     */\n    showLabel: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * if field is occurring more then once - set an `id`\n     * **caveat**: in case a custom input is used with the `input` slot it is important to\n     * assign the same id to the input element\n     */\n    id: {\n      type: String,\n      default: '',\n    },\n    /**\n     * set a placeholder for the input field\n     */\n    placeholder: {\n      type: String,\n      default: 'Enter Text Here',\n    },\n    /**\n     * mark as required field\n     */\n    required: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * mark the form field as invalid and ideally also provide an error message\n     * to display below the form field\n     */\n    invalid: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * add an error message to be displayed below form field if field is invalid\n     */\n    errorMessage: {\n      type: String,\n      default: '',\n    },\n    /**\n     * define if error icon should be shown\n     */\n    showErrorIcon: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * specify input type\n     * @values text, number, password, email, url, search\n     *\n     */\n    fieldType: {\n      type: String,\n      default: 'text',\n      validator: val => ['text', 'number', 'password', 'email', 'url', 'search'].includes(val),\n    },\n    /**\n     * specify the id of a linked drop down list\n     */\n    dropDownListId: {\n      type: String,\n      default: '',\n    },\n    /**\n     * specify a linked list option (e.g. drop down)\n     *   (will be used in `aria-activedescendant` attribute)\n     */\n    linkedListOption: {\n      type: [Number, String],\n      default: null,\n    },\n    /**\n     * option to hide input field from outside (required for chips input)\n     */\n    hideInputField: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * set input field in active state from outside\n     * the `.sync` modifier can be used on this prop\n     */\n    isActive: {\n      type: Boolean,\n      default: null,\n    },\n    /**\n     * option to have the border of the input field not displayed\n     */\n    showInputBorder: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * define if standard form field styling should be\n     * used (otherwise no border, no box shadow)\n     */\n    useFormFieldStyling: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * if `true` a remove icon (or custom icon if slot `remove-icon` is used) will be shown allowing to remove\n     * all input at once\n     */\n    clearable: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * if `true` space is reserved for a loader that can be activated\n     * with the `isLoading` prop\n     */\n    loadable: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * show spinner to indicate that something is loading\n     * (for dynamically fetched entries that need to do backend requests)\n     */\n    isLoading: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * turn off input fade out if it interferes with other styling (e.g. with custom input)\n     */\n    useFadeOut: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * specify additional input field styling\n     */\n    inputClass: {\n      type: String,\n      default: '',\n    },\n    /**\n     * set a language (ISO 639-1)\n     */\n    language: {\n      type: String,\n      default: '',\n      validator: val => !val || val.length === 2,\n    },\n    /**\n     * use this prop to deactivate automatic setting of focus as soon as input element\n     * becomes active - this might require external handling of focus setting!\n     */\n    setFocusOnActive: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * set `true` if input field should be disabled\n     */\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * set min length of characters\n     */\n    minLength: {\n      type: Number,\n      default: null,\n    },\n    /**\n     * set max length of characters\n     */\n    maxLength: {\n      type: Number,\n      default: null,\n    },\n    /**\n     * set number of decimals (fieldType=number)<br>\n     * Note: -1 is used for endless decimals\n     */\n    decimals: {\n      type: Number,\n      default: null,\n    },\n    /**\n     * set decimal separator character, e.g. ',' for german\n     */\n    decimalSeparator: {\n      type: String,\n      default: '.',\n    },\n    /**\n     * set minimum value to accept\n     */\n    min: {\n      type: Number,\n      default: null,\n    },\n    /**\n     * set maximum value to accept\n     */\n    max: {\n      type: Number,\n      default: null,\n    },\n    /**\n     * define validation messages\n     * currently just for type number\n     */\n    validationTexts: {\n      type: Object,\n      default: () => ({\n        min: 'Value must be greater than or equal to {value}.',\n        max: 'Value must be less than or equal to {value}.',\n        minLength: 'Text must be at least {value} character(s) long.',\n        maxLength: 'Text cannot be longer than {value} characters.',\n      }),\n      // checking if all necessary properties are part of the provided object\n      validator: val => ['min', 'max', 'minLength', 'maxLength']\n        .every(prop => Object.keys(val).includes(prop)),\n    },\n    /**\n     * provide assistive text for screen readers\n     * **loaderActive**: if `loadable` is set `true` this text is read\n     *  as soon as the loader is appearing (`isLoading` is set true)\n     */\n    assistiveText: {\n      type: Object,\n      default: () => ({\n        loaderActive: 'loading.',\n      }),\n    },\n  },\n  data() {\n    return {\n      isActiveInt: false,\n      inputInt: '',\n      previousInput: '',\n      errorMessageInt: '',\n      invalidInt: '',\n    };\n  },\n  computed: {\n    /**\n     * check if an id was provided (to handle label input connection), if not create one\n     * @returns {String|string}\n     */\n    idInt() {\n      return this.id || createId();\n    },\n    /**\n     * determines if label row should be shown\n     * @returns {Boolean|boolean}\n     */\n    showLabelRow() {\n      // get label-addition slot\n      const slotElements = this.$slots['label-addition'];\n      // check if slot exists and has data and actually has content\n      // (this did not work with SSR otherwise...)\n      const slotsHaveData = !!slotElements && !!slotElements.length\n        && slotElements.some(elem => elem.tag || elem.text?.trim());\n      // show label when prop is set true or a label addition was added via slot\n      return this.showLabel || slotsHaveData;\n    },\n    /**\n     * determines if remove icon should be shown\n     * @returns {boolean}\n     */\n    showRemoveIcon() {\n      return this.clearable && !!this.inputInt;\n    },\n    inputListeners() {\n      return {\n        // add all the listeners from the parent\n        ...this.$listeners,\n        // and add custom listeners\n        ...{\n          // for number fields: filter characters except numbers, decimals, negative values, e\n          input: (event) => {\n            let { value } = event.target;\n\n            // clear errorMessage\n            this.errorMessageInt = '';\n            this.invalidInt = false;\n\n            // Handle number inputs with input field type text.\n            // Use a regular expression to validate the number format.\n            // Invalid entries are restored with the previous valid value.\n            if (this.fieldType === 'number') {\n              const decimalSeparator = this.decimals ? `\\\\${this.decimalSeparator}` : '';\n              const bannedChars = new RegExp(`[^e0-9${decimalSeparator}\\\\+-]`, 'g');\n              const decimals = this.decimals && this.decimals !== Number('-1') ? `{0,${this.decimals}}` : '*';\n              const negativeNumber = this.allowNegativeNumber ? '-?' : '';\n              const eMinus = this.decimals && this.decimals !== Number('-1') ? '-' : '';\n              // pattern to match number: ^((-?[0-9]+(,|\\.)?[0-9]{0,2}(e(-|\\+)?[0-9]*)?)|-)$\n              // allow: optional -, numbers, optional decimal separator, e, optional +|-, numbers\n              const pattern = new RegExp(`^((${negativeNumber}[0-9]*${decimalSeparator}?([0-9]${decimals})(e(${eMinus}|\\\\+)?[0-9]*)?)|-)$`, 'g');\n              // dot or comma are allowed as decimal separators\n              // translate them beforehand\n              value = value.replace(',', this.decimalSeparator);\n              value = value.replace('.', this.decimalSeparator);\n              // remove banned characters\n              value = value.replace(bannedChars, '');\n              // remove multiple special characters\n              value = this.removeMultipleChars(value, this.decimalSeparator);\n              value = this.removeMultipleChars(value, 'e');\n              // update input\n              this.inputInt = value;\n              // round and crop decimals if decimals set\n              if (this.decimals && !Number.isNaN(Number(value))) {\n                value = this.roundDecimals(value);\n                this.inputInt = value;\n              }\n              // validate number format\n              if (value !== '' && !value.match(pattern)) {\n                this.inputInt = this.previousInput;\n                return;\n              }\n              // handle min values\n              if (this.min && value && Number(this.stringToFloat(value)) < this.min) {\n                this.errorMessageInt = this.validationTexts.min.replace('{value}', this.min.toString());\n                this.invalidInt = true;\n                return;\n              }\n              // handle max values\n              if (this.max && Number(this.stringToFloat(value)) > this.max) {\n                this.errorMessageInt = this.validationTexts.max.replace('{value}', this.max.toString());\n                this.invalidInt = true;\n                return;\n              }\n              // reset infinite values\n              if (Number(this.stringToFloat(value)) === Infinity) {\n                value = 0;\n                this.inputInt = value;\n              }\n              // do not emit cases which would be NaN\n              if (this.inputIsNaN(value)) {\n                return;\n              }\n              // store input to use/reset if validation fails\n              this.previousInput = value;\n              // format number\n              value = this.stringToFloat(value);\n            }\n\n            if (this.fieldType !== 'number') {\n              // handle min length\n              if (this.minLength && value && value.length < this.minLength) {\n                this.errorMessageInt = this.validationTexts.minLength.replace('{value}', this.minLength.toString());\n                this.invalidInt = true;\n                return;\n              }\n              // handle max length\n              if (this.maxLength && value.length > this.maxLength) {\n                this.errorMessageInt = this.validationTexts.maxLength.replace('{value}', this.maxLength.toString());\n                this.invalidInt = true;\n                return;\n              }\n            }\n\n            /**\n              * Event emitted on input, passing input string\n              *\n              * @event input\n              * @param {string} - the input event value however\n              *   passing only the event.target.value\n              *\n              */\n            this.$emit('input', value);\n          },\n          blur: (event) => {\n            const { value } = event.target;\n\n            if (this.fieldType === 'number') {\n              // clear value and return if value is NaN\n              if (value === '' || Number.isNaN(Number(this.stringToFloat(value)))) {\n                this.inputInt = '';\n                this.previousInput = '';\n              } else {\n                // otherwise parse the value again as number to remove obsolete chars, e.g. 0.0 > 0\n                this.inputInt = this.translateFloat(Number(this.stringToFloat(value)));\n                // also update previous input so there are no funny effects if a type an\n                // invalid character after blur\n                this.previousInput = this.inputInt;\n              }\n            }\n            this.$emit('blur', event);\n          },\n        },\n      };\n    },\n    /**\n     * find and store the input element associated with this component in a variable\n     */\n    inputElement() {\n      // check if client side\n      if (window) {\n        // if input element exists in ref use this one\n        if (this.$refs && this.$refs.input) {\n          return this.$refs.input;\n        }\n        // otherwise check for an custom element by id\n        const tempElement = document.getElementById(this.idInt);\n        // check if element exists\n        if (tempElement) {\n          return tempElement;\n        }\n        // otherwise warn that the id was not assigned to the input element\n        // eslint-disable-next-line\n        console.warn('BaseInput: you did not assign the same id to the BaseInputComponent and the input element!');\n      }\n      return null;\n    },\n    /**\n     * determines if a negative number|float is allowed\n     * @returns {boolean}\n     */\n    allowNegativeNumber() {\n      return this.min === null || this.min < 0;\n    },\n  },\n  watch: {\n    /**\n     * watch input prop to sync with internal inputInt variable\n     */\n    input: {\n      handler(val) {\n        const data = this.fieldType === 'number'\n          ? this.translateFloat(val) : val;\n\n        if (data !== this.inputInt) {\n          this.inputInt = data;\n          this.previousInput = data;\n          // trigger input event to validate changes from parent (also initial value)\n          this.triggerInputEvent();\n        }\n      },\n      immediate: true,\n    },\n    /**\n     * if an external input element is used changes in inputInt need to be propagated to\n     * parent manually\n     * @param {string} val\n     */\n    inputInt(val) {\n      let data = val;\n\n      if (this.fieldType === 'number') {\n        // do not emit cases which would be NaN\n        if (this.inputIsNaN(data)) {\n          return;\n        }\n        // format value\n        data = this.stringToFloat(data);\n      }\n      // check if the internal input element exists and if values are in sync\n      if (data !== this.input) {\n        // if not propagate change to parent\n        this.$emit('input', data);\n      }\n    },\n    /**\n     * keep externally set active variable and internal active variable in sync\n     * @param {boolean} val\n     */\n    isActive: {\n      handler(val) {\n        if (val !== this.isActiveInt) {\n          this.isActiveInt = val;\n        }\n      },\n      immediate: true,\n    },\n    /**\n     * keep externally set active variable and internal active variable in sync\n     * @param {boolean} val\n     */\n    isActiveInt(val) {\n      // if active was set true focus the input field\n      if (this.inputElement && val && this.setFocusOnActive) {\n        this.inputElement.focus();\n      }\n      /**\n       * propagate active state changes of input field to parent\n       * @event update:is-active\n       * @param {boolean} - is input field active\n       */\n      this.$emit('update:is-active', val);\n    },\n    /**\n     * keep externally set errorMessage variable and internal errorMessage variable in sync\n     * @param {string} val\n     */\n    errorMessage: {\n      handler(val) {\n        if (val !== this.errorMessageInt) {\n          this.errorMessageInt = val;\n        }\n      },\n      immediate: true,\n    },\n    /**\n     * keep externally set invalid variable and internal invalid variable in sync\n     * @param {boolean} val\n     */\n    invalid: {\n      handler(val) {\n        if (val !== this.invalidInt) {\n          this.invalidInt = val;\n        }\n      },\n      immediate: true,\n    },\n    /**\n     * keep externally set invalid variable and internal invalid variable in sync\n     * @param {boolean} val\n     */\n    invalidInt(val) {\n      if (val !== this.invalid) {\n        /**\n         * propagate invalid state changes of input field to parent\n         * @event update:invalid\n         * @param {boolean} val\n         */\n        this.$emit('update:invalid', val);\n      }\n    },\n  },\n  mounted() {\n    // handle max value of initial input\n    if (this.max && Number(this.stringToFloat(this.input)) > this.max) {\n      this.inputInt = this.max;\n    }\n    // on first render set the focus here manually\n    if (this.isActiveInt && this.inputElement) {\n      this.inputElement.focus();\n    }\n  },\n  methods: {\n    /**\n     * in general input field active styling is handled via focusin and\n     * clicked-outside, however for special case iOS touch  devices have\n     * up and down arrows that do not trigger any event other than blur and will\n     * cause the dropdowns of input fields to remain open\n     * @param {FocusEvent} event - the native blur event\n     */\n    onInputBlur(event) {\n      // so since these arrows only navigate between input fields we check if there is a\n      // related target and if this related target is an input field and if yes we make sure\n      // the id is different from the input id of this component (the one the event originated from)\n      if (event.relatedTarget && event.relatedTarget.tagName === 'INPUT'\n        && (!event.relatedTarget.id || event.relatedTarget.id !== event.target.id)) {\n        // set input active state false\n        this.setFieldState(false);\n      }\n    },\n    /**\n     * special event triggered when tab was used on clear input button\n     * @param {KeyboardEvent} event\n     */\n    blurInput(event) {\n      // set input active state false\n      this.setFieldState(false);\n      // handle as if tab was coming from input to also allow parent to handle\n      // active state if isActive is used\n      this.$emit('keydown', event);\n    },\n    /**\n     * function triggered if click event or focus event happened inside the\n     * 'input-frame' element\n     * @param {FocusEvent|MouseEvent} event the native event\n     */\n    clickedInside(event) {\n      if (!this.disabled) {\n        this.setFieldState(true);\n        /**\n         * Event emitted on click on input field <div>\n         *\n         * @event click-input-field\n         * @param {FocusEvent, MouseEvent} - event triggered by focusin or click\n         *\n         */\n        this.$emit('click-input-field', event);\n      }\n    },\n    /**\n     * triggered when click happened outside of 'input-frame' element\n     * @param {Event} event\n     */\n    clickedOutsideInput(event) {\n      this.setFieldState(false);\n      /**\n       * Event emitted when click outside input field <div> is registered\n       *\n       * @event clicked-outside\n       * @param {MouseEvent} - the native mouse event\n       *\n       */\n      this.$emit('clicked-outside', event);\n    },\n    /**\n     * triggered on clear input button click and removes input and returns focus\n     * to input field\n     */\n    removeInput() {\n      this.inputInt = '';\n      if (this.inputElement) {\n        this.inputElement.focus();\n      }\n    },\n    /**\n     * set the active input field state (used for visual active indication)\n     * @param {boolean} val - the value to be set\n     */\n    setFieldState(val) {\n      this.isActiveInt = val;\n    },\n    handleInputTab(event) {\n      if (!this.showRemoveIcon || event.shiftKey) {\n        this.setFieldState(false);\n      }\n    },\n    /**\n     * replace dot with decimalSeparator\n     *\n     * @param {number} value\n     * @returns {string}\n     */\n    translateFloat(value) {\n      if (value == null) return '';\n      return value.toString().replace('.', this.decimalSeparator);\n    },\n    /**\n     * replace decimalSeparator with dot\n     *\n     * @param {string} value\n     * @returns {number}\n     */\n    stringToFloat(value) {\n      // number('') would be 0, so we leave it empty if necessary\n      return value ? Number(value.toString().replace(this.decimalSeparator, '.')) : '';\n    },\n    /**\n     * check if input would not be a valid number\n     *\n     * @param {string} value\n     * @returns {boolean}\n     */\n    inputIsNaN(value) {\n      const ds = this.decimalSeparator;\n      // eg: -|-,|-0|-0,0|1,|11,|-1,\n      const pattern = new RegExp(`^(-0|-?(([0-9]*\\\\${ds}([0]*)?)?|(\\\\${ds}([0-9]*)?)?))$`, 'g');\n      return value.length\n        && (value.toString().match(pattern) || Number.isNaN(this.stringToFloat(value)));\n    },\n    /**\n     * trigger input event\n     * e.g. to validate input changes from parent\n     */\n    triggerInputEvent() {\n      // Todo: find other solution to wait until inputInt has really changed\n      setTimeout(() => {\n        if (this.inputElement) {\n          // need to set element value manually here since in some devices (e.g. pixel) it was not updated\n          // yet when event is triggered (see ticket #2451)\n          this.inputElement.value = this.inputInt;\n          this.inputElement.dispatchEvent(new Event('input'));\n        }\n      }, 0);\n    },\n    /**\n     * crop and round decimals if needed\n     * eg allowed decimals: 2 <br>\n     *   * 12.5e-2 => 0.125 => 0.12\n     *   * 0.01e-1 => 0.001 => 0\n     * @param value\n     * @returns {string}\n     */\n    roundDecimals(value) {\n      const chunks = value.split(this.decimalSeparator);\n      if (chunks[1] && chunks[1].length > this.decimals) {\n        return this.translateFloat(Number(Number(value).toFixed(this.decimals)));\n      }\n      return value;\n    },\n    /**\n     * remove multiple given character except first occurrence\n     * @param {String} value\n     * @param {String} char\n     * @returns {string}\n     */\n    removeMultipleChars(value, char) {\n      const pattern = new RegExp(`\\\\${char}`, 'g');\n      // eslint-disable-next-line\n      return value.replace(pattern, (c, i, text) => text.indexOf(c) === i ? c : '');\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import '../../styles/variables.scss';\n\n.base-input {\n  position: relative;\n  background: inherit;\n  width: 100%;\n\n  .base-input__label-row {\n    display: flex;\n    flex-direction: row;\n    margin-bottom: $spacing-small;\n\n    .base-input__label {\n      color: $font-color-second;\n      text-align: left;\n      align-self: flex-end;\n      overflow-wrap: break-word;\n      min-width: 150px;\n    }\n\n    .base-input__label-spacer {\n      flex: 1 1 auto;\n    }\n  }\n\n  .base-input__input-frame {\n    position: relative;\n    width: 100%;\n    background: inherit;\n\n    &::after {\n      content: '';\n      position: absolute;\n      top: 0;\n      right: 0;\n      left: 0;\n      bottom: 0;\n      pointer-events: none;\n      background: transparent;\n    }\n\n    &.base-input__input-frame__border::after {\n      border: $input-field-border;\n    }\n\n    &.base-input__input-frame__invalid::after {\n      border: 1px solid #{$app-color};\n    }\n\n    &.base-input__input-frame__disabled::after {\n      position: absolute;\n      left: 0;\n      top: 0;\n      content: '';\n      height: 100%;\n      width: 100%;\n      background: rgba(245, 245, 245, 0.4);\n    }\n\n    .base-input__input-container {\n      display: flex;\n      position: relative;\n      background: white;\n      min-height: $row-height-small;\n      padding: 0 $spacing-small;\n\n      &.base-input__input-container__active:focus-within,\n      &.base-input__input-container__is-active {\n        box-shadow: $input-shadow;\n      }\n\n      .base-input__input-line-container {\n        display: flex;\n        align-items: center;\n        flex: 1 1 auto;\n\n        &.base-input__input-line-container__wrap {\n          flex-wrap: wrap;\n        }\n\n        .base-input__input-line {\n          display: flex;\n          flex: 1 1 auto;\n          align-items: center;\n\n          .base-input__input-wrapper {\n            flex: 1 1 auto;\n            margin-right: $spacing;\n            position: relative;\n            display: flex;\n\n            &.base-input__input-wrapper__fade-out::after {\n              content: '';\n              width: calc(#{$fade-out-width} + #{$spacing});\n              height: $input-field-line-height;\n              position: absolute;\n              top: 50%;\n              transform: translateY(-50%);\n              right: 0;\n              background: linear-gradient(to right, rgba(255, 255, 255, 0) , white);\n              pointer-events: none;\n            }\n\n            .base-input__input {\n              padding: $spacing-small-half 0;\n              min-height: $row-height-small;\n              width: 100%;\n\n              &.base-input__input__hidden {\n                width: 1px;\n                overflow: hidden;\n                opacity: 0;\n                filter:alpha(opacity=0);\n                animation: all 500ms ease;\n              }\n\n              &[type=search] {\n                appearance: none;\n              }\n            }\n          }\n\n          .base-input__remove-icon-wrapper {\n            color: $font-color-third;\n            cursor: pointer;\n            display: flex;\n            justify-content: center;\n\n            &:focus, &:active {\n              color: $app-color-secondary;\n            }\n\n            .base-input__remove-icon {\n              height: $icon-medium;\n              width: $icon-medium;\n              min-width: $icon-medium;\n              margin: $spacing-small;\n            }\n          }\n\n          .base-input__loader {\n            margin: 0 $spacing;\n            transform: scale(0.5);\n            pointer-events: none;\n          }\n        }\n      }\n      .base-input__error-icon-wrapper {\n        color: $app-color;\n        display: flex;\n        justify-content: center;\n        align-self: center;\n        flex-shrink: 0;\n\n        .base-input__error-icon {\n          height: $icon-large;\n          width: $icon-large;\n          margin-left: $spacing-small;\n          flex-shrink: 0;\n        }\n      }\n    }\n  }\n\n  .base-input__invalid-message {\n    font-size: $font-size-small;\n    color: $app-color;\n  }\n}\n\n@media screen and (max-width: $tablet) {\n  .base-input {\n    .base-input__label-row {\n      flex-wrap: wrap;\n      justify-content: flex-end;\n\n      .base-input__label-spacer {\n        flex: 1 1 auto;\n      }\n    }\n  }\n}\n</style>\n"],"names":["_sfc_main","ClickOutside","BaseIcon","m","i18n","val","prop","createId","slotElements","slotsHaveData","elem","_a","event","value","decimalSeparator","bannedChars","decimals","negativeNumber","eMinus","pattern","tempElement","data","ds","chunks","char","c","i","text"],"mappings":"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"}