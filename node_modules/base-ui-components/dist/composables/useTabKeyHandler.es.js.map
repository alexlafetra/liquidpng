{"version":3,"file":"useTabKeyHandler.es.js","sources":["../../src/composables/useTabKeyHandler.js"],"sourcesContent":["import { computed, ref, watchEffect } from 'vue';\n\n/**\n * Handle tab key events to focus a list of focusable HTML elements\n * Note: Currently the composable makes troubles when imported from the base-ui-components library.\n * TODO: Find another way to initialize the EventListener than within the watchEffect method.\n *\n * @param {Object, String} target - container element where the focusableElements are located\n *                                  * can be either a Vue reference object or\n *                                  * a string representing a CSS selector\n * @param {string} focusableElements - comma separated list of HTML elements to focus\n * @param {boolean} disable - disable method and do nothing\n * @returns {{focusableHTMLTags: *, disableHandler: *}}\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function useTabKeyHandler(target, focusableElements, disable = false) {\n  const focusableHTMLTags = ref(focusableElements);\n  const disableHandler = ref(disable);\n\n  /**\n   * determine the target HTML element\n   * @return {HTMLElement, undefined}\n   */\n  const targetElement = computed(() => {\n    if (typeof target === 'object' && target?.value) {\n      return target.value;\n    }\n    // if target is a string representing a CSS selector\n    if (typeof target === 'string' && document?.querySelector(target)) {\n      return document?.querySelector(target);\n    }\n    return undefined;\n  });\n\n  /**\n   * get focusable dom elements within a target container element\n   * @return array - list of focusable DOM elements\n   */\n  function getFocusableElements() {\n    // if targetElement is not defined, return an empty array\n    if (!targetElement.value) return [];\n    // define an empty list\n    const elements = Array.from(targetElement.value.querySelectorAll(focusableHTMLTags.value));\n    // return DOM visible focusable elements\n    return elements.filter(element => element.checkVisibility());\n  }\n\n  /**\n   * set focus to next/prev focusable DOM element\n   * @param {string} direction\n   */\n  function setFocus(direction = 'next') {\n    const elements = getFocusableElements();\n    if (!elements.length) return;\n\n    let currentFocus = null;\n    let nextFocus = null;\n    // find current focus\n    elements.forEach((element, index) => {\n      if (element.matches(':focus')) {\n        currentFocus = index;\n      }\n    });\n    // if the current focus is not one of the focusable items, use the first one\n    if (currentFocus === null) {\n      elements[0].focus();\n      return;\n    }\n    // set the next focus depending on the direction\n    if (direction === 'next') {\n      nextFocus = elements[currentFocus + 1] ? currentFocus + 1 : 0;\n    }\n    if (direction === 'prev') {\n      nextFocus = elements[currentFocus - 1]\n        ? currentFocus - 1 : elements.length - 1;\n    }\n    // finally, set focus\n    elements[nextFocus].focus();\n  }\n\n  /**\n   * intercept tab key event\n   * @param {Object} e - event\n   */\n  function tabKeyHandler(e) {\n    if (disableHandler.value) return;\n\n    if (e.shiftKey && e.key === 'Tab') {\n      e.preventDefault();\n      setFocus('prev');\n      return;\n    }\n\n    if (e.key === 'Tab') {\n      e.preventDefault();\n      setFocus('next');\n    }\n  }\n\n  watchEffect(() => {\n    /**\n     * Currently the composable makes troubles when imported from the base-ui-components library.\n     * Somehow the watchEffect method is called before the DOM is updated.\n     * TODO: find another way to initialize the eventListener\n     */\n    if (targetElement.value) {\n      targetElement.value.addEventListener('keydown', tabKeyHandler);\n    }\n  });\n\n  return {\n    focusableHTMLTags,\n    disableHandler,\n  };\n}\n"],"names":["useTabKeyHandler","target","focusableElements","disable","arguments","length","undefined","focusableHTMLTags","ref","disableHandler","targetElement","computed","_document","_typeof","value","document","querySelector","_document2","getFocusableElements","elements","Array","from","querySelectorAll","filter","element","checkVisibility","setFocus","direction","currentFocus","nextFocus","forEach","index","matches","focus","tabKeyHandler","e","shiftKey","key","preventDefault","watchEffect","addEventListener"],"mappings":";;AAeO,SAASA,EAAiBC,GAAQC,GAAoC;AAAA,MAAjBC,IAAOC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG,IAC9DG,IAAoBC,EAAIN,CAAiB,GACzCO,IAAiBD,EAAIL,CAAO,GAM5BO,IAAgBC,EAAS,WAAM;AAAA,QAAAC;AACnC,QAAIC,EAAOZ,CAAM,MAAK,YAAYA,MAAM,QAANA,MAAM,UAANA,EAAQa;AACxC,aAAOb,EAAOa;AAGhB,QAAI,OAAOb,KAAW,aAAQW,IAAIG,cAAQH,QAAAA,gBAARA,EAAUI,cAAcf,CAAM,GAAG;AAAA,UAAAgB;AACjE,cAAAA,IAAOF,cAAQE,QAAAA,MAARA,SAAAA,SAAAA,EAAUD,cAAcf,CAAM;AAAA,IACvC;AAAA,EAEF,CAAC;AAMD,WAASiB,IAAuB;AAE9B,QAAI,CAACR,EAAcI;AAAO,aAAO;AAEjC,QAAMK,IAAWC,MAAMC,KAAKX,EAAcI,MAAMQ,iBAAiBf,EAAkBO,KAAK,CAAC;AAEzF,WAAOK,EAASI,OAAO,SAAAC,GAAO;AAAA,aAAIA,EAAQC;KAAkB;AAAA,EAC9D;AAMA,WAASC,IAA6B;AAAA,QAApBC,IAASvB,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG,QACtBe,IAAWD;AACjB,QAAKC,EAASd,QAEd;AAAA,UAAIuB,IAAe,MACfC,IAAY;AAQhB,UANAV,EAASW,QAAQ,SAACN,GAASO,GAAU;AACnC,QAAIP,EAAQQ,QAAQ,QAAQ,MAC1BJ,IAAeG;AAAAA,MAEnB,CAAC,GAEGH,MAAiB,MAAM;AACzBT,QAAAA,EAAS,CAAC,EAAEc;AACZ;AAAA,MACF;AAEA,MAAIN,MAAc,WAChBE,IAAYV,EAASS,IAAe,CAAC,IAAIA,IAAe,IAAI,IAE1DD,MAAc,WAChBE,IAAYV,EAASS,IAAe,CAAC,IACjCA,IAAe,IAAIT,EAASd,SAAS,IAG3Cc,EAASU,CAAS,EAAEI;;EACtB;AAMA,WAASC,EAAcC,GAAG;AACxB,QAAI1B,CAAAA,EAAeK,OAEnB;AAAA,UAAIqB,EAAEC,YAAYD,EAAEE,QAAQ,OAAO;AACjCF,UAAEG,eAAc,GAChBZ,EAAS,MAAM;AACf;AAAA,MACF;AAEA,MAAIS,EAAEE,QAAQ,UACZF,EAAEG,eAAc,GAChBZ,EAAS,MAAM;AAAA;AAAA,EAEnB;AAEAa,SAAAA,EAAY,WAAM;AAMhB,IAAI7B,EAAcI,SAChBJ,EAAcI,MAAM0B,iBAAiB,WAAWN,CAAa;AAAA,EAEjE,CAAC,GAEM;AAAA,IACL3B,mBAAAA;AAAAA,IACAE,gBAAAA;AAAAA;AAEJ;"}