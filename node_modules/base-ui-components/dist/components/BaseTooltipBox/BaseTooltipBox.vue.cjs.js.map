{"version":3,"file":"BaseTooltipBox.vue.cjs.js","sources":["../../../src/components/BaseTooltipBox/BaseTooltipBox.vue"],"sourcesContent":["<template>\n  <div\n    :id=\"internalId\"\n    ref=\"popUpBody\"\n    v-click-outside=\"() => clickedOutside()\"\n    role=\"dialog\"\n    tabindex=\"-1\"\n    :aria-labelledby=\"headerId\"\n    :aria-describedby=\"descriptionElementId\"\n    :style=\"{ ...styles, ...css }\"\n    :class=\"['base-tooltip-box',\n             { 'base-tooltip-box--background-visible': overlayBackgroundVisible },\n             'base-tooltip-box--' + direction,\n             { 'base-tooltip-box--modal-on-mobile': typeOnMobile === 'modal'\n               || typeOnMobile === 'fullscreen' },\n             { 'base-tooltip-box--fullscreen-on-mobile': typeOnMobile === 'fullscreen' },\n             { 'base-tooltip-box--active': isActive }]\">\n    <div\n      :id=\"descriptionElementId\"\n      class=\"base-tooltip-box__inner\">\n      <div class=\"base-tooltip-box__header\">\n        <!-- @slot customize the header displayed on mobile for `typeOnMobile` `modal` and `fullscreen`\n        @binding header-id {string, number} bind this id to your slot element containing the title text for assistive technology to work properly -->\n        <slot\n          name=\"header-title\"\n          :header-id=\"headerId\">\n          <div\n            :id=\"headerId\"\n            tabindex=\"-1\"\n            class=\"base-tooltip-box__header__title\">\n            {{ modalTitle }}\n          </div>\n        </slot>\n        <button\n          title=\"close\"\n          class=\"base-tooltip-box__button\"\n          @click=\"close\">\n          <BaseIcon\n            name=\"remove\"\n            class=\"base-tooltip-box__button__icon\" />\n        </button>\n      </div>\n      <div\n        ref=\"body\"\n        :class=\"['base-tooltip-box__body',\n                 {'base-tooltip-box__body--fade-out': fadeOutTop || fadeOutBottom},\n                 { 'base-tooltip-box__body--fade-out--top': fadeOutTop },\n                 { 'base-tooltip-box__body--fade-out--bottom': fadeOutBottom }]\">\n        <div\n          ref=\"bodyInner\"\n          class=\"base-tooltip-box__body__inner\">\n          <!-- @slot slot to inject box content -->\n          <slot>\n            <i>use default slot</i>\n          </slot>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport ClickOutside from 'vue-click-outside';\nimport { ref, watchEffect } from 'vue';\nimport { createId } from '@/utils/utils';\nimport { useTabKeyHandler } from '@/composables/useTabKeyHandler';\nimport BaseIcon from '@/components/BaseIcon/BaseIcon';\nimport popUpLock from '../../mixins/popUpLock';\n\n/**\n * Component to display a tooltip\n *   for additional content e.g: quick actions\n */\nexport default {\n  name: 'BaseTooltipBox',\n  components: {\n    BaseIcon,\n  },\n  directives: {\n    ClickOutside,\n  },\n  mixins: [popUpLock],\n  props: {\n    /**\n     * HTMLElement to attach the tooltip\n     * e.g.: vue ref element\n     */\n    attachTo: {\n      type: null, // HTMLElement makes troubles with nuxt/nuxt-bridge\n      required: true,\n    },\n    /**\n     * define the default direction order\n     */\n    directionOrder: {\n      type: Array,\n      default: () => ['top', 'bottom', 'right', 'left'],\n      validator: val => [...val].sort().toString() === ['top', 'bottom', 'right', 'left'].sort().toString(),\n    },\n    /**\n     * add additional styling\n     * **caveat**: properties `top`, `left` and `right` will be overwritten due position calculation\n     */\n    styles: {\n      type: Object,\n      default: () => ({}),\n    },\n    /**\n     * title of the modal popup on mobile\n     * if more customization is needed, use the slot `header-title` instead\n     */\n    modalTitle: {\n      type: String,\n      default: '',\n    },\n    /**\n     * specify how the component is rendered on mobile resolutions\n     *\n     * **box**: component is rendered at the `attachTo` HTMLElement\n     * **modal**: component is rendered as a modal popup\n     * **fullscreen**: component is rendered as ap popup with max height and width\n     */\n    typeOnMobile: {\n      type: String,\n      default: 'modal',\n      validator: val => ['box', 'fullscreen', 'modal'].includes(val),\n    },\n    /**\n     * specify a threshold value in px for the box top position calculation\n     * Useful to prevent top alignment of the TooltipBox, for example, when there is a fixed-positioned header (BaseHeader).\n     *\n     * Note: The value can also be set globally with the CSS variable `--base-tooltip-box-threshold-top`.\n     *       The property will be overwritten by the CSS variable.\n     */\n    thresholdTop: {\n      type: Number,\n      default: 0,\n    },\n    /**\n     * customize the tooltipbox id.\n     *  if you are using the `header-title` slot this should also be set as id on your custom title element\n     *  (it is also available via slot binding)\n     */\n    headerId: {\n      type: [String, Number],\n      default: 'popup-title',\n    },\n    /**\n     * specify the id of the element containing a description - for accessibility only\n     */\n    descriptionElementId: {\n      type: String,\n      default: 'popup-body',\n    },\n    /**\n     * define if the overlay background should be visible\n     * (semitransparent black) - this only applies to `typeOnMobile` 'modal'\n     */\n    overlayBackgroundVisible: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * define a custom size (in px) when the component should switch to mobile view\n     */\n    mobileSize: {\n      type: Number,\n      default: 640,\n    },\n    /**\n     * HTMLElement to focus after opening the tooltip\n     * Note: If empty, the header title will be focused by default.\n     *       If using the slot for a custom header, be sure to\n     *       define an id attribute with the value `headerId`\n     *       The value should be a valid CSS selector.\n     */\n    initialFocusElement: {\n      type: String,\n      default: '',\n    },\n    /**\n     * list of focusable HTML elements using tab key navigation\n     */\n    focusableElements: {\n      type: Array,\n      // also add all elements in general that have a tabindex, except the ones with value -1\n      default: () => ['a[href]', 'button:enabled', 'input:enabled', '*[tabindex]:not([tabindex=\"-1\"])'],\n    },\n    /**\n     * specify to disable the tab key handler within the component\n     */\n    disableTabKeyHandler: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  setup(props) {\n    // create internal id\n    const internalId = `base-tooltip-box-${createId()}`;\n    // get reference to element\n    const popUpBody = ref(null);\n    // init tab key handler\n    const { focusableHTMLTags, disableHandler } = useTabKeyHandler(popUpBody, props.focusableElements.join(', '), props.disableTabKeyHandler);\n    // watcher to set specific properties\n    watchEffect(() => {\n      focusableHTMLTags.value = props.focusableElements;\n      disableHandler.value = props.disableTabKeyHandler;\n    });\n\n    return {\n      internalId,\n      popUpBody,\n    };\n  },\n  data() {\n    return {\n      isActive: false,\n      direction: null,\n      css: {\n        top: '0',\n        left: '-10000px',\n      },\n      thresholdX: 2, // px, distance between tooltip and attachTo element\n      thresholdY: 2, // px, distance between tooltip and attachTo element\n      spacing: 8, // px, distance from window's left or right boundary\n      bodyHeight: null,\n      bodyInnerHeight: null,\n      fadeOutTop: false,\n      fadeOutBottom: false,\n      // resize observer for specific element\n      resizeObserver: null,\n      // mutation observer for specific element\n      mutationObserver: null,\n      // guard for click-outside-event\n      isClickOutsideActive: false,\n      // this is needed for popUpLock mixin\n      targetName: 'popUpBody',\n      showInt: false,\n      // HTML element that should be focused when the component is closed\n      prevActiveElement: undefined,\n    };\n  },\n  computed: {\n    /**\n     * compare body and inner height and evaluate if body is scrollable\n     * @returns {boolean}\n     */\n    isScrollable() {\n      return this.bodyInnerHeight > this.bodyHeight;\n    },\n    /**\n     * get the thresholdTop value from the CSS variables if defined,\n     * create a temporary ghost element and evaluate the computed style value,\n     * otherwise use the component prop\n     * @returns {number}\n     */\n    getThresholdTop() {\n      // get optional global css variable\n      const style = getComputedStyle(document.body);\n      const thresholdTopCssVar = style.getPropertyValue('--base-tooltip-box-threshold-top');\n\n      // do nothing if the css variable is not defined\n      if (!thresholdTopCssVar) return this.thresholdTop;\n\n      // check if the css variable contains only digits and return it\n      if (/^\\d+$/.test(thresholdTopCssVar)) return Number(thresholdTopCssVar);\n\n      // create a ghost node element to evaluate top value in px\n      const elem = document.createElement('div');\n      elem.style.position = 'absolute';\n      elem.style.top = thresholdTopCssVar;\n      elem.style.visibility = 'hidden';\n      // append the ghost element to body\n      document.body.appendChild(elem);\n      // get computed style value\n      const computedTop = window.getComputedStyle(elem).top;\n      // remove non digits (px unit)\n      const thresholdTopAsNumber = Number(computedTop.replace(/\\D/g, ''));\n      // remove ghost element\n      elem.remove();\n\n      // return value\n      return thresholdTopAsNumber;\n    },\n  },\n  watch: {\n    /**\n     * watch if attachTo has changed and calculate the component position again\n     */\n    attachTo() {\n      this.$nextTick(() => {\n        this.calcContentHeight();\n        this.calcFadeOuts();\n        this.calcPosition();\n      });\n    },\n  },\n  mounted() {\n    // save the previously active element\n    this.prevActiveElement = document?.activeElement;\n\n    // move the component to the body node to position it absolutely in the document\n    document.querySelector('body')\n      .appendChild(this.$el);\n\n    // Note: the click-outside event is executed immediately when the component is initialized.\n    //       To prevent this timing problem, the guard variable is set with a delay.\n    setTimeout(() => {\n      this.isClickOutsideActive = true;\n    }, 0);\n\n    // In SSR environment, the first position calculation is wrong.\n    // To prevent this timing problem, the calc and further functions are executed with a delay.\n    // Using nextTick() has no effect for whatever reason.\n    setTimeout(() => {\n      // calc components position and activate it\n      this.calcPosition();\n      this.isActive = true;\n\n      // block body scrolling\n      this.showInt = this.isPopUpLockEnabled();\n\n      // initialize the resize observer to calculate fade outs when content is resized\n      this.initObserver();\n\n      // focus a specific element when the component is opened\n      this.focusInitialElement();\n\n      // add additional event listeners\n      this.$refs.body.addEventListener('scroll', this.scrollHandler);\n      window.addEventListener('resize', this.resizeHandler);\n      window.addEventListener('keyup', this.escEventHandler);\n    }, 0);\n  },\n  beforeDestroy() {\n    // reset states\n    this.isActive = false;\n    this.showInt = false;\n    // when the tooltipBox is closed, try to focus the previous active element\n    if (this.prevActiveElement\n      // but not if an element of the same class is now focused (case where tooltip box\n      // is closed and another one is immediately opened)\n      // this is good enough for our current use case, but we might need to think of a more\n      // thoroughly solution in future (prop for exempt classes?)\n      && JSON.stringify(this.prevActiveElement.classList) !== JSON\n        .stringify(document.activeElement.classList)) {\n      this.prevActiveElement.focus();\n    }\n    // remove event listeners\n    if (this.resizeObserver) this.resizeObserver.unobserve(this.$refs.bodyInner);\n    if (this.mutationObserver) this.mutationObserver.disconnect();\n    this.$refs.body.removeEventListener('scroll', this.scrollHandler);\n    window.removeEventListener('resize', this.resizeHandler);\n    window.removeEventListener('keyup', this.escEventHandler);\n  },\n  methods: {\n    /**\n     * check if popup scroll lock handler is enabled\n     * @returns {boolean}\n     */\n    isPopUpLockEnabled() {\n      return (this.typeOnMobile === 'modal' || this.typeOnMobile === 'fullscreen')\n        && window.innerWidth < 640;\n    },\n    /**\n     * calc content related heights\n     */\n    calcContentHeight() {\n      if (!this.$refs.body || !this.$refs.bodyInner) return;\n      // use getBoundingClientRect() to get the precise height and\n      // round up to avoid up to 1 pixel inaccuracy\n      this.bodyHeight = Math.ceil(this.$refs.body.getBoundingClientRect().height);\n      this.bodyInnerHeight = Math.ceil(this.$refs.bodyInner.getBoundingClientRect().height);\n    },\n    /**\n     * calc absolute tooltip and inner triangle position\n     */\n    calcPosition() {\n      // clear already applied CSS style properties\n      this.css = {};\n\n      // anchor elements current position\n      const attachToRect = this.attachTo.getBoundingClientRect();\n\n      // sizes\n      const box = this.$el;\n      const boxWidth = box.offsetWidth;\n      const boxHeight = box.offsetHeight;\n      const triangleHeight = parseFloat(window.getComputedStyle(box, ':after').height) / 2;\n      const triangleWidth = parseFloat(window.getComputedStyle(box, ':after').width) / 2;\n\n      // current scroll position\n      const { scrollY } = window;\n\n      // loop through the preferred direction order\n      // and choose the first direction which fits and leave the loop\n      this.directionOrder.every((direction) => {\n        if (direction === 'left'\n          // check if fits to the left\n          && attachToRect.left > boxWidth + triangleWidth\n          // check if box overlaps the window top\n          && !(attachToRect.top + (attachToRect.height / 2) - this.getThresholdTop < boxHeight / 2)\n          // check if box overlaps the window bottom\n          && !(window.innerHeight - (attachToRect.top + (attachToRect.height / 2)) < boxHeight / 2)) {\n          this.direction = 'left';\n          this.css.top = `${attachToRect.top + attachToRect.height / 2 - boxHeight / 2 + scrollY}px`;\n          this.css.left = `${attachToRect.left - boxWidth - triangleWidth - this.thresholdX}px`;\n          return false;\n        }\n\n        if (direction === 'right'\n          // check if fits to the right\n          && window.innerWidth - attachToRect.right > boxWidth + triangleWidth\n          // check if box overlaps the window top\n          && !((attachToRect.top + attachToRect.height / 2) - this.getThresholdTop < boxHeight / 2)\n          // check if box overlaps the window bottom\n          && !(window.innerHeight - (attachToRect.top + (attachToRect.height / 2)) < boxHeight / 2)) {\n          this.direction = 'right';\n          this.css.top = `${attachToRect.top + attachToRect.height / 2 - boxHeight / 2 + scrollY}px`;\n          this.css.left = `${attachToRect.right + triangleWidth + this.thresholdX}px`;\n          return false;\n        }\n\n        if (direction === 'top'\n          // check if fits to the top\n          && attachToRect.top - this.getThresholdTop > boxHeight + triangleHeight + this.thresholdY) {\n          this.direction = 'top';\n          this.css.top = `${attachToRect.top - boxHeight - triangleHeight - this.thresholdY + scrollY}px`;\n          this.css.left = `${attachToRect.left + (attachToRect.width / 2) - (boxWidth / 2)}px`;\n          return false;\n        }\n\n        if (direction === 'bottom'\n          // check if fits to the bottom\n          && window.innerHeight - attachToRect.bottom\n          > boxHeight + triangleHeight + this.thresholdY + this.spacing) {\n          this.direction = 'bottom';\n          this.css.top = `${attachToRect.bottom + triangleHeight + this.thresholdY + scrollY}px`;\n          this.css.left = `${attachToRect.left + (attachToRect.width / 2) - (boxWidth / 2)}px`;\n          return false;\n        }\n        return true;\n      });\n\n      // center the triangle by default\n      this.css['--triangle-left'] = '50%';\n\n      // Direction 'top' or 'bottom':\n      // Check again if the box overlaps the window on the left or right side.\n      // If so, reposition the box and adjust the triangle's position relative to the anchor point.\n      if (!['top', 'bottom'].includes(this.direction)) {\n        return;\n      }\n\n      // the box overlaps the window left side\n      if (attachToRect.x < boxWidth / 2) {\n        this.css.left = `${this.spacing}px`;\n        this.css.right = ''; // clear right position\n        this.css['--triangle-left'] = `${attachToRect.left + attachToRect.width / 2 - this.spacing}px`;\n        return;\n      }\n\n      // the box overlaps the window right side\n      if (attachToRect.left + attachToRect.width / 2 + boxWidth / 2 > window.innerWidth) {\n        this.css.left = ''; // clear left position\n        this.css.right = `${this.spacing}px`;\n        this.css['--triangle-left'] = `${boxWidth + this.spacing\n          - (document.body.clientWidth - (attachToRect.right - attachToRect.width / 2))}px`;\n      }\n    },\n    /**\n     * evaluate if fade-outs (top, bottom) are displayed based on current scroll position\n     */\n    calcFadeOuts() {\n      if (!this.isScrollable || !this.$refs.body) return;\n\n      // get current scroll position\n      const { scrollTop } = this.$refs.body;\n\n      // set fade-outs\n      this.fadeOutTop = scrollTop >= 1;\n      this.fadeOutBottom = !(scrollTop + this.bodyHeight >= this.bodyInnerHeight);\n    },\n    /**\n     * trigger event to remove/close the component\n     */\n    close() {\n      /**\n       * Event emitted when close button is clicked or clicked-outside is triggered\n       * @event close\n       * @type {boolean}\n       */\n      this.$emit('close');\n    },\n    /**\n     * intercept click-outside event and close the component\n     */\n    clickedOutside() {\n      if (this.isClickOutsideActive) {\n        this.close();\n      }\n    },\n    /**\n     * create resize/mutation observer for the content container\n     */\n    initObserver() {\n      // create a resize observer with calculation functions\n      const resizeObserver = new ResizeObserver(() => {\n        this.calcContentHeight();\n        this.calcFadeOuts();\n      });\n\n      // create a mutation observer with calculation functions\n      const mutationObserver = new MutationObserver(() => {\n        this.calcContentHeight();\n        this.calcFadeOuts();\n        this.calcPosition();\n      });\n\n      // attach the observers to a specific element\n      resizeObserver.observe(this.$refs.bodyInner);\n      mutationObserver.observe(this.$refs.bodyInner, { childList: true, subtree: true });\n\n      // store them in variables\n      this.resizeObserver = resizeObserver;\n      this.mutationObserver = mutationObserver;\n    },\n    /**\n     * determine which element should be focused when opening the component\n     */\n    focusInitialElement() {\n      setTimeout(() => {\n        // get the current components id, since it could have been changed/overwritten in FE\n        const internalId = this.$el.id;\n        // by default for box mode, focus the component container\n        let focusElement = internalId ? document?.getElementById(internalId) : undefined;\n        // if the component is in popup mode and within mobile resolution, focus the popup title\n        if (this.typeOnMobile !== 'box' && this.isMobile()) {\n          focusElement = this.headerId ? this.$el.querySelector(`#${this.headerId}`) : undefined;\n        }\n        // if a specific element within the component is defined, try that one\n        if (this.initialFocusElement && this.$el.querySelector(this.initialFocusElement)) {\n          focusElement = this.$el.querySelector(this.initialFocusElement);\n        }\n        // finally, focus the element\n        if (focusElement) focusElement.focus();\n      }, 0);\n    },\n    /**\n     * intercept resize event and close the component\n     */\n    resizeHandler() {\n      this.calcPosition();\n    },\n    /**\n     * intercept scroll event and set fade-outs\n     */\n    scrollHandler() {\n      this.calcFadeOuts();\n    },\n    /**\n     * intercept escape key event and reset edit mode\n     */\n    escEventHandler(e) {\n      if (e.key === 'Escape') {\n        this.close();\n      }\n    },\n    /**\n     * check if the window has a mobile resolution\n     * @returns {boolean}\n     */\n    isMobile() {\n      return window?.innerWidth <= this.mobileSize;\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n  @import \"../../styles/variables\";\n\n  .base-tooltip-box {\n    position: absolute;\n    z-index: map-get($zindex, modal);\n    min-width: 200px;\n    max-height: 50vh;\n    max-width: calc(100% - $spacing);\n    color: $font-color;\n    background-color: #fff;\n    visibility: hidden;\n    opacity: 0;\n    transition: opacity 150ms ease-in;\n    filter: drop-shadow($tooltip-drop-shadow);\n    // Use the GPU to render the element. Otherwise, the drop-shadow\n    // will disappear after the opacity transition finishes on MacOS Safari\n    transform: translateZ(0);\n\n    &__inner {\n      position: relative;\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n    }\n\n    &__header {\n      display: none;\n\n      &__title {\n        margin-right: $spacing-small;\n        white-space: normal;\n        text-overflow: initial;\n        display: -webkit-box;\n        -webkit-line-clamp: 2;\n        -webkit-box-orient: vertical;\n        max-height: 100%;\n        overflow: hidden;\n      }\n    }\n\n    &__body {\n      margin: $spacing;\n      flex: 1;\n      overflow: auto;\n      max-height: calc(50vh - #{$spacing-large});\n\n      @media screen and (max-width: $mobile) {\n        max-height: 90vh;\n      }\n\n      &--fade-out {\n        &::before,\n        &::after {\n          pointer-events: none;\n          content: '';\n          height: $line-height;\n          position: absolute;\n          left: $spacing;\n          right: $spacing;\n          z-index: map-get($zindex, fadeout);\n        }\n\n        &--top {\n          &::before {\n            top: $spacing;\n            background: linear-gradient(to top, rgba(255, 255, 255, 0), white);\n          }\n        }\n\n        &--bottom {\n          &::after {\n            bottom: $spacing;\n            background: linear-gradient(to bottom, rgba(255, 255, 255, 0), white);\n          }\n        }\n      }\n\n      .base-tooltip-box__body__inner {\n        overflow: hidden;\n      }\n    }\n\n    &__label {\n      display: inline-block;\n      font-weight: bold;\n      margin-bottom: $spacing-small;\n    }\n\n    &__button {\n      display: flex;\n      flex-shrink: 0;\n      transition: $link-transition;\n\n      &__icon {\n        width: $icon-medium;\n        height: $icon-medium;\n        cursor: pointer;\n      }\n\n      &:hover,\n      &:active,\n      &:focus {\n        color: $app-color;\n        fill: $app-color;\n      }\n    }\n\n    &--active {\n      visibility: visible;\n      opacity: 1;\n      cursor: default;\n    }\n\n    // on mobile\n    &.base-tooltip-box--modal-on-mobile {\n      @media screen and (max-width: $mobile) {\n        position: fixed;\n        top: 0 !important;\n        left: 0 !important;\n        width: 100vw;\n        height: 100vh;\n        max-height: 100vh;\n        max-width: inherit;\n        background-color: transparent;\n        z-index: map-get($zindex, modal);\n\n        &.base-tooltip-box--background-visible {\n          background-color: $overlay-background-light;\n        }\n\n        .base-tooltip-box__inner {\n          position: relative;\n          margin: 10vh auto 0;\n          width: 90%;\n          max-height: 80vh;\n          height: initial;\n          background-color: #fff;\n        }\n\n        .base-tooltip-box__header {\n          background-color: $button-header-color;\n          height: $row-height-large;\n          padding: 0 #{$spacing};\n          display: flex;\n          flex-direction: row;\n          justify-content: space-between;\n          align-items: center;\n          flex-shrink: 0;\n        }\n\n        &:after {\n          display: none;\n        }\n\n        .base-tooltip-box__body--fade-out--top {\n          &::before {\n            top: $row-height-large + $spacing;\n          }\n        }\n      }\n    }\n\n    &.base-tooltip-box--fullscreen-on-mobile {\n      @media screen and (max-width: $mobile) {\n        max-width: inherit;\n\n        .base-tooltip-box__inner {\n          margin: 0;\n          width: 100%;\n          height: 100vh;\n          max-height: inherit;\n        }\n      }\n    }\n\n    // add triangle for non mobile sizes\n    &:after {\n      content: '';\n      position: absolute;\n      display: inline-block;\n      border-width: 8px;\n      border-style: solid;\n      pointer-events: none;\n    }\n\n    &--top {\n      &:after {\n        left: var(--triangle-left);\n        bottom: 0;\n        transform: translate(-50%, 100%);\n        border-color: #fff transparent transparent transparent;\n      }\n    }\n\n    &--bottom {\n      &:after {\n        top: 0;\n        left: var(--triangle-left);\n        transform: translate(-50%, -100%);\n        border-color: transparent transparent #fff transparent;\n      }\n    }\n\n    &--left {\n      &:after {\n        top: 50%;\n        right: 0;\n        transform: translate(100%, -50%);\n        border-color: transparent transparent transparent #fff;\n      }\n    }\n\n    &--right {\n      &:after {\n        top: 50%;\n        left: 0;\n        transform: translate(-100%, -50%);\n        border-color: transparent #fff transparent transparent;\n      }\n    }\n  }\n</style>\n"],"names":["_sfc_main","BaseIcon","ClickOutside","popUpLock","val","props","internalId","createId","popUpBody","ref","focusableHTMLTags","disableHandler","useTabKeyHandler","watchEffect","thresholdTopCssVar","elem","computedTop","thresholdTopAsNumber","attachToRect","box","boxWidth","boxHeight","triangleHeight","triangleWidth","scrollY","direction","scrollTop","resizeObserver","mutationObserver","focusElement"],"mappings":"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"}