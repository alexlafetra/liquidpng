{"version":3,"file":"BaseChip.vue.cjs.js","sources":["../../../src/components/BaseChip/BaseChip.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"['base-chip',\n             { 'base-chip__removable': isRemovable },\n             { 'base-chip__linked': isLinked },\n             { 'base-chip__active': chipActive }]\">\n    <div\n      ref=\"chipText\"\n      v-insert-text-as-html=\"{ value: entryInt, interpretTextAsHtml: interpretTextAsHtml && !editable }\"\n      :style=\"textStyling\"\n      :contenteditable=\"editable ? 'true' : false\"\n      :aria-labelledby=\"assistiveText ? `${internalId}_aria-label` : false\"\n      enterkeyhint=\"search\"\n      class=\"base-chip__text\"\n      @blur=\"updateText\"\n      @keydown.enter.prevent=\"updateText\"\n      @click.stop=\"clickAction\"\n      @mousedown=\"onMouseDown\"\n      @mousemove=\"moveBox\"\n      @mouseleave=\"hideBox\" />\n    <span\n      v-if=\"assistiveText\"\n      :id=\"`${internalId}_aria-label`\"\n      class=\"hide\">\n      {{ assistiveText }}\n    </span>\n    <BaseIcon\n      v-if=\"isRemovable\"\n      name=\"remove\"\n      class=\"base-chip__icon\"\n      @click.native.stop=\"removeClicked\" />\n    <base-hover-box\n      ref=\"hoverBox\"\n      v-bind=\"hoverBoxContent\"\n      :class=\"{ 'base-chip__hover-box__hidden': !hoverBoxEnabled || !showInfoBox }\" />\n  </div>\n</template>\n\n<script>\nimport { createId } from '@/utils/utils';\nimport InsertTextAsHtml from '@/directives/InsertTextAsHtml';\n\n/**\n * Basic Chip component\n */\n\nexport default {\n  name: 'BaseChip',\n  components: {\n    BaseHoverBox: () => import('../BaseHoverBox/BaseHoverBox'),\n    BaseIcon: () => import('../BaseIcon/BaseIcon'),\n  },\n  directives: {\n    insertTextAsHtml: InsertTextAsHtml,\n  },\n  model: {\n    prop: 'entry',\n    event: 'value-changed',\n  },\n  props: {\n    /**\n     * pass the text for the chip\n     */\n    entry: {\n      type: String,\n      required: true,\n    },\n    /**\n     * set if entry is a linked data entry and displayed with grey background\n     */\n    isLinked: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * if a hover box is associated with the chip add all relevant properties here\n     * (see [BaseHoverBox](BaseHoverBox) for details)\n     *\n     * **CAVEAT**: this prop is deprecated and will be removed in the next major version!\n     * Usage not recommended!\n     * Have a look into [BaseTooltipBox](BaseTooltipBox) for implementing a similar functionality\n     */\n    hoverBoxContent: {\n      type: Object,\n      default: () => ({}),\n    },\n    /**\n     * set chip active (set color)\n     */\n    chipActive: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * flag to specify if chip can be removed\n     */\n    isRemovable: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * add some custom text styling\n     */\n    textStyling: {\n      type: Object,\n      default: () => ({}),\n    },\n    /**\n     * define true if chip should be editable on click\n     *\n     * **Caveat**: chips can not show `hoverBoxContent` as soon as it is editable\n     * respectively - if both are set `true` edit functionality takes precedent - chip will\n     *  not be draggable, `hoverBoxContent` will not be shown!\n     */\n    editable: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * text read when a chip is focused - currently only available with prop\n     *  `editable` true\n     */\n    assistiveText: {\n      type: String,\n      default: '',\n    },\n    /**\n     * if necessary chip text can be rendered as html\n     *  this feature is currently only available if the chip is not editable\n     *\n     *  **caveat**: setting this variable `true` can lead to XSS attacks. Only use\n     *    this prop on trusted content and never on user-provided content.\n     */\n    interpretTextAsHtml: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      /**\n       * internal represenation of string provided by parent\n       * @type {string}\n       */\n      entryInt: '',\n      /**\n       * handle showing of HoverBox\n       * @type {boolean}\n       */\n      showInfoBox: false,\n    };\n  },\n  computed: {\n    hoverBoxEnabled() {\n      return this.isLinked && !!Object.keys(this.hoverBoxContent).length;\n    },\n    internalId() {\n      return createId();\n    },\n  },\n  watch: {\n    entry: {\n      handler(val) {\n        if (val !== this.entryInt) {\n          this.entryInt = val;\n        }\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    /**\n     * update the internal text variable if chip is editable and\n     * inform parent\n     * @param {KeyboardEvent} event\n     */\n    updateText(event) {\n      const textString = event.target.innerText;\n      if (this.editable && textString !== this.entryInt) {\n        this.entryInt = textString;\n        /**\n         * if chip is editable value is updated with this event\n         *\n         * @event value-changed\n         * @param {string} - the displayed text string after edit\n         */\n        this.$emit('value-changed', this.entryInt);\n      }\n    },\n    clickAction(e) {\n      if (!this.editable) {\n        e.stopPropagation();\n        /**\n         * event emitted when chip is clicked\n         *\n         * @event clicked\n         *\n         */\n        this.$emit('clicked');\n        if (this.isLinked) {\n          this.$emit('hoverbox-active', true);\n          this.$refs.hoverBox.setPosition(e);\n          this.showInfoBox = !this.showInfoBox;\n        }\n      }\n    },\n    moveBox(e) {\n      if (this.hoverBoxEnabled && this.showInfoBox) {\n        this.$refs.hoverBox.setPosition(e);\n      }\n    },\n    hideBox() {\n      if (this.hoverBoxEnabled) {\n        /**\n         * event indicating if hover box was set to show / hide\n         *\n         * @event hoverbox-active\n         * @param {boolean} - is hoverbox active\n         *\n         */\n        this.$emit('hoverbox-active', false);\n        this.showInfoBox = false;\n      }\n    },\n    onMouseDown(event) {\n      /**\n       * event on mouse down, needed by base chips input to determine active chip\n       *\n       * @event mouse-down\n       * @param {Event} - the native MouseEvent\n       *\n       */\n      this.$emit('mouse-down', event);\n    },\n    removeClicked() {\n      /**\n       * triggered when the remove icon is clicked and returns the data behind the chip\n       *\n       * @event remove-entry\n       * @param {string} - the displayed chip string\n       *\n       */\n      this.$emit('remove-entry', this.entryInt);\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n  @import \"../../styles/variables\";\n\n  .base-chip {\n    margin: $chips-spacing*4 $spacing-small $chips-spacing*4 0;\n    padding: $chips-spacing $spacing-small;\n    flex: 0 0 auto;\n    background-color: rgba(255, 255, 255, 0);\n    line-height: $line-height;\n    display: inline-flex;\n    align-items: center;\n    cursor: default;\n    position: relative;\n    overflow: hidden;\n    max-width: 100%;\n\n    &.base-chip__linked {\n      background-color: $background-color;\n    }\n\n    &.base-chip__removable {\n      padding-right: calc(#{$spacing} + #{$icon-min});\n    }\n\n    &.base-chip__active {\n\n      &:after {\n        content: '';\n        width: 100%;\n        height: 100%;\n        position: absolute;\n        top: 0;\n        right: 0;\n        background-color: $app-color;\n        opacity: 0.5;\n      }\n    }\n\n    // this class is also specified as handle in BaseChipsInputField!\n    .base-chip__text {\n      border: none;\n      background-color: rgba(255, 255, 255, 0);\n      color: $font-color;\n      word-break: break-word;\n      z-index: map-get($zindex, boxcontent);\n\n      &:active, &:focus {\n        outline: none;\n        cursor: text;\n      }\n    }\n\n    .base-chip__icon {\n      position: absolute;\n      padding: $spacing-small;\n      right: 0;\n      cursor: pointer;\n      width: calc((#{$spacing-small} * 2) + #{$icon-min});\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n  }\n\n  .base-chip__hover-box__hidden {\n    display: none;\n  }\n</style>\n"],"names":["_sfc_main","InsertTextAsHtml","createId","val","event","textString","e"],"mappings":"iTA8CAA,EAAA,CACA,KAAA,WACA,WAAA,CACA,aAAA,IAAA,QAAA,QAAA,EAAA,KAAA,IAAA,QAAA,yCAAA,CAAA,EACA,SAAA,IAAA,QAAA,QAAA,EAAA,KAAA,IAAA,QAAA,iCAAA,CAAA,CACA,EACA,WAAA,CACA,iBAAAC,EAAA,OACA,EACA,MAAA,CACA,KAAA,QACA,MAAA,eACA,EACA,MAAA,CAIA,MAAA,CACA,KAAA,OACA,SAAA,EACA,EAIA,SAAA,CACA,KAAA,QACA,QAAA,EACA,EASA,gBAAA,CACA,KAAA,OACA,QAAA,KAAA,CAAA,EACA,EAIA,WAAA,CACA,KAAA,QACA,QAAA,EACA,EAIA,YAAA,CACA,KAAA,QACA,QAAA,EACA,EAIA,YAAA,CACA,KAAA,OACA,QAAA,KAAA,CAAA,EACA,EAQA,SAAA,CACA,KAAA,QACA,QAAA,EACA,EAKA,cAAA,CACA,KAAA,OACA,QAAA,EACA,EAQA,oBAAA,CACA,KAAA,QACA,QAAA,EACA,CACA,EACA,MAAA,CACA,MAAA,CAKA,SAAA,GAKA,YAAA,EACA,CACA,EACA,SAAA,CACA,iBAAA,CACA,OAAA,KAAA,UAAA,CAAA,CAAA,OAAA,KAAA,KAAA,eAAA,EAAA,MACA,EACA,YAAA,CACA,OAAAC,EAAA,SAAA,CACA,CACA,EACA,MAAA,CACA,MAAA,CACA,QAAAC,EAAA,CACAA,IAAA,KAAA,WACA,KAAA,SAAAA,EAEA,EACA,UAAA,EACA,CACA,EACA,QAAA,CAMA,WAAAC,EAAA,CACA,MAAAC,EAAAD,EAAA,OAAA,UACA,KAAA,UAAAC,IAAA,KAAA,WACA,KAAA,SAAAA,EAOA,KAAA,MAAA,gBAAA,KAAA,QAAA,EAEA,EACA,YAAAC,EAAA,CACA,KAAA,WACAA,EAAA,gBAAA,EAOA,KAAA,MAAA,SAAA,EACA,KAAA,WACA,KAAA,MAAA,kBAAA,EAAA,EACA,KAAA,MAAA,SAAA,YAAAA,CAAA,EACA,KAAA,YAAA,CAAA,KAAA,aAGA,EACA,QAAAA,EAAA,CACA,KAAA,iBAAA,KAAA,aACA,KAAA,MAAA,SAAA,YAAAA,CAAA,CAEA,EACA,SAAA,CACA,KAAA,kBAQA,KAAA,MAAA,kBAAA,EAAA,EACA,KAAA,YAAA,GAEA,EACA,YAAAF,EAAA,CAQA,KAAA,MAAA,aAAAA,CAAA,CACA,EACA,eAAA,CAQA,KAAA,MAAA,eAAA,KAAA,QAAA,CACA,CACA,CACA"}