{"version":3,"file":"BaseTooltip.vue.es.js","sources":["../../../src/components/BaseTooltip/BaseTooltip.vue"],"sourcesContent":["<template>\n  <div\n    :style=\"{ ...styles, ...css }\"\n    :class=\"['base-tooltip',\n             'base-tooltip--' + direction,\n             { 'base-tooltip--active': isActive }]\">\n    <!-- @slot slot to inject content  -->\n    <slot>\n      <i>use default slot</i>\n    </slot>\n  </div>\n</template>\n\n<script>\n\n/**\n * Component to display a tooltip\n *\n * CAVEAT: this component will be deprecated and replaced by BaseTooltipBox!\n * Usage not recommended!\n */\n\nexport default {\n  name: 'BaseTooltip',\n  props: {\n    /**\n     * HTMLElement to attach the tooltip\n     * e.g.: vue ref element\n     */\n    attachTo: {\n      type: null, // HTMLElement makes troubles with nuxt/nuxt-bridge\n      required: true,\n    },\n    /**\n     * add additional styling\n     * **caveat**: properties `top`, `left` and `right` will be overwritten due position calculation\n     */\n    styles: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n  data() {\n    return {\n      isActive: false,\n      direction: 'top',\n      css: {},\n      thresholdX: 10, // px, distance from window left or right side\n      thresholdY: 3, // px, distance between tooltip and attachTo element\n    };\n  },\n  mounted() {\n    // move component to body to position it absolute in the document\n    document.querySelector('body').appendChild(this.$el);\n    this.calcPosition();\n    this.isActive = true;\n  },\n  methods: {\n    calcPosition() {\n      const { attachTo } = this;\n      const attachToRect = attachTo.getBoundingClientRect();\n\n      const tooltip = this.$el;\n      const tooltipTriangleHeight = parseFloat(window.getComputedStyle(tooltip, ':after').height) / 2;\n      const tooltipWidth = tooltip.offsetWidth;\n      const tooltipHeight = tooltip.offsetHeight + tooltipTriangleHeight;\n\n      // reset styles\n      this.css = {};\n\n      // set tooltip position before or after attachTo element\n      const { scrollY } = window;\n      if (attachToRect.top < tooltipHeight) {\n        this.direction = 'bottom';\n        this.css.top = `${attachToRect.bottom + tooltipTriangleHeight + this.thresholdY + scrollY}px`;\n      } else {\n        this.direction = 'top';\n        this.css.top = `${attachToRect.top - tooltipHeight - this.thresholdY + scrollY}px`;\n      }\n\n      // if tooltip overlaps window left side\n      if (attachToRect.x < tooltipWidth / 2) {\n        this.css.left = `${this.thresholdX}px`;\n        this.css['--triangle-left'] = `${attachToRect.left + attachToRect.width / 2 - this.thresholdX}px`;\n\n      // if tooltip overlaps window right side\n      } else if (attachTo.getBoundingClientRect().right + tooltipWidth / 2 > window.outerWidth) {\n        this.css.right = `${this.thresholdX}px`;\n        this.css['--triangle-left'] = `${tooltipWidth - attachToRect.width / 2 + this.thresholdX\n          - (window.outerWidth - attachTo.getBoundingClientRect().right)}px`;\n\n      // else center tooltip\n      } else {\n        this.css.left = `${attachToRect.left + attachToRect.width / 2 - tooltipWidth / 2}px`;\n        this.css['--triangle-left'] = '50%';\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n  @import \"../../styles/variables\";\n\n  .base-tooltip {\n    position: absolute;\n    z-index: 1;\n    min-width: 200px;\n    max-width: 500px;\n    padding: $spacing;\n    color: $font-color;\n    background-color: #fff;\n    visibility: hidden;\n    opacity: 0;\n    transition: opacity 150ms ease-in;\n    filter: drop-shadow($tooltip-drop-shadow);\n\n    &--active {\n      visibility: visible;\n      opacity: 1;\n      cursor: default;\n    }\n\n    &:after {\n      content: '';\n      position: absolute;\n      display: inline-block;\n      border-width: 12px;\n      border-style: solid;\n      border-color: #fff transparent transparent transparent;\n    }\n\n    &--top {\n      &:after {\n        left: var(--triangle-left);\n        bottom: 0;\n        transform: translate(-50%, 100%);\n      }\n    }\n\n    &--bottom {\n      &:after {\n        top: 0;\n        left: var(--triangle-left);\n        transform: translate(-50%, -100%) rotate(180deg);\n      }\n    }\n\n    &__label {\n      display: inline-block;\n      font-weight: bold;\n      margin-bottom: $spacing-small;\n    }\n  }\n</style>\n"],"names":["_sfc_main","attachTo","attachToRect","tooltip","tooltipTriangleHeight","tooltipWidth","tooltipHeight","scrollY"],"mappings":";;AAsBA,MAAAA,IAAA;AAAA,EACA,MAAA;AAAA,EACA,OAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,UAAA;AAAA,MACA,MAAA;AAAA;AAAA,MACA,UAAA;AAAA,IACA;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,QAAA;AAAA,MACA,MAAA;AAAA,MACA,SAAA,OAAA,CAAA;AAAA,IACA;AAAA,EACA;AAAA,EACA,OAAA;AACA,WAAA;AAAA,MACA,UAAA;AAAA,MACA,WAAA;AAAA,MACA,KAAA,CAAA;AAAA,MACA,YAAA;AAAA;AAAA,MACA,YAAA;AAAA;AAAA,IACA;AAAA,EACA;AAAA,EACA,UAAA;AAEA,aAAA,cAAA,MAAA,EAAA,YAAA,KAAA,GAAA,GACA,KAAA,aAAA,GACA,KAAA,WAAA;AAAA,EACA;AAAA,EACA,SAAA;AAAA,IACA,eAAA;AACA,YAAA,EAAA,UAAAC,EAAA,IAAA,MACAC,IAAAD,EAAA,yBAEAE,IAAA,KAAA,KACAC,IAAA,WAAA,OAAA,iBAAAD,GAAA,QAAA,EAAA,MAAA,IAAA,GACAE,IAAAF,EAAA,aACAG,IAAAH,EAAA,eAAAC;AAGA,WAAA,MAAA;AAGA,YAAA,EAAA,SAAAG,EAAA,IAAA;AACA,MAAAL,EAAA,MAAAI,KACA,KAAA,YAAA,UACA,KAAA,IAAA,MAAA,GAAAJ,EAAA,SAAAE,IAAA,KAAA,aAAAG,CAAA,SAEA,KAAA,YAAA,OACA,KAAA,IAAA,MAAA,GAAAL,EAAA,MAAAI,IAAA,KAAA,aAAAC,CAAA,OAIAL,EAAA,IAAAG,IAAA,KACA,KAAA,IAAA,OAAA,GAAA,KAAA,UAAA,MACA,KAAA,IAAA,iBAAA,IAAA,GAAAH,EAAA,OAAAA,EAAA,QAAA,IAAA,KAAA,UAAA,QAGAD,EAAA,wBAAA,QAAAI,IAAA,IAAA,OAAA,cACA,KAAA,IAAA,QAAA,GAAA,KAAA,UAAA,MACA,KAAA,IAAA,iBAAA,IAAA,GAAAA,IAAAH,EAAA,QAAA,IAAA,KAAA,cACA,OAAA,aAAAD,EAAA,sBAAA,EAAA,MAAA,SAIA,KAAA,IAAA,OAAA,GAAAC,EAAA,OAAAA,EAAA,QAAA,IAAAG,IAAA,CAAA,MACA,KAAA,IAAA,iBAAA,IAAA;AAAA,IAEA;AAAA,EACA;AACA;;;;;;;;;;;;;;;;;;;;;"}