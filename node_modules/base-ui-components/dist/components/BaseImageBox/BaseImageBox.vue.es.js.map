{"version":3,"file":"BaseImageBox.vue.es.js","sources":["../../../src/components/BaseImageBox/BaseImageBox.vue"],"sourcesContent":["<template>\n  <BaseBox\n    ref=\"baseBox\"\n    :box-size=\"boxSize\"\n    :render-element-as=\"renderElementAs\"\n    :additional-attributes=\"linkTo ? { to: linkTo } : {}\"\n    box-ratio=\"100\"\n    @clicked=\"boxSelect\">\n    <div\n      :class=\"['base-image-box',\n               { 'base-image-box--hover': (playIcon || showTitleOnHover) && !selectable },\n               { 'base-image-box--hover-show-title': showTitleOnHover && !selectable },\n               { 'base-image-box--selectable': selectable },\n               { 'base-image-box--draggable': draggable }, // needs to be after selectable\n               { 'base-image-box--selected': selectable && selectedInt }]\">\n      <!-- HEADER -->\n      <div\n        v-if=\"showTitle\"\n        ref=\"headerBox\"\n        :class=\"['base-image-box__header',\n                 { 'base-image-box__header--bottom': imageFirst },\n                 { 'base-image-box__header--center-text': centerHeader },\n                 { 'base-image-box__header--separator-top': !hasImages && !imageShadow && imageFirst },\n                 { 'base-image-box__header--separator-bottom': !hasImages && !imageShadow && !imageFirst }]\">\n        <div\n          class=\"base-image-box__header__row\">\n          <div\n            v-insert-text-as-html=\"{ value: title, interpretTextAsHtml }\"\n            :title=\"altTitleInt\"\n            :class=\"['base-image-box__header__text',\n                     'base-image-box__header__text--bold',\n                     { 'base-image-box__header__text--2-lines': !subtext && titleRows === 'auto' }]\" />\n          <div\n            v-if=\"$slots['title-right']\"\n            class=\"base-image-box__header__row__additional\">\n            <!-- @slot create custom content (e.g. additional text or icon) right of the title -->\n            <slot name=\"title-right\" />\n          </div>\n        </div>\n        <div\n          v-if=\"subtext\"\n          class=\"base-image-box__header__row\">\n          <div\n            v-insert-text-as-html=\"{ value: subtext, interpretTextAsHtml }\"\n            :title=\"altSubtextInt\"\n            class=\"base-image-box__header__text\" />\n        </div>\n      </div>\n\n      <!-- BODY -->\n      <div\n        :class=\"['base-image-box__body',\n                 { 'base-image-box__body__shadow--top': imageShadowTop },\n                 { 'base-image-box__body__shadow--bottom': imageShadowBottom },\n                 { 'base-image-box__body__shadow--height-1-3': imageShadow && imageFirst },\n                 { 'base-image-box__body__shadow--height-1-2': imageShadow && !imageFirst }]\">\n        <!-- IMAGE / IMAGE-GRID -->\n        <template\n          v-if=\"(imageUrl || images.length) && displayImage\">\n          <!-- single image (handle errors, e.g. for uploads) -->\n          <BaseImage\n            v-if=\"imageUrl || (images && images.length === 1)\"\n            ref=\"image\"\n            :alt=\"altTitleInt\"\n            :lazyload=\"lazyload\"\n            :src=\"images && images.length === 1 ? src(images[0]) : src(imageUrl)\"\n            :srcset=\"images && images.length === 1 ? srcset(images[0]) : srcset(imageUrl)\"\n            :class=\"['base-image-box__body__image']\"\n            @error=\"displayImage = false\" />\n\n          <!-- image grid -->\n          <BaseImageGrid\n            v-if=\"images && images.length > 1\"\n            :alt=\"altTitleInt\"\n            :images=\"images\"\n            :lazyload=\"lazyload\" />\n        </template>\n\n        <!-- ICONS -->\n        <div\n          v-if=\"icon || !!$slots.icon\"\n          :class=\"['base-image-box__body__icon',\n                   'base-image-box__icon',\n                   'base-image-box__icon--' + iconSize]\">\n          <!-- @slot create custom content (e.g. folder icon) -->\n          <slot\n            :icon=\"icon\"\n            name=\"icon\">\n            <!-- display optional icon for entries without an image -->\n            <BaseIcon\n              :name=\"icon\"\n              :class=\"['base-image-box__icon',\n                       'base-image-box__icon--' + iconSize]\" />\n          </slot>\n        </div>\n\n        <!-- display optional play icon e.g. for video, audio -->\n        <BaseIcon\n          v-if=\"playIcon\"\n          name=\"play\"\n          :class=\"['base-image-box__body__icon',\n                   'base-image-box__icon',\n                   'base-image-box__icon--play',\n                   'base-image-box__icon--' + iconSize]\" />\n\n        <!-- BODY TEXT -->\n        <!-- alternative text, when no images are set -->\n        <div\n          v-if=\"!hasImages || !displayImage\"\n          ref=\"boxText\"\n          class=\"base-image-box__body__text\">\n          <!-- @slot to display more advanced text - if you use this please specify the `ref` attribute with `boxTextInner` that has the line-height css attribute set - so the text display height can be calculated correctly! -->\n          <slot\n            :text=\"boxText\"\n            name=\"text\">\n            <!-- default -->\n            <div\n              ref=\"boxTextInner\"\n              :style=\"boxTextStyle\"\n              class=\"base-image-box__body__text__inner\">\n              <div\n                v-for=\"(entry, index) in boxText\"\n                :key=\"index\"\n                v-insert-text-as-html=\"{ value: entry, interpretTextAsHtml }\" />\n            </div>\n          </slot>\n        </div>\n\n        <!-- FOOTER -->\n        <div\n          :class=\"['base-image-box__body__footer',\n                   'base-image-box__body__footer--position-margin-' + imageFooterMargin,\n                   { 'base-image-box__body__footer--invert': icon }]\">\n          <div\n            v-if=\"$slots['footer-left']\"\n            class=\"base-image-box__body__footer__left\">\n            <!-- @slot create custom content (e.g. featured icon for files) left of text -->\n            <slot name=\"footer-left\" />\n          </div>\n\n          <div class=\"base-image-box__body__footer__center\">\n            <div\n              v-if=\"showTitleOnHover\"\n              v-insert-text-as-html=\"{ interpretTextAsHtml, value: title }\"\n              :title=\"altTitleInt\"\n              class=\"base-image-box__body__footer__title base-image-box__body__footer--bold\" />\n            <div\n              v-if=\"description\"\n              :title=\"description\"\n              :class=\"['base-image-box__body__footer__text',\n                       { 'base-image-box__body__footer__text--bold': !additional }]\">\n              {{ description }}\n            </div>\n            <div\n              v-if=\"additional\"\n              :title=\"additional\"\n              :class=\"['base-image-box__body__footer__text',\n                       'base-image-box__body__footer__text--bold']\">\n              {{ additional }}\n            </div>\n          </div>\n\n          <div\n            v-if=\"$slots['footer-right'] || playIcon\"\n            class=\"base-image-box__body__footer__right\">\n            <!-- display optional play icon e.g. for video, audio -->\n            <BaseIcon\n              v-if=\"playIcon\"\n              name=\"play\"\n              :class=\"['base-image-box__icon',\n                       'base-image-box__icon--small',\n                       'base-image-box__icon--play']\" />\n            <!-- @slot create custom content (e.g. published icon for files) left of text -->\n            <slot name=\"footer-right\" />\n          </div>\n        </div>\n      </div>\n\n      <!-- FEATURES -->\n      <div\n        class=\"base-image-box__features\">\n        <transition\n          name=\"slide-fade\">\n          <BaseCheckmark\n            v-if=\"selectable\"\n            :checked=\"selectedInt\"\n            :label=\"altTitleInt\"\n            mark-style=\"checkbox\"\n            check-box-size=\"large\"\n            class=\"base-image-box__checkbox\"\n            @clicked=\"boxSelect\" />\n        </transition>\n      </div>\n    </div>\n  </BaseBox>\n</template>\n<script>\nimport InsertTextAsHtml from '@/directives/InsertTextAsHtml';\nimport BaseBox from '../BaseBox/BaseBox';\nimport BaseIcon from '../BaseIcon/BaseIcon';\n\n/**\n * A component with the primary purpose to display\n * images in responsive boxes but also allowing for text only\n */\n\nexport default {\n  name: 'BaseImageBox',\n  components: {\n    BaseBox,\n    BaseIcon,\n    BaseCheckmark: () => import('../BaseCheckmark/BaseCheckmark').then(m => m.default || m),\n    BaseImage: () => import('../BaseImage/BaseImage').then(m => m.default || m),\n    BaseImageGrid: () => import('../BaseImageGrid/BaseImageGrid').then(m => m.default || m),\n  },\n  directives: {\n    insertTextAsHtml: InsertTextAsHtml,\n  },\n  props: {\n    /**\n     * The title of the item in question (max 2 lines), also used as img alt text\n     */\n    title: {\n      type: String,\n      default: 'No title',\n    },\n    /**\n     * specify a separate title to display on title hover and for the\n     *  image alt text. Useful for example if `interpretTextAsHtml` is\n     *  set `true` and the `title` contains HTML\n     */\n    altTitle: {\n      type: String,\n      default: '',\n    },\n    /**\n     * Text displayed directly below title (max two lines; max 3 lines with title)\n     */\n    subtext: {\n      type: String,\n      default: '',\n    },\n    /**\n     * specify a separate subtext to display on subtext hover. Useful for example\n     *  if `interpretTextAsHtml` is set `true` and the `subtext` contains HTML\n     */\n    altSubtext: {\n      type: String,\n      default: '',\n    },\n    /**\n     * should the title be displayed or box only display the image\n     */\n    showTitle: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * should the title be displayed on box hover\n     */\n    showTitleOnHover: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * define the number of rows before the title is truncated with ...\n     *\n     * **auto**: If subtext is defined, the title is displayed in one row, otherwise in two rows.\n     * **1**: Title is displayed in one row.\n     */\n    titleRows: {\n      type: [String, Number],\n      default: 'auto',\n      validator: val => ['auto', 1].includes(val),\n    },\n    /**\n     * define a url to a single image\n     *\n     * data variants to render a single image using `src` or `srcset` for a responsive image:\n     * **src**: `'path'`\n     * **srcset**: `{ '640w': 'path' }`\n     */\n    imageUrl: {\n      type: [String, Object],\n      default: null,\n    },\n    /**\n     * define up to 4 image url to be displayed in a grid\n     *\n     * array variants to render a single image using `src` or `srcset` for a responsive image:\n     * **src**: `['path']`\n     * **srcset**: `[{ '640w': 'path' }]`\n     */\n    images: {\n      type: Array,\n      default: () => ([]),\n    },\n    /**\n     * display shadow overlays at the top and bottom of the image\n     * to make text easier to read\n     */\n    imageShadow: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * define the margin (left, bottom, right) between the image footer and the image\n     * @values large, small\n     */\n    imageFooterMargin: {\n      type: String,\n      default: 'large',\n      validator: val => ['large', 'small'].includes(val),\n    },\n    /**\n     * descriptive element displayed at bottom of box (e.g. item type like \"Bilderserie\")\n     */\n    description: {\n      type: String,\n      default: null,\n    },\n    /**\n     * descriptive element displayed at bottom of box (e.g. item type like \"Bilderserie\")\n     */\n    additional: {\n      type: String,\n      default: null,\n    },\n    /**\n     * set optional icon\n     * e.g. for items without image\n     */\n    icon: {\n      type: String,\n      default: '',\n    },\n    /**\n     * set optional icon size\n     */\n    iconSize: {\n      type: String,\n      default: 'xxlarge',\n      validator: val => ['small', 'medium', 'large', 'xlarge', 'xxlarge'].includes(val),\n    },\n    /**\n     * display play icon\n     * e.g. for Video, Audio files\n     */\n    playIcon: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * determines if the box should be selectable and the checkbox is displayed\n     */\n    selectable: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * set prop true if box can be dragged - used solely for styling purposes\n     */\n    draggable: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * set select status (checkbox checked) from outside\n     */\n    selected: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * specify the size of the box\n     */\n    boxSize: {\n      type: Object,\n      default: () => ({ width: 'auto', height: 'auto' }),\n    },\n    /**\n     * specify any text that should be displayed instead of an image;\n     * each array element on new line\n     */\n    boxText: {\n      type: Array,\n      default: () => [],\n    },\n    /**\n     * specify lazy image loading\n     */\n    lazyload: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * specify position of image\n     */\n    imageFirst: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * specify if header should be centered horizontally\n     * (aligned left otherwise)\n     */\n    centerHeader: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * define html element that should be rendered\n     */\n    renderElementAs: {\n      type: String,\n      default: 'div',\n    },\n    /**\n     * if element is rendered as vue link component, specify a value for the `to` attribute\n     * can either be a string or a `vue-router` Location object (= object with `path` property\n     * and optional `params` or `query` object)\n     * (this needs vue-router)\n     */\n    linkTo: {\n      type: [String, Object],\n      default: '',\n      validator: val => typeof val === 'string'\n        || (val instanceof Object && Object.keys(val).includes('path')),\n    },\n    /**\n     * if necessary box text (`title`, `subtext`, `boxText`) can\n     *  be rendered as html\n     *\n     *  *tip*: do not forget to set prop `altTitle` and/or `altSubtext` if the\n     *    title text or subtext contains html - otherwise the complete html will\n     *    be displayed on text hover and for image alt text\n     *\n     *  **caveat**: setting this variable `true` can lead to XSS attacks. Only use\n     *    this prop on trusted content and never on user-provided content.\n     */\n    interpretTextAsHtml: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      /**\n       * internal variable for selection status\n       */\n      selectedInt: false,\n      /**\n       * needed to set text height and line-clamp correctly after resize\n       */\n      boxTextStyle: {},\n      /**\n       * steer displaying of image in case of display error\n       */\n      displayImage: true,\n      /**\n       * timeout variable to only do height calculations after certain time\n       */\n      resizeTimeout: null,\n    };\n  },\n  computed: {\n    /**\n     * compute the alt title used for title hover and image alt description\n     *  from specific prop `altTitle` or use the regular title\n     * @returns {string}\n     */\n    altTitleInt() {\n      return this.altTitle || this.title;\n    },\n    /**\n     * compute the alt subtext used for subtext hover\n     *  from specific prop `altSubtext` or use the regular subtext\n     * @returns {string}\n     */\n    altSubtextInt() {\n      return this.altSubtext || this.subtext;\n    },\n    // determine if a shadow at the top of the image should be visible\n    imageShadowTop() {\n      return (this.selectable && this.hasImages && !this.showTitle)\n        || (this.selectable && this.hasImages && this.imageFirst);\n    },\n    // determine if a shadow at the bottom of the image should be visible\n    imageShadowBottom() {\n      return this.imageShadow && !this.icon\n        && (!this.showTitleOnHover || (this.showTitleOnHover && this.additional));\n    },\n    // determine if there is one or more images to display\n    hasImages() {\n      return !!(this.imageUrl || (this.images && this.images.length));\n    },\n  },\n  watch: {\n    // TODO: could probably just be added to boxSelect method?\n    selectedInt(val) {\n      if (val !== this.selected) {\n        /**\n         * event triggered when box is selectable and clicked upon\n         *\n         * @event select-triggered\n         * @param { Boolean } - was box selected\n         */\n        this.$emit('select-triggered', val);\n      }\n    },\n    selected(val) {\n      if (this.selectedInt !== val) {\n        this.selectedInt = val;\n      }\n    },\n    boxText() {\n      this.calcTextHeight();\n    },\n  },\n  mounted() {\n    this.selectedInt = this.selected;\n\n    if (window) {\n      window.addEventListener('resize', this.resizeTriggered);\n    }\n\n    // calcTextHeight when component is really mounted, even in ssr mode\n    // otherwise the calculation will be wrong and not set as style attribute\n    this.$nextTick(() => {\n      this.calcTextHeight();\n    });\n  },\n  destroyed() {\n    window.removeEventListener('resize', this.resizeTriggered);\n  },\n  methods: {\n    boxSelect() {\n      if (this.selectable) {\n        this.selectedInt = !this.selectedInt;\n      } else {\n        /**\n         * event triggered when selectable is false and box is clicked\n         *\n         * @event clicked\n         */\n        this.$emit('clicked');\n      }\n    },\n    resizeTriggered() {\n      // check if there is a timeout already set and clear it if yes\n      if (this.resizeTimeout) {\n        clearTimeout(this.resizeTimeout);\n        this.resizeTimeout = null;\n      }\n      this.resizeTimeout = setTimeout(() => {\n        this.calcTextHeight();\n      }, 500);\n    },\n    calcTextHeight() {\n      // only do this if no image is present and the boxText variable has items\n      // and all the ui elements are there\n      if (!this.imageUrl && this.boxText.length\n        && this.$refs.baseBox && this.$refs.boxText) {\n        let headerHeight = 0;\n        if (this.$refs.headerBox) {\n          const headerElem = this.$refs.headerBox;\n          const elemInnerHeight = headerElem.clientHeight;\n          const boxMargin = headerElem.offsetTop;\n          headerHeight = elemInnerHeight + (2 * boxMargin);\n        }\n        // get text-wrapper element\n        const elem = this.$refs.boxText;\n        // get single text line in the text element (for line height only)\n        const lineElement = this.$refs.boxTextInner[0] || this.$refs.boxTextInner;\n        // get the height of the complete box\n        const boxHeight = this.$refs.baseBox.$el.clientHeight;\n        // get the line height property\n        const lineHeight = window.getComputedStyle(lineElement, null)\n          .getPropertyValue('line-height').replace('px', '');\n        // get the box margin\n        const boxMargin = window.getComputedStyle(elem, null)\n          .getPropertyValue('margin-bottom').replace('px', '');\n        // calculate the actual text box height from\n        // complete box height - header height - box margin (bottom)\n        let textBoxHeight = boxHeight - headerHeight - boxMargin;\n        // if there is a description also leave space for that so its not overlapping\n        // TODO: check if this is wanted\n        if (this.description) {\n          textBoxHeight -= lineHeight;\n        }\n        // calculate how many lines can be displayed\n        const lines = Math.floor(textBoxHeight / lineHeight);\n        // set the style of the text box\n        this.boxTextStyle = {\n          height: `${lineHeight * lines}px`,\n          '-webkit-line-clamp': lines,\n        };\n      }\n    },\n    /**\n     * get single src\n     *\n     * @param {string|object} data\n     * @returns {string}\n     */\n    src(data) {\n      return typeof data === 'string'\n        ? data\n        // get last array elements path\n        : Object.entries(data).slice(-1)[0][1];\n    },\n    /**\n     * get srcset\n     *\n     * @param {array} data\n     * @returns {array}\n     */\n    srcset(data) {\n      return typeof data === 'object' ? [data] : [];\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n  @import '../../styles/variables.scss';\n\n  .base-image-box {\n    display: flex;\n    flex-direction: column;\n    background-color: #ffffff;\n\n    // set absolute to keep baseBox ratio\n    position: absolute;\n    width: 100%;\n    height: 100%;\n\n    /* HEADER */\n    &__header {\n      display: flex;\n      flex-wrap: wrap;\n      flex-shrink: 0;\n      align-items: center;\n      padding: $spacing;\n      line-height: $line-height; /* fallback */\n      height: $line-height * 2 + $spacing * 2;\n      width: 100%;\n\n      &__row {\n        width: 100%;\n        display: flex;\n        align-items: center;\n\n        &__additional {\n          color: #666;\n          font-size: $font-size-small;\n          margin-left: $spacing-small;\n        }\n      }\n\n      &__text {\n        overflow: hidden;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n\n        &--2-lines {\n          white-space: normal;\n          text-overflow: initial;\n\n          display: -webkit-box;\n          -webkit-line-clamp: 2;\n          -webkit-box-orient: vertical;\n          max-height: 100%;\n        }\n\n        &--bold {\n          font-weight: bold;\n        }\n      }\n\n      &--center-text {\n        .base-image-box__header__row {\n          justify-content: center;\n          text-align: center;\n        }\n      }\n\n      &--bottom {\n        order: 1;\n      }\n\n      &--separator-top  {\n        border-top: 3px solid $background-color;\n      }\n\n      &--separator-bottom  {\n        border-bottom: 3px solid $background-color;\n      }\n    }\n\n    /* ICONS */\n    &__icon {\n\n      &--xxlarge {\n        height: $icon-xxlarge;\n        max-width: $icon-xxlarge;\n        width: $icon-xxlarge;\n      }\n\n      &--xlarge {\n        height: $icon-xlarge;\n        max-width: $icon-xlarge;\n        width: $icon-xlarge;\n      }\n\n      &--large {\n        height: $icon-large;\n        max-width: $icon-large;\n        width: $icon-large;\n      }\n\n      &--medium {\n        height: $icon-medium;\n        max-width: $icon-medium;\n        width: $icon-medium;\n      }\n\n      &--small {\n        height: $icon-small;\n        max-width: $icon-small;\n        width: $icon-small;\n      }\n\n      &--play {\n        opacity: 0;\n        z-index: 1;\n        fill: $app-color;\n      }\n    }\n\n    /* BODY */\n    &__body {\n      flex: 1;\n      position: relative;\n      overflow: hidden;\n\n      &__image {\n        object-fit: cover;\n        height: 100% !important; // TODO: add to baseImage\n        width: 100%;\n      }\n\n      &__icon {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        pointer-events: none;\n        fill: $font-color-second;\n      }\n\n      &__text {\n        display: flex;\n        margin: 0 $spacing $spacing;\n        width: calc(100% - 2 * #{$spacing});\n\n        &__inner {\n          overflow-wrap: break-word;\n          overflow: hidden;\n          display: -webkit-box;\n          text-overflow: ellipsis;\n          -webkit-box-orient: vertical;\n          -webkit-line-clamp: 1;\n          height: 100%;\n          line-height: $line-height; /* fallback */\n        }\n      }\n\n      &__footer {\n        position: absolute;\n        color: #ffffff;\n        z-index: 1;\n\n        display: flex;\n        justify-content: flex-start;\n        align-items: center;\n\n        &__left {\n          display: flex;\n          margin-right: $spacing-small;\n        }\n\n        &__center {\n          flex-grow: 1;\n          overflow: hidden;\n        }\n\n        &__right {\n          display: flex;\n          align-items: center;\n          margin-left: $spacing;\n\n          .base-image-box__icon--play {\n            opacity: 1;\n            fill: white;\n            height: $icon-medium;\n            width: $icon-medium;\n            min-width: $icon-medium;\n            margin-right: $spacing-small-half;\n          }\n        }\n\n        &__title,\n        &__text {\n          flex: 1;\n          text-overflow: ellipsis;\n          overflow: hidden;\n          white-space: nowrap;\n\n          &--bold {\n            font-weight: bold;\n          }\n        }\n\n        &__title {\n          display: none;\n        }\n\n        &--position-margin-large {\n          bottom: $spacing;\n          left: $spacing;\n          right: $spacing;\n        }\n\n        &--position-margin-small {\n          bottom: $spacing-small;\n          left: $spacing-small;\n          right: $spacing-small;\n        }\n\n        &--invert {\n          color: $font-color;\n\n          .base-image-box__body__footer__right {\n\n            .base-image-box__icon--play {\n              fill: $font-color;\n            }\n          }\n        }\n      }\n\n      &__shadow {\n        &--top {\n          &:before {\n            content: \"\";\n            width: 100%;\n            min-height: $row-height-large;\n            position: absolute;\n            top: 0;\n            right: 0;\n            z-index: 1;\n            background: linear-gradient(\n                to top, hsla(0, 0%, 0%, 0) 0%,\n                hsla(0, 0%, 0%, 0.017) 11.9%,\n                hsla(0, 0%, 0%, 0.062) 22.5%,\n                hsla(0, 0%, 0%, 0.13) 32.2%,\n                hsla(0, 0%, 0%, 0.211) 41.2%,\n                hsla(0, 0%, 0%, 0.3) 50%,\n                hsla(0, 0%, 0%, 0.389) 58.8%,\n                hsla(0, 0%, 0%, 0.47) 67.8%,\n                hsla(0, 0%, 0%, 0.538) 77.5%,\n                hsla(0, 0%, 0%, 0.583) 88.1%,\n                hsla(0, 0%, 0%, 0.6) 100%);\n          }\n        }\n\n        &--bottom {\n          &:after {\n            content: \"\";\n            width: 100%;\n            min-height: $row-height-large;\n            position: absolute;\n            bottom: 0;\n            right: 0;\n            background: linear-gradient(\n                to bottom, hsla(0, 0%, 0%, 0) 0%,\n                hsla(0, 0%, 0%, 0.017) 11.9%,\n                hsla(0, 0%, 0%, 0.062) 22.5%,\n                hsla(0, 0%, 0%, 0.13) 32.2%,\n                hsla(0, 0%, 0%, 0.211) 41.2%,\n                hsla(0, 0%, 0%, 0.3) 50%,\n                hsla(0, 0%, 0%, 0.389) 58.8%,\n                hsla(0, 0%, 0%, 0.47) 67.8%,\n                hsla(0, 0%, 0%, 0.538) 77.5%,\n                hsla(0, 0%, 0%, 0.583) 88.1%,\n                hsla(0, 0%, 0%, 0.6) 100%);\n          }\n        }\n\n        &--height-1-3:after {\n          height: 33%;\n        }\n\n        &--height-1-2:after {\n          height: 50%;\n        }\n      }\n    }\n\n    /* FEATURES */\n    &__features {\n      position: absolute;\n      top: 0;\n      right: 0;\n      z-index: 10;\n      display: flex;\n      justify-content: flex-end;\n\n      .base-image-box__checkbox {\n        margin-top: $spacing-small;\n        margin-right: $spacing-small;\n      }\n    }\n\n    &:not(.base-image-box--selected) {\n      &::v-deep .base-image-box__features .base-checkmark-container {\n        border-color: $app-color;\n      }\n    }\n\n    /* Modifiers */\n    &.base-image-box--draggable {\n      cursor: move;\n    }\n\n    &--selectable {\n      cursor: pointer;\n\n      // if header is aligned to bottom (image first),\n      // we dont need to shorten the header container\n      .base-image-box__header:not(.base-image-box__header--bottom) {\n        .base-image-box__header__row {\n          width: 80%;\n        }\n      }\n    }\n\n    &--selected {\n      &:after {\n        content: '';\n        width: 100%;\n        height: 100%;\n        position: absolute;\n        top: 0;\n        right: 0;\n        background-color: $app-color;\n        opacity: 0.75;\n        padding-bottom: 100%;\n        z-index: 1;\n      }\n    }\n  }\n\n  // check if device is capable to handle hover state\n  // prevents double clicks on touch devices\n  @media (hover: hover) {\n    .base-image-box {\n      &--hover {\n        cursor: pointer;\n\n        &:after {\n          opacity: 0;\n          position: absolute;\n          top: 0;\n          height: 100%;\n          width: 100%;\n          content: '';\n          background-color: rgba(255, 255, 255, .8);\n          transition: opacity 250ms ease;\n        }\n\n        &:hover {\n          &:after {\n            opacity: 1;\n          }\n\n          .base-image-box__body {\n            .base-image-box__icon--play {\n              opacity: 1;\n              transition: opacity 500ms ease;\n            }\n\n            &__footer {\n              .base-image-box__icon {\n                opacity: 0;\n              }\n            }\n          }\n\n          .base-image-box__body__footer__center,\n          .base-image-box__body__footer__right {\n            color: $font-color;\n          }\n        }\n      }\n\n      &--hover-show-title {\n        &:hover {\n          .base-image-box__footer__text {\n            display: none;\n          }\n\n          .base-image-box__footer__title {\n            display: inherit;\n          }\n        }\n      }\n    }\n  }\n\n  /* TRANSITIONS */\n  .slide-fade-enter-active, .slide-fade-move, .slide-fade-leave-active {\n    transition: all 0.5s ease;\n  }\n\n  .slide-fade-enter, .slide-fade-leave-to {\n    opacity: 0;\n    transform: translateX(#{$spacing});\n    margin-left: calc(-2 * #{$spacing});\n  }\n</style>\n"],"names":["_sfc_main","BaseBox","BaseIcon","m","InsertTextAsHtml","val","headerHeight","headerElem","elemInnerHeight","boxMargin","elem","lineElement","boxHeight","lineHeight","textBoxHeight","lines","data"],"mappings":"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"}