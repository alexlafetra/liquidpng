import "./BaseInfoPanel.vue.es2.js";
import l from "../../_virtual/_plugin-vue2_normalizer.es.js";
const p = {
  name: "BaseInfoPanel",
  components: {
    BaseIcon: () => import("../BaseIcon/BaseIcon.vue.es.js"),
    BaseButton: () => import("../BaseButton/BaseButton.vue.es.js")
  },
  props: {
    /**
     * specify the name of the icon rendered on the left side or use slot `icon`.
     *  (see [BaseIcon](BaseIcon) for available icons).
     *  if no icon should be displayed leave the section empty.
     */
    iconName: {
      type: String,
      default: "attention"
    },
    /**
     * define if icon should be aligned `top` or `center`.
     *  if prop `expandable` is true the default is `top` otherwise the default is `center`.
     *  @values top, center
     */
    alignIcon: {
      type: String,
      default: "",
      validator: (n) => !n || ["top", "center"].includes(n)
    },
    /**
     * define the styling of the panel (influences e.g. icon size or padding).
     */
    panelStyle: {
      type: String,
      default: "large",
      validator: (n) => ["large", "medium"].includes(n)
    },
    /**
     * should box shadow be visible (useful to turn of if component should
     *  be rendered inside another box e.g.).
     */
    boxShadow: {
      type: Boolean,
      default: !0
    },
    /**
     * the panel header text or use slot `header` instead.
     */
    panelHeaderText: {
      type: String,
      default: ""
    },
    /**
     * define the HTML element as which the header should be rendered.
     */
    renderPanelHeaderAs: {
      type: String,
      default: "h2"
    },
    /**
     * define panel body text or use slot `text` instead.
     */
    text: {
      type: [String, Array],
      default: ""
    },
    /**
     * add buttons at the end of the text element via this config and it will
     *  render [BaseButton](BaseButton) elements - this should be an array of objects with the following
     *  properties:
     *
     *  **`id`**: identifier that will also be emitted via `action` event on button click
     *  **`label?`**: button label
     *  **`icon?`**: button icon to be displayed - for available options see [BaseIcon](BaseIcon)
     *  **`iconPosition?`**: should icon be displayed `left` or `right` of button label, default
     *    is `right`
     *  **`disabled?`**: set button disabled
     *
     *  **caveat**: `label` and `icon` property are optional but at least one of them needs to be
     *    specified!
     */
    buttonsConfig: {
      type: Array,
      default: () => [],
      // see that every button at least has an id and text OR icon
      validator: (n) => n.every(({ id: e, label: t, icon: a }) => e && (t || a))
    },
    /**
     * if set true an [BaseExpandBox](BaseExpandBox) is rendered inside the text body
     *  config for this BaseExpandBox can be set via `expandBoxConfig` prop.
     */
    expandable: {
      type: Boolean,
      default: !1
    },
    /**
     * if prop `expandable` is set true use this prop to configure the BaseExpandBox element.
     *  See [BaseExpandBox](BaseExpandBox#props) for available options.
     */
    expandBoxConfig: {
      type: Object,
      default: () => ({})
    }
  },
  emits: ["action"],
  computed: {
    /**
     * should icon HTML element be rendered
     * @returns {boolean}
     */
    useIconElement() {
      return !!this.iconName || !!this.$slots.icon;
    },
    /**
     * should header HTML element be rendered
     * @returns {boolean}
     */
    useHeaderElement() {
      return !!this.panelHeaderText || !!this.$slots.header;
    },
    /**
     * should text body HTML element be rendered
     * @returns {boolean}
     */
    useBottomElement() {
      return !!this.buttonsConfig.length || !!this.$slots.bottom;
    },
    /**
     * since prop `text` can be string or array unify for internal rendering
     *  to always return an array
     * @returns {string[]}
     */
    displayedText() {
      return this.text.length && typeof this.text == "string" ? [this.text] : this.text;
    },
    /**
     * if user has not set prop `alignIcon` choose value based on prop `expandable`
     * @returns {string}
     */
    alignIconInt() {
      return this.alignIcon || (this.expandable ? "top" : "center");
    },
    /**
     * return the body HTML element - either a native `<div>` or if component
     *  is `expandable` then the BaseExpandBox component
     * @returns {(function(): Promise<{VueComponent}>)|string}
     */
    textBodyWrapper() {
      return this.expandable ? () => import("../BaseExpandBox/BaseExpandBox.vue.es.js") : "div";
    },
    /**
     * assemble BaseExpandBox props from internal default settings and user specified
     *  config
     * @returns {Object}
     */
    expandBoxProps() {
      return {
        maxCollapsedHeight: 150,
        boxShadow: !this.expandable,
        padding: this.expandable ? "none" : !1,
        ...this.expandBoxConfig
      };
    }
  },
  methods: {
    /**
     * emit button click event
     * @param {string} action - the id of the button clicked
     */
    emitAction(n) {
      this.$emit("action", n);
    }
  }
};
var d = function() {
  var e = this, t = e._self._c;
  return t("div", { class: [
    "base-info-panel",
    { "base-info-panel--box-shadow": e.boxShadow },
    `base-info-panel--${e.panelStyle}`
  ] }, [e.useIconElement ? t("div", { class: ["base-info-panel__icon-wrapper", `base-info-panel__icon-wrapper--${e.alignIconInt}`] }, [e._t("icon", function() {
    return [t("BaseIcon", { class: ["base-info-panel__icon", `base-info-panel__icon--${e.panelStyle}`], attrs: { name: e.iconName } })];
  })], 2) : e._e(), t("div", { staticClass: "base-info-panel__text-wrapper" }, [e.useHeaderElement ? t(e.renderPanelHeaderAs, { tag: "component", staticClass: "base-info-panel__text-header" }, [e._t("header", function() {
    return [e._v(" " + e._s(e.panelHeaderText) + " ")];
  })], 2) : e._e(), t(e.textBodyWrapper, e._b({ tag: "component", staticClass: "base-info-panel__text-body" }, "component", e.expandable ? e.expandBoxProps : !1, !1), [e._t("text", function() {
    return e._l(e.displayedText, function(a) {
      return t("p", { key: a }, [e._v(" " + e._s(a) + " ")]);
    });
  }), e.useBottomElement ? t("div", { staticClass: "base-info-panel__text-body-bottom" }, [t("div", { staticClass: "base-info-panel__button-row" }, [e.buttonsConfig.length ? e._l(e.buttonsConfig, function({ id: a, label: o, icon: s, iconPosition: i, disabled: r }) {
    return t("BaseButton", { key: a, attrs: { text: o, icon: s, disabled: r ?? !1, "icon-position": i || "right", "button-style": "single", "icon-size": "large" }, on: { clicked: function(f) {
      return e.emitAction(a);
    } } });
  }) : e._e(), e._t("bottom")], 2)]) : e._e()], 2)], 1)]);
}, c = [], u = /* @__PURE__ */ l(
  p,
  d,
  c,
  !1,
  null,
  "b7282a8d",
  null,
  null
);
const x = u.exports;
export {
  x as default
};
//# sourceMappingURL=BaseInfoPanel.vue.es.js.map
