{"version":3,"file":"BaseMenuEntry.vue.es.js","sources":["../../../src/components/BaseMenuEntry/BaseMenuEntry.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"menuEntry\"\n    :tabindex=\"isSelectable && selectActive ? -1 : 0\"\n    :href=\"'#' + title\"\n    :class=\"['base-menu-entry',\n             {\n               'base-menu-entry-activatable': isActivatable && !isDisabled,\n               'base-menu-entry-active': isActive,\n               'base-menu-entry-no-icon': !icon,\n               'base-menu-entry-disabled': isDisabled,\n               'base-menu-entry-text-fade-out': !showThumbnails && !$slots['right-side-elements'],\n             }]\"\n    :role=\"isSelectable && selectActive ? '' : 'link'\"\n    @keyup.enter.prevent=\"clicked\"\n    @click=\"clicked\">\n    <BaseIcon\n      v-if=\"icon\"\n      ref=\"entryIcon\"\n      :name=\"icon\"\n      class=\"base-menu-entry-icon\" />\n\n    <div\n      :class=\"[\n        'base-menu-entry-text-wrapper',\n        { 'base-menu-entry-text-slide-overlay': showThumbnails && $slots.thumbnails\n          && isSelectable },\n      ]\">\n      <!-- @slot text-content - use this slot to individualize the displayed text in the base\n        menu entry. if this slot is used, prop title, subtext and description will not have any\n        effect. -->\n      <slot\n        name=\"text-content\">\n        <div class=\"base-menu-entry-title-description-wrapper\">\n          <div class=\"base-menu-entry__title-subtext-wrapper\">\n            <div\n              v-if=\"title\"\n              :class=\"['base-menu-entry-title',\n                       { 'base-menu-entry-title-bold': isActive || titleBold }]\">\n              {{ title }}\n            </div>\n            <div\n              v-if=\"subtext\"\n              class=\"base-menu-entry-subtext\">\n              {{ subtext }}\n            </div>\n          </div>\n          <div class=\"base-menu-entry-description\">\n            {{ description }}\n          </div>\n        </div>\n      </slot>\n    </div>\n    <!-- @slot add custom elements on the right side of the entry row. This slot content will be rendered in place of thumbnails and select checkbox so it will effectively disable the display of selection elements and if select mode is desired, custom elements should be provided\n      @binding { boolean } is-selected - true if value is selected -->\n    <slot\n      name=\"right-side-elements\"\n      :is-selected=\"isSelectedInt\">\n      <div\n        class=\"base-menu-entry-transition-container base-menu-entry-text-fade-out\">\n        <TransitionGroup\n          ref=\"slideFade\"\n          name=\"slide-fade\"\n          class=\"slide-fade-group\"\n          @leave=\"slideFadeLeave\"\n          @after-leave=\"slideFadeAfterLeave\">\n          <div\n            v-if=\"showThumbnails\"\n            :key=\"entryId + 'thumbnail'\"\n            ref=\"thumbnailContainer\"\n            class=\"base-menu-entry-thumbnail-container\"\n            :style=\"{ '--cols': columns }\">\n            <!-- @slot Use this slot to supply a list of [BaseIcon](BaseIcon) components that are to be shown in the right area of the menu entry as thumbnails. If using the slot make sure that `showThumbnails` is true.-->\n            <slot name=\"thumbnails\" />\n          </div>\n          <BaseCheckmark\n            v-if=\"isSelectable && selectActive && !isDisabled\"\n            :key=\"entryId + 'checkmark'\"\n            :checked=\"isSelected\"\n            :label=\"title\"\n            title=\"checkbox\"\n            mark-style=\"checkbox\"\n            class=\"base-menu-entry-checkbox\"\n            @clicked=\"clicked\" />\n        </TransitionGroup>\n      </div>\n    </slot>\n  </div>\n</template>\n\n<script>\nimport BaseIcon from '../BaseIcon/BaseIcon';\nimport BaseCheckmark from '../BaseCheckmark/BaseCheckmark';\n\n/**\n * Component to be used in Menu Entry List or as a sort of header element\n * with possibility to specify title description and more\n */\n\nexport default {\n  name: 'BaseMenuEntry',\n  components: {\n    BaseIcon,\n    BaseCheckmark,\n  },\n  props: {\n    /**\n     * An id to allow identification needs to be specified\n     */\n    entryId: {\n      type: [Number, String],\n      default: null,\n      required: true,\n    },\n    /**\n     * item main title\n     * if prop `isSelectable` is true please always set this so\n     * the checkbox has a label\n     */\n    title: {\n      type: String,\n      default: '',\n    },\n    /**\n     * additional text displayed directly after title\n     */\n    subtext: {\n      type: String,\n      default: '',\n    },\n    /**\n     * specifiy if item is active - which will display a border on right side\n     * and title in bold\n     */\n    isActive: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * specify if item is selected - this will cause the included checkbox\n     * to be checked\n     */\n    isSelected: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * specify an icon that is displayed before the title.\n     * see [BaseIcon](BaseIcon) for available icons\n     */\n    icon: {\n      type: String,\n      default: '',\n    },\n    /**\n     * Text displayed at the end of the item\n     */\n    description: {\n      type: String,\n      default: '',\n    },\n    /** control if the checkboxes are visible\n     *\n     */\n    selectActive: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * define if entry is selectable - thus if checkboxes are available\n     */\n    isSelectable: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * define if entry is disabled - thus if checkboxes are available\n     *   will overrule prop isSelectable\n     */\n    isDisabled: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * define if entry will be active upon click\n     */\n    isActivatable: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * define if title should be displayed in bold constantly\n     */\n    titleBold: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * define if thumbnail overlay should be shown\n     */\n    showThumbnails: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  data() {\n    return {\n      isSelectedInt: false,\n      // how many columns the thumbnail container takes\n      columns: 0,\n    };\n  },\n  watch: {\n    isSelected(val) {\n      this.isSelectedInt = val;\n    },\n  },\n  mounted() {\n    this.setThumbnailColumns();\n    this.isSelectedInt = this.isSelected;\n  },\n  updated() {\n    this.setThumbnailColumns();\n  },\n  methods: {\n    clicked() {\n      if (this.isDisabled) {\n        return;\n      }\n\n      if (this.selectActive) {\n        this.isSelectedInt = !this.isSelectedInt;\n        /**\n         * Event emitted when selectActive is true and the entry is clicked\n         *\n         * @event selected\n         * @param { Boolean } - was entry selected\n         */\n        this.$emit('selected', this.isSelectedInt);\n      } else {\n        /**\n         * Event emitted when entry is clicked and selectActive is false (=checkbox not shown)\n         *\n         * @event clicked\n         */\n        this.$emit('clicked');\n      }\n    },\n    slideFadeLeave() {\n      // safari fix: somehow transition needs to be triggered manually\n      this.$refs.slideFade.$el.style.right = '1px';\n    },\n    slideFadeAfterLeave() {\n      // sometimes newly duplicated element has no html element yet so\n      // check if element exists first\n      if (this.$refs.slideFade) {\n        // safari fix: reset transition\n        this.$refs.slideFade.$el.style.removeProperty('right');\n      }\n    },\n    /**\n     * Returns the count of columns that the thumbnail icons take.\n     */\n    setThumbnailColumns() {\n      if (this.showThumbnails && this.$refs.thumbnailContainer) {\n        // get the current count of thumbnails\n        const thumbnailCount = this.$refs.thumbnailContainer.childElementCount;\n        // find the count of columns (each column holds 2 thumbnails)\n        this.columns = Math.ceil(thumbnailCount / 2);\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n  @import '../../styles/variables.scss';\n\n  .base-menu-entry {\n    display: flex;\n    align-items: center;\n    height: $row-height-large;\n    width: 100%;\n    position: relative;\n    background: white;\n    overflow: hidden;\n\n    &:focus, &:focus-within {\n      outline: 0;\n      fill: $app-color;\n      color: $app-color;\n\n      .base-menu-entry-icon,\n      .base-menu-entry-title,\n      .base-menu-entry-subtext,\n      .base-menu-entry-description {\n        fill: $app-color;\n        color: $app-color;\n      }\n    }\n\n    // this class name is used in BaseMenuList for setting the drag image!!\n    .base-menu-entry-icon {\n      height: $icon-large;\n      max-height: $icon-large;\n      width: $icon-large;\n      margin: 0 $spacing;\n      flex: 0 0 #{$icon-large};\n      transition: fill 0.1s ease;\n    }\n\n    &.base-menu-entry-no-icon {\n      padding-left: $spacing;\n    }\n\n    .base-menu-entry-text-wrapper {\n      flex-grow: 1;\n      flex-shrink: 1;\n      display: flex;\n      align-items: baseline;\n      max-width: calc(100% - #{$icon-large} - (2 * #{$spacing}) - #{$border-width}\n      - 2 * #{$spacing-small} + 2 * #{$spacing});\n      position: relative;\n      overflow: hidden;\n      margin-right: $spacing;\n\n      &.base-menu-entry-text-slide-overlay::after {\n        content: '';\n        width: calc(#{$icon-medium} +  (2 * #{$spacing}));\n        height: 100%;\n        position: absolute;\n        top: 0;\n        right: -$spacing;\n        background-color: white;\n      }\n\n      .base-menu-entry-title-description-wrapper {\n        flex-shrink: 1;\n        flex-grow: 1;\n\n        .base-menu-entry__title-subtext-wrapper {\n          display: flex;\n          align-items: baseline;\n\n          .base-menu-entry-title {\n            margin-right: $spacing;\n\n            &.base-menu-entry-title-bold {\n              font-weight: bold;\n            }\n          }\n        }\n\n        .base-menu-entry-description {\n          color: $font-color-second;\n          font-size: $font-size-small;\n          white-space: nowrap;\n          transition: color 0.1s ease;\n        }\n      }\n    }\n\n    &.base-menu-entry-disabled {\n      .base-menu-entry-text-wrapper {\n        .base-menu-entry-title,\n        .base-menu-entry-description {\n          color: $graytext-color;\n        }\n      }\n\n      .base-menu-entry-thumbnail-container {\n        color: $graytext-color;\n      }\n    }\n\n    .base-menu-entry-title + .base-menu-entry-subtext {\n      margin-left: 0;\n    }\n\n    .base-menu-entry-subtext, .base-menu-entry-title {\n      position: relative;\n      white-space: nowrap;\n      overflow: hidden;\n      transition: color 0.1s ease;\n    }\n\n    .base-menu-entry-subtext {\n      color: $font-color-second;\n      font-size: $font-size-small;\n      margin-right: $spacing;\n      flex-grow: 99;\n      flex-shrink: 0;\n      padding-right: $spacing;\n    }\n\n    &.base-menu-entry-activatable {\n      cursor: pointer;\n      transition: box-shadow 0.2s ease;\n\n      &.base-menu-entry-active {\n        box-shadow: inset $border-active-width 0 0 0 $app-color;\n      }\n\n      &:hover, &:focus-within {\n        fill: $app-color;\n        color: $app-color;\n\n        .base-menu-entry-icon,\n        .base-menu-entry-icon path,\n        .base-menu-entry-icon use svg,\n        .base-menu-entry-icon use svg g,\n        .base-menu-entry-icon use svg g path,\n        .base-menu-entry-title,\n        .base-menu-entry-subtext,\n        .base-menu-entry-description {\n          fill: $app-color;\n          color: $app-color;\n        }\n      }\n    }\n\n    &.base-menu-entry-text-fade-out {\n      &::before {\n        left: inherit;\n        right: $spacing;\n      }\n    }\n\n    .base-menu-entry-transition-container {\n      position: absolute;\n      right: 0;\n      margin-right: $spacing;\n      height: 100%;\n      display: flex;\n      align-items: center;\n      background: $box-color;\n    }\n\n    .base-menu-entry-thumbnail-container {\n      display: flex;\n      flex-direction: column;\n      flex-wrap: wrap-reverse;\n      height: $row-height-large;\n      justify-content: center;\n      align-items: flex-start;\n      padding-left: $spacing;\n      gap: $spacing;\n      // calculate container width as sum of thumbnail columns and column gaps,\n      // plus an extra $spacing to account for the padding-left applied above.\n      // the count of columns is calculated in the setThumbnailColumns() method.\n      width: calc(var(--cols) * #{$icon-small} + (var(--cols) - 1) * #{$spacing} + #{$spacing});\n      // width and height of each thumbnail icon\n      ::v-deep .svg-icon {\n        height: $icon-small;\n        width: $icon-small;\n      }\n    }\n\n    .base-menu-entry-checkbox {\n      background: $box-color;\n      height: 100%;\n      padding-left: $spacing;\n    }\n\n    .slide-fade-group {\n      display: flex;\n      align-items: center;\n      height: 100%;\n    }\n\n    .slide-fade-enter-active, .slide-fade-move, .slide-fade-leave-active {\n      transition: opacity 0.5s ease, transform 0.5s ease;\n    }\n\n    .slide-fade-enter, .slide-fade-leave-to {\n      opacity: 0;\n      transform: translateX(#{$spacing});\n    }\n\n    .slide-fade-leave-active {\n      position: absolute;\n      right: -$spacing;\n    }\n  }\n\n  .base-menu-entry-text-fade-out {\n    &::before {\n      content: '';\n      width: calc(#{$fade-out-width} + #{$spacing});\n      height: $row-height-large;\n      position: absolute;\n      top: 0;\n      left: calc(-#{$fade-out-width} - #{$spacing});\n      background: linear-gradient(to right, rgba(255, 255, 255, 0) , white);\n      z-index: map-get($zindex, fadeout);\n    }\n  }\n</style>\n"],"names":["_sfc_main","BaseIcon","BaseCheckmark","val","thumbnailCount"],"mappings":";;;;AAmGA,MAAAA,IAAA;AAAA,EACA,MAAA;AAAA,EACA,YAAA;AAAA,IACA,UAAAC;AAAA,IACA,eaAAA;AAAA,MACA,MAAA;AAAA,MACA,SAAA;AAAA,IACA;AAAA;AAAA;AAAA;AAAA,IAIA,cAAA;AAAA,MACA,MAAA;AAAA,MACA,SAAA;AAAA,IACA;AAAA;AAAA;AAAA;AAAA,IAIA,cAAA;AAAA,MACA,MAAA;AAAA,MACA,SAAA;AAAA,IACA;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,YAAA;AAAA,MACA,MAAA;AAAA,MACA,SAAA;AAAA,IACA;AAAA;AAAA;AAAA;AAAA,IAIA,eAAA;AAAA,MACA,MAAA;AAAA,MACA,SAAA;AAAA,IACA;AAAA;AAAA;AAAA;AAAA,IAIA,WAAA;AAAA,MACA,MAAA;AAAA,MACA,SAAA;AAAA,IACA;AAAA;AAAA;AAAA;AAAA,IAIA,gBAAA;AAAA,MACA,MAAA;AAAA,MACA,SAAA;AAAA,IACA;AAAA,EACA;AAAA,EACA,OAAA;AACA,WAAA;AAAA,MACA,eAAA;AAAA;AAAA,MAEA,SAAA;AAAA,IACA;AAAA,EACA;AAAA,EACA,OAAA;AAAA,IACA,WAAAC,GAAA;AACA,WAAA,gBAAAA;AAAA,IACA;AAAA,EACA;AAAA,EACA,UAAA;AACA,SAAA,oBAAA,GACA,KAAA,gBAAA,KAAA;AAAA,EACA;AAAA,EACA,UAAA;AACA,SAAA,oBAAA;AAAA,EACA;AAAA,EACA,SAAA;AAAA,IACA,UAAA;AACA,MAAA,KAAA,eAIA,KAAA,gBACA,KAAA,gBAAA,CAAA,KAAA,eAOA,KAAA,MAAA,YAAA,KAAA,aAAA,KAOA,KAAA,MAAA,SAAA;AAAA,IAEA;AAAA,IACA,iBAAA;AAEA,WAAA,MAAA,UAAA,IAAA,MAAA,QAAA;AAAA,IACA;AAAA,IACA,sBAAA;AAGA,MAAA,KAAA,MAAA,aAEA,KAAA,MAAA,UAAA,IAAA,MAAA,eAAA,OAAA;AAAA,IAEA;AAAA;AAAA;AAAA;AAAA,IAIA,sBAAA;AACA,UAAA,KAAA,kBAAA,KAAA,MAAA,oBAAA;AAEA,cAAAC,IAAA,KAAA,MAAA,mBAAA;AAEA,aAAA,UAAA,KAAA,KAAAA,IAAA,CAAA;AAAA,MACA;AAAA,IACA;AAAA,EACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}