{"version":3,"file":"BaseMenuList.vue.cjs.js","sources":["../../../src/components/BaseMenuList/BaseMenuList.vue"],"sourcesContent":["<template>\n  <draggable\n    ref=\"draggable\"\n    :value=\"list\"\n    :sort=\"false\"\n    :disabled=\"!isDraggable || selectActive\"\n    :group=\"{ name: dragName, pull: 'clone', put: false }\"\n    :set-data=\"modifyDragItem\"\n    :force-fallback=\"!dragAndDropCapable\"\n    :fallback-on-body=\"!dragAndDropCapable\"\n    tag=\"ul\"\n    class=\"base-menu-list\"\n    @choose=\"getDragImage\"\n    @start=\"dragStart\"\n    @end=\"dragEnd\">\n    <li\n      v-for=\"(item, index) in list\"\n      :key=\"item.id || item.title\"\n      class=\"base-menu-list__list-entry\">\n      <base-menu-entry\n        ref=\"menuEntry\"\n        :entry-id=\"item.id\"\n        :title=\"item.title\"\n        :is-active=\"entryProps[index].active\"\n        :is-selected=\"entryProps[index].selected\"\n        :is-disabled=\"item.disabled\"\n        :icon=\"item.icon\"\n        :description=\"item.description\"\n        :is-selectable=\"true\"\n        :select-active=\"selectActive\"\n        @clicked=\"activateItem(index)\"\n        @selected=\"selectItem(index, $event)\">\n        <template #text-content>\n          <!-- @slot use this slot to individualize the displayed text per\n            menu entry.\n            @binding { Object } item - the complete entry provided by list -->\n          <slot\n            name=\"entry-text-content\"\n            :item=\"item\" />\n        </template>\n        <template #right-side-elements=\"{ isSelected }\">\n          <!-- @slot use this slot to add elements to the right side of an entry. This slot content\n            will be rendered in place of thumbnails and select checkbox so it will effectively\n            disable the display of selection elements and if select mode is desired, custom elements\n            should be provided\n             @binding { Object } item - the complete entry provided by list\n             @binding { boolean } is-selected - was item selected -->\n          <slot\n            name=\"entry-right-side-elements\"\n            :is-selected=\"isSelected\"\n            :item=\"item\" />\n        </template>\n        <template\n          #thumbnails>\n          <!-- @slot Use this scoped slot to supply a list of thumbnails (i.e. [BaseIcon](BaseIcon)) for `item`, where `item` is one list element. See also the example below.-->\n          <slot\n            name=\"thumbnails\"\n            :item=\"item\" />\n        </template>\n      </base-menu-entry>\n    </li>\n  </draggable>\n</template>\n\n<script>\nimport Draggable from 'vuedraggable';\nimport BaseMenuEntry from '../BaseMenuEntry/BaseMenuEntry';\n\n/**\n * Base Component for SideBar Menu Entries\n *   (this component is currently not ssr-capable)\n */\n\nexport default {\n  name: 'BaseMenuList',\n  components: {\n    BaseMenuEntry,\n    Draggable,\n  },\n  props: {\n    /**\n     * define if entries are selectable -> d.h. the selectboxes are showing\n     */\n    selectActive: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * list of menu entries - array of objects\n     *   Entry properties that can be displayed:\n     *\n     *     *required*:\n     *      **id** `string` - give every item an unique id\n     *\n     *     *optional*:\n     *      **title** `string` - main text line in the list item\n     *      **description** `string` - second text line in the list item\n     *      **active** `boolean` - steer from outside if item should be displayed active (with left\n     *        side color border)\n     *      **selected** `boolean` - steer from outside if entry select box should be checked\n     *      **disabled** `boolean` - steer from outside if entry select box should be disabled\n     *      **icon** `string` - a valid [BaseIcon](BaseIcon) icon name\n     *\n     *      Also see [BaseMenuEntry](BaseMenuEntry) component for more information on\n     *        the mentioned properties.\n     */\n    list: {\n      type: Array,\n      default: () => [],\n      validator: val => val.every(item => Object.keys(item).includes('id')),\n    },\n    /**\n     * index of the entry that should currently be active\n     * TODO: check if it would be better to use id here!\n     */\n    activeEntry: {\n      type: Number,\n      default: -1,\n    },\n    /**\n     * provide a list of entries that should appear selected\n     */\n    selectedList: {\n      type: Array,\n      default: () => [],\n    },\n    /**\n     * specify the group name for the drag receiver\n     */\n    dragName: {\n      type: String,\n      default: 'menuEntry',\n    },\n  },\n  data() {\n    return {\n      // have internally necessary props in separate array to prevent issues with\n      // outside store mutations\n      entryProps: [],\n      dragging: false,\n      dragAndDropCapable: false,\n      isDraggable: true,\n      resizeTimeout: null,\n      /**\n       * chrome can not deal with delay if drag image is cloned from dom on setData directly\n       * so image needs to be set previously and stored in variable\n       * @type {?SVGElement}\n       */\n      dragImg: null,\n    };\n  },\n  watch: {\n    list() {\n      this.setInternalVar();\n    },\n    activeEntry(val) {\n      this.entryProps.map(item => this.$set(item, 'active', false));\n      if (val >= 0 && this.entryProps[val]) {\n        this.$set(this.entryProps[val], 'active', true);\n      }\n    },\n    selectActive(val) {\n      if (!val) {\n        this.entryProps.forEach(entry => this.$set(entry, 'selected', false));\n      } else {\n        this.setInternalVar();\n      }\n    },\n    selectedList() {\n      this.setInternalVar();\n    },\n  },\n  created() {\n    this.setInternalVar();\n  },\n  mounted() {\n    this.isDraggable = !this.isMobile();\n    this.dragAndDropCapable = ('DragEvent' in window);\n\n    window.addEventListener('resize', () => {\n      clearTimeout(this.resizeTimeout);\n      this.resizeTimeout = setTimeout(() => {\n        this.isDraggable = !this.isMobile();\n      }, 250);\n    });\n\n    // Set _sortable.nativeDraggable directly due\n    // prop force-fallback in vue-draggable is not propagated to sortablejs if updated\n    // eslint-disable-next-line\n    if (typeof this.$refs.draggable._sortable.nativeDraggable !== 'undefined') {\n      // eslint-disable-next-line\n      this.$refs.draggable._sortable.nativeDraggable = this.dragAndDropCapable;\n    } else {\n      // eslint-disable-next-line\n      console.warn('The option \"nativeDraggable\" in sortableJS is missing. '\n        + 'Please check for changes https://github.com/SortableJS/sortablejs.');\n    }\n  },\n  methods: {\n    // this function is called when a menu entry is clicked (when checkboxes not active)\n    activateItem(index) {\n      /**\n       * event emitted when a menu entry is clicked\n       *\n       * @event clicked\n       * @param { String } - the index of the respective entry\n       */\n      this.$emit('clicked', index);\n    },\n    selectItem(index, selected) {\n      this.$set(this.entryProps[index], 'selected', selected);\n      /**\n       * event emitted when entry is clicked and select is active\n       *\n       * @event selected\n       * @type { Object }\n       * @property {string} index - the index of the selected item\n       * @property {boolean} selected - was items selected\n       */\n      this.$emit('selected', { index, selected });\n    },\n    setInternalVar() {\n      this.entryProps = this.list.map(entry => ({\n        ...{\n          selected: entry.selected || this.selectedList.includes(entry.id),\n          active: entry.active || false,\n          error: entry.error || false,\n        },\n      }));\n      if (this.entryProps.length && this.activeEntry >= 0) {\n        this.$set(this.entryProps[this.activeEntry], 'active', true);\n      }\n    },\n    /**\n     * get the relevant icon image from the dom and save it in a variable\n     * (Chrome could not deal with setting it in modifyDragItem directly)\n     * @param {CustomEvent} event\n     */\n    getDragImage(event) {\n      // get the relevant svg element from the base menu entry by class name\n      // (necessary to use class name so thumbnail sgvs are not used if no icon is provided in list)\n      const entryIcon = event.item.getElementsByClassName('base-menu-entry-icon')[0];\n      // check if icon was set\n      if (entryIcon) {\n        // get the size to be able to set it to the drag image as well\n        const size = `${(entryIcon.clientHeight * 2)}px`;\n\n        // clone the svg used in this entry\n        const pic = entryIcon.cloneNode(true);\n        pic.id = 'drag-icon';\n        pic.style.height = size;\n        pic.style.maxHeight = size;\n        pic.style.width = size;\n        pic.style.backgroundColor = 'white';\n        pic.style.position = 'absolute';\n        pic.style.top = '-99999px';\n        pic.style.left = '-99999px';\n        // store it in the variable\n        this.dragImg = pic;\n      } else {\n        this.dragImg = null;\n      }\n    },\n    dragStart() {\n      this.dragging = true;\n    },\n    dragEnd() {\n      this.dragging = false;\n      // remove drag item from the body again if necessary after drag ended\n      const elem = document.getElementById('drag-icon');\n      if (elem) {\n        elem.parentNode.removeChild(elem);\n      }\n    },\n    modifyDragItem(dataTransfer) {\n      // check if drag image was set (not the case if no icon was provided in list items)\n      if (this.dragImg) {\n        // add the element retrieved in choose event (getDragImage()) to the dom\n        document.body.appendChild(this.dragImg);\n        // Edge does not support setDragImage\n        if (typeof DataTransfer.prototype.setDragImage === 'function') {\n          dataTransfer.setDragImage(this.dragImg, 0, 0);\n        }\n      }\n      dataTransfer.setData('draggable', '');\n    },\n    isMobile() {\n      return window.innerWidth < 640;\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n  @import \"../../styles/variables\";\n\n  .base-menu-list {\n    position: relative;\n\n    .base-menu-list__list-entry {\n      &:not(:last-of-type) {\n        border-bottom: $separation-line;\n      }\n    }\n  }\n</style>\n"],"names":["_sfc_main","BaseMenuEntry","Draggable","val","item","entry","index","selected","event","entryIcon","size","pic","elem","dataTransfer"],"mappings":"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"}