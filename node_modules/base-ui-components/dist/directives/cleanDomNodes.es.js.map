{"version":3,"file":"cleanDomNodes.es.js","sources":["../../src/directives/cleanDomNodes.js"],"sourcesContent":["/**\n * cleans the provided DOM element by removing empty nodes and\n * removes excess spaces and line breaks within a text node\n *\n * @param {ChildNode} element - root element to clean\n * @param {boolean} [binding] - specify in the directive whether to clean\n *  child elements recursively like so: v-clean-dom-nodes={ recursive: [true|false] }\n *  if not specified this defaults to true - if single nodes should be skipped a\n *  'no-clean' css class can be added to that element\n */\nexport default function cleanDomNodes(element, binding) {\n  element.childNodes.forEach((node) => {\n    if (node.nodeType === Node.TEXT_NODE) {\n      // remove white-spaces and new-lines\n      const textContent = node.textContent.trim();\n      // remove empty nodes\n      if (textContent === '') {\n        element.removeChild(node);\n        return;\n      }\n      // update node\n      // eslint-disable-next-line no-param-reassign\n      node.textContent = textContent;\n      return;\n    }\n\n    // clean nodes recursively if binding is not specified or binding value property\n    // recursive is set 'true'\n    if (node.nodeType === Node.ELEMENT_NODE && (!binding || binding?.value?.recursive)) {\n      cleanDomNodes(node);\n    }\n  });\n}\n"],"names":["cleanDomNodes","element","binding","childNodes","forEach","node","_binding$value","nodeType","Node","TEXT_NODE","textContent","trim","removeChild","ELEMENT_NODE","value","recursive"],"mappings":"AAUe,SAASA,EAAcC,GAASC,GAAS;AACtDD,EAAAA,EAAQE,WAAWC,QAAQ,SAACC,GAAS;AAAA,QAAAC;AACnC,QAAID,EAAKE,aAAaC,KAAKC,WAAW;AAEpC,UAAMC,IAAcL,EAAKK,YAAYC,KAAI;AAEzC,UAAID,MAAgB,IAAI;AACtBT,QAAAA,EAAQW,YAAYP,CAAI;AACxB;AAAA,MACF;AAGAA,MAAAA,EAAKK,cAAcA;AACnB;AAAA,IACF;AAIA,IAAIL,EAAKE,aAAaC,KAAKK,iBAAiB,CAACX,KAAWA,KAAO,SAAAI,IAAPJ,EAASY,WAAK,QAAAR,MAAA,UAAdA,EAAgBS,cACtEf,EAAcK,CAAI;AAAA,EAEtB,CAAC;AACH;"}