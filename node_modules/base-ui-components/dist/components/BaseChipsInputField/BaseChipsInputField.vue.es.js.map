{"version":3,"file":"BaseChipsInputField.vue.es.js","sources":["../../../src/components/BaseChipsInputField/BaseChipsInputField.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"chipsInputField\"\n    class=\"base-chips-input-field\">\n    <!-- INPUT LABEL AND FIELD -->\n    <BaseInput\n      :id=\"internalId\"\n      ref=\"baseInput\"\n      v-model=\"inputInt\"\n      :field-type=\"inputType\"\n      :placeholder=\"allowMultipleEntries || !selectedListInt.length ? placeholder : ''\"\n      :label=\"label\"\n      :show-label=\"showLabel\"\n      :show-input-border=\"showInputBorder\"\n      :is-active.sync=\"isActiveInt\"\n      :use-form-field-styling=\"useFormFieldStyling\"\n      :drop-down-list-id=\"dropDownListId\"\n      :linked-list-option=\"linkedListOption\"\n      :hide-input-field=\"!allowMultipleEntries && !!selectedListInt.length\"\n      :invalid=\"invalid\"\n      :required=\"required\"\n      :disabled=\"disabled\"\n      :clearable=\"clearable\"\n      :loadable=\"loadable\"\n      :error-message=\"errorMessage\"\n      :show-error-icon=\"showErrorIcon\"\n      :is-loading=\"isLoading\"\n      :input-class=\"inputClass\"\n      :set-focus-on-active=\"setFocusOnActive\"\n      :assistive-text=\"{\n        loaderActive: assistiveText.loaderActive,\n      }\"\n      @keydown.enter.prevent=\"addOption\"\n      @keydown=\"checkKeyEvent\"\n      v-on=\"inputListeners\">\n      <template\n        #label-addition>\n        <!-- @slot Slot to allow for additional elements on the right side of the label row <div> (e.g. language tabs)) -->\n        <slot name=\"label-addition\" />\n        <button\n          v-if=\"sortable\"\n          :aria-label=\"`${label}. ${sortText.replace(/[—–-]/, 'to')}`\"\n          type=\"button\"\n          class=\"base-chips-input-field__sort\"\n          @click=\"sortSelectedList(selectedListInt)\">\n          {{ sortText }}\n        </button>\n      </template>\n      <template #pre-input-field>\n        <!-- @slot slot to add elements within the form field but in a row before the actual input field. for an example see [BaseInput](BaseInput)-->\n        <slot name=\"pre-input-field\" />\n      </template>\n      <template\n        #input-field-addition-before>\n        <!-- @slot Slot to allow for additional elements in the input field <div> (before <input>) -->\n        <slot name=\"input-field-addition-before\" />\n        <div\n          v-if=\"displayChipsInline\"\n          class=\"base-chips-input-field__chips\">\n          <template v-if=\"draggable && !chipsEditable\">\n            <draggable\n              v-model=\"selectedListInt\"\n              :set-data=\"setDragElement\"\n              :force-fallback=\"true\"\n              :animation=\"200\"\n              handle=\".base-chip__text\"\n              @start=\"drag = true\"\n              @end=\"onDragEnd\">\n              <transition-group\n                :name=\"!drag ? 'flip-list' : null\"\n                type=\"transition\"\n                class=\"base-chips-input-field__chips-transition\">\n                <template\n                  v-for=\"(entry, index) in selectedListInt\">\n                  <!-- @slot a slot to provide customized chips\n                    @binding { object } entry - one selected option displayed as chip\n                    @binding { number } index - the index of the entry in the selectedList array\n                    @binding { number } indexActiveForRemove - the index of the chip that is currently active to be removed (for keyboard handling)\n                    @binding { function } removeEntry - function to remove the entry from selectedList, needs `entry` and `index` as arguments\n                  -->\n                  <slot\n                    name=\"chip\"\n                    v-bind=\"{\n                      entry,\n                      index,\n                      indexActiveForRemove,\n                      removeEntry,\n                    }\">\n                    <BaseChip\n                      :id=\"entry.idInt\"\n                      :key=\"allowMultipleEntries ? 'chip-' + entry.idInt : index\"\n                      :entry=\"getLangLabel(entry[labelPropertyName], true)\"\n                      :hover-box-content=\"hoverboxContent\"\n                      :is-linked=\"alwaysLinked || entry[identifierPropertyName] === 0\n                        || !!entry[identifierPropertyName]\"\n                      :chip-active=\"indexActiveForRemove === index\"\n                      :is-removable=\"chipsRemovable\"\n                      :interpret-text-as-html=\"interpretChipsLabelAsHtml && !!entry[identifierPropertyName]\"\n                      @remove-entry=\"removeEntry(entry, index)\"\n                      @hoverbox-active=\"hoverBoxActive($event, entry)\" />\n                  </slot>\n                </template>\n              </transition-group>\n            </draggable>\n          </template>\n          <template v-else>\n            <template\n              v-for=\"(entry, index) in selectedListInt\">\n              <!-- @slot a slot to provide customized chips\n                @binding { object } entry - one selected option displayed as chip\n                @binding { number } index - the index of the entry in the selectedList array\n                @binding { number } indexActiveForRemove - the index of the chip that is currently active to be removed (for keyboard handling)\n                @binding { function } removeEntry - function to remove the entry from selectedList, needs `entry` and `index` as arguments\n              -->\n              <slot\n                name=\"chip\"\n                v-bind=\"{\n                  entry,\n                  index,\n                  indexActiveForRemove,\n                  removeEntry,\n                }\">\n                <BaseChip\n                  :id=\"entry.idInt\"\n                  :key=\"allowMultipleEntries ? 'chip-' + entry.idInt : index\"\n                  :entry=\"getLangLabel(entry[labelPropertyName], true)\"\n                  :hover-box-content=\"hoverboxContent\"\n                  :editable=\"chipsEditable\"\n                  :is-linked=\"alwaysLinked || entry[identifierPropertyName] === 0\n                    || !!entry[identifierPropertyName]\"\n                  :chip-active=\"indexActiveForRemove === index\"\n                  :assistive-text=\"assistiveText.selectedOption\"\n                  :is-removable=\"chipsRemovable\"\n                  :interpret-text-as-html=\"interpretChipsLabelAsHtml && !!entry[identifierPropertyName]\"\n                  @remove-entry=\"removeEntry(entry, index)\"\n                  @value-changed=\"modifyListEntry($event, index)\"\n                  @hoverbox-active=\"hoverBoxActive($event, entry)\" />\n              </slot>\n            </template>\n          </template>\n        </div>\n      </template>\n      <template #input-field-inline-before>\n        <!-- @slot to add elements directly inline before the input (contrary to `input-field-addition-before` this does not wrap). for an example see [BaseInput](BaseInput)-->\n        <slot name=\"input-field-inline-before\" />\n      </template>\n      <template #input-field-addition-after>\n        <!-- @slot for adding elements after input -->\n        <slot name=\"input-field-addition-after\" />\n      </template>\n      <template #post-input-field>\n        <!-- @slot for adding elements at the end covering the whole height -->\n        <slot name=\"post-input-field\" />\n      </template>\n      <template #error-icon>\n        <!-- @slot use a custom icon instead of standard error/warning icon -->\n        <slot name=\"error-icon\" />\n      </template>\n      <template #remove-icon>\n        <!-- @slot use a custom icon instead of standard remove icon -->\n        <slot name=\"remove-icon\" />\n      </template>\n      <template #below-input>\n        <!-- @slot below-input slot added to e.g. add drop down -->\n        <slot name=\"below-input\" />\n      </template>\n    </BaseInput>\n  </div>\n</template>\n\n<script>\nimport Draggable from 'vuedraggable';\nimport { sort, createId } from '@/utils/utils';\nimport BaseInput from '@/components/BaseInput/BaseInput';\nimport { ref } from 'vue';\nimport { useAnnouncer } from '@/composables/useAnnouncer';\nimport i18n from '../../mixins/i18n';\nimport navigateMixin from '../../mixins/navigateList';\n\n/** input field with chips functionalities */\n\nexport default {\n  name: 'BaseChipsInputField',\n  components: {\n    BaseInput,\n    BaseChip: () => import('@/components/BaseChip/BaseChip').then(m => m.default || m),\n    Draggable,\n  },\n  mixins: [\n    i18n,\n    navigateMixin,\n  ],\n  model: {\n    prop: 'input',\n    event: 'input',\n  },\n  props: {\n    /**\n     if field is occurring more then once - set an id\n     */\n    id: {\n      type: String,\n      default: '',\n    },\n    /**\n     * list of selected options (strings or objects - set `isStringArray` `true` if it is an array of strings),\n     *  displayed as chips\n     * (you can use the `.sync` modifier on this property)\n     */\n    selectedList: {\n      type: Array,\n      default: () => [],\n    },\n    /**\n     * input string\n     */\n    input: {\n      type: String,\n      default: '',\n    },\n    /**\n     * specify input field type\n     * @values text, search\n     */\n    inputType: {\n      type: String,\n      default: 'text',\n      validator: val => ['text', 'search'].includes(val),\n    },\n    /**\n     * input field label\n     */\n    label: {\n      type: String,\n      required: true,\n    },\n    /**\n     * define if label should be visible\n     */\n    showLabel: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * input field placeholder\n     */\n    placeholder: {\n      type: String,\n      default: null,\n    },\n    /**\n     * define if the user can add an option that is not in the list\n     */\n    // can the user add Entries that are not available in the vocabulary (selectable list)\n    allowUnknownEntries: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * define only a single or multiple options can be selected\n     */\n    // define if one or several entries can be selected from drop down menu\n    allowMultipleEntries: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * this means typed input will be added as chip directly\n     */\n    addSelectedEntryDirectly: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * if `true` a button with that functionality will be visible\n     */\n    sortable: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * define if chips should be draggable\n     */\n    draggable: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * define if entries should always appear linked (-> with grey background)\n     */\n    alwaysLinked: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * set content for the info box activatable by click.\n     * see [BaseHoverBox](BaseHoverBox) for more details\n     */\n    hoverboxContent: {\n      type: Object,\n      default: () => ({}),\n    },\n    /**\n     * show spinner to indicate that something is loading\n     * (for dynamically fetched entries that need to do backend requests)\n     */\n    isLoading: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * if sorting is enabled this will be the text shown in the button\n     */\n    sortText: {\n      type: String,\n      default: 'Sort A – Z',\n    },\n    /**\n     * if `true` sorting will consider the last string in a label or if a comma is\n     * present the string before the comma\n     */\n    sortName: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * set a language (ISO 639-1)\n     */\n    language: {\n      type: String,\n      default: '',\n    },\n    /**\n     * option to have the border of the input field not displayed\n     */\n    showInputBorder: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * define if standard form field styling should be\n     * used (otherwise no border, no box shadow)\n     */\n    useFormFieldStyling: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * specify the id of a linked drop down list\n     */\n    dropDownListId: {\n      type: String,\n      default: '',\n    },\n    /**\n     * specify a linked list option (e.g. drop down)\n     *   (will be used in `aria-activedescendant` attribute)\n     */\n    linkedListOption: {\n      type: [Number, String],\n      default: null,\n    },\n    /**\n     * specify the object property that should be used as identifier\n     */\n    identifierPropertyName: {\n      type: String,\n      default: '',\n    },\n    /**\n     * specify the object property that should be used as value to be displayed\n     */\n    labelPropertyName: {\n      type: String,\n      default: 'label',\n    },\n    /**\n     * specify `true` if `selectedList` array is a array of strings\n     */\n    isStringArray: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * property for special case component [BaseChipsBelow](BaseChipsBelow) - if `false` in this case chips will\n     * not be displayed in the input field\n     */\n    displayChipsInline: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * mark as required field (currently only used for aria-required)\n     */\n    required: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * mark the form field as invalid and ideally also provide an error message\n     * to display below the form field\n     * for an example see [BaseInput](BaseInput)\n     */\n    invalid: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * set `true` if input field should be disabled\n     * for an example see [BaseInput](BaseInput)\n     */\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * add an error message to be displayed below form field if field is invalid\n     * for an example see [BaseInput](BaseInput)\n     */\n    errorMessage: {\n      type: String,\n      default: '',\n    },\n    /**\n     * define if error icon should be shown\n     * for an example see [BaseInput](BaseInput)\n     */\n    showErrorIcon: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * if `true` a remove icon will be shown allowing to remove\n     * all input at once\n     * for an example see [BaseInput](BaseInput)\n     */\n    clearable: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * if `true` space is reserved for a loader that can be activated\n     * with the 'isLoading' prop\n     */\n    loadable: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * possibility to steer input field active state from outside\n     * it is possible to use the `.sync` modifier here\n     */\n    isActive: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * specify additional input field styling\n     */\n    inputClass: {\n      type: String,\n      default: '',\n    },\n    /**\n     * use this prop to deactivate automatic setting of focus as soon as input element\n     * becomes active - this might require external handling of focus setting!\n     */\n    setFocusOnActive: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * define true if chip should be editable on click\n     *\n     * **Caveat**: chips can not be both draggable AND editable and it can not show\n     *  `hoverBoxContent` as soon as it is editable respectively - if both are set `true` edit\n     *  functionality takes precedent - chip will not be draggable, `hoverBoxContent` will not\n     *  be shown!\n     */\n    chipsEditable: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * this prop gives the option to add assistive text for screen readers\n     * properties:\n     *\n     * **selectedOption**: text read when a selected option is focused (currently only\n     *  working for editable chips)\n     * **loaderActive**: text that is announced when results are being fetched (prop\n     *  `isLoading` is set `true`)\n     * **optionAdded**: text read when option was added to the selected list. string {label}\n     *  could be added to be replaced by the actual chip label (value in [`labelPropertyName`])\n     * **optionToRemoveSelected**: text read when option is marked active for removal (by using\n     *  backspace in empty input field). string {label} could be added to be replaced\n     *  by the actual chip label (value in [`labelPropertyName`])\n     * **optionRemoved**: text read when option was removed from the selected list. string {label}\n     *  could be added to be replaced by the actual chip label (value in [`labelPropertyName`])\n     */\n    assistiveText: {\n      type: Object,\n      default: () => ({\n        selectedOption: '',\n        loaderActive: 'loading.',\n        optionAdded: 'option {label} added to selected list.',\n        optionToRemoveSelected: 'option {label} from selected list marked for removal. Press delete or backspace to remove.',\n        optionRemoved: 'option {label} removed.',\n      }),\n    },\n    /**\n     * define if selected options chips should come with a remove icon\n     * (usually desired usability wise just an additional option for `allowMultipleEntries`\n     * `false` if there is any other means of removal\n     * (e.g. [BaseAdvancedSearch](#baseadvancedsearch)))\n     */\n    chipsRemovable: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * if necessary chip text can\n     *  be rendered as v-html directive\n     *\n     *  **caveat**: setting this variable `true` can lead to XSS attacks. Only use\n     *    this prop on trusted content and never on user-provided content. This is\n     *    also why this will only take effect on selected chips with identifier (=selected\n     *    from the options not a direct user input)\n     */\n    interpretChipsLabelAsHtml: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  setup() {\n    /**\n     * set up component reference\n     * @type {Ref<UnwrapRef<null|HTMLElement>>}\n     */\n    const chipsInputField = ref(null);\n    // use composable to announce screen reader text on actions taken (e.g.\n    // add chip to selected list or remove chip\n    const { announcement } = useAnnouncer(chipsInputField);\n    return {\n      chipsInputField,\n      announcement,\n    };\n  },\n  data() {\n    return {\n      /**\n       * internal representation of selectedList\n       * @type {(String[]|Object[])}\n       */\n      selectedListInt: [],\n      /**\n       * store active state of the base input field\n       * @type {boolean}\n       */\n      isActiveInt: false,\n      /**\n       * for removing chips via backspace, to get delay after\n       * keydown event\n       * @type {?number}\n       */\n      timeout: null,\n      /**\n       * for removing chips via backspace, to no accidentally delete\n       * chips on multiple backspace keydown events\n       * @type {boolean}\n       */\n      fired: false,\n      /**\n       * for dragging functionality (transition)\n       * @type {boolean}\n       */\n      drag: false,\n      /**\n       * variable for the currently active chip (for arrow key use)\n       * @type {number}\n       */\n      indexActiveForRemove: -1,\n      /**\n       * variable for internal input handling\n       * @type {string}\n       */\n      inputInt: '',\n    };\n  },\n  computed: {\n    /**\n     * if an id was not provided in props we create an internal id\n     * @returns {string}\n     */\n    internalId() {\n      return this.id || createId();\n    },\n    inputListeners() {\n      return {\n        // add all the listeners from the parent\n        ...this.$listeners,\n        // and add custom listeners\n        ...{\n          // keep this BaseInput event from propagating and use component's own event\n          'update:is-active': () => {},\n        },\n      };\n    },\n  },\n  watch: {\n    /**\n     * selectedList is watched to also change selectedListInt if necessary\n     * was thinking of making this a computed property however if you do\n     * list manipulations (e.g. push, splice) the setter is not triggered\n     * --> more complicated to inform parent (because sometimes setter triggered sometimes not)\n     */\n    selectedList: {\n      handler(val) {\n        // check that new value is not undefined (would throw error with map)\n        if (val) {\n          // create a temporary list object and add an internal id\n          const tempList = val.map(option => ({\n            ...(this.isStringArray ? { [this.labelPropertyName]: option }\n              : option),\n            // adding an internal id - either the one given by identifierProperty or\n            // if not available - assign a previously assigned one or a new id\n            ...{ idInt: option[this.identifierPropertyName] || this.getIdInt(option) },\n          }));\n          // only update if internal list is different from outside list\n          if (JSON.stringify(tempList) !== JSON.stringify(this.selectedListInt)) {\n            this.selectedListInt = tempList;\n          }\n        } else {\n          this.selectedListInt = [];\n        }\n      },\n      deep: true,\n      immediate: true,\n    },\n    /**\n     * to have isActive prop in sync\n     * @param {boolean} val - internal input field active value\n     */\n    isActiveInt(val) {\n      /**\n       * event updating the is-active prop in case of internal changes\n       *\n       * @event update:is-active\n       * @param {boolean} - is input field active\n       */\n      this.$emit('update:is-active', val);\n    },\n    /**\n     * watch for outside changes in the input field active state\n     * @param {boolean} val - the prop value set from outside\n     */\n    isActive: {\n      handler(val) {\n        // check is in sync already\n        if (val !== this.isActiveInt) {\n          this.isActiveInt = val;\n        }\n      },\n      immediate: true,\n    },\n    /**\n     * also input needs to be synchronized between component and parent (if necessary)\n     */\n    input: {\n      handler(val) {\n        // check if sync already\n        if (val !== this.inputInt) {\n          this.inputInt = val;\n        }\n      },\n      immediate: true,\n    },\n    /**\n     * watch if input changes internally and emit event if necessary\n     */\n    inputInt: {\n      handler(val) {\n        if (val !== this.input) {\n          /**\n           * emitting the input string if changed internally\n           * @event input\n           * @param {string} - the new input string\n           */\n          this.$emit('input', val);\n        }\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    /** KEYBOARD HANDLING FOR CHIPS */\n\n    /**\n     * function triggered on any keydown on the input field\n     * @param {KeyboardEvent} event\n     */\n    checkKeyEvent(event) {\n      const { key } = event;\n      // define conditions in which input field should be set inactive (in styling and blurring)\n      if ((key === 'Tab' && !(this.clearable && !!this.inputInt)) || (key === 'Enter' && !this.allowMultipleEntries)) {\n        this.isActiveInt = false;\n      }\n      // if event was Delete check if a chip should be deleted\n      if (this.chipsRemovable && (key === 'Backspace' || key === 'Delete')) {\n        // if backspace (once) is used make last chip active\n        if (key === 'Backspace' && !this.fired\n          && !this.inputInt && this.indexActiveForRemove < 0) {\n          this.indexActiveForRemove = this.selectedListInt.length - 1;\n          // on second backspace set timeout for delete\n        } else if (this.indexActiveForRemove >= 0 && !this.fired && !this.inputInt) {\n          // check if there is actually anything left to remove\n          this.removeEntry(\n            this.selectedListInt[this.indexActiveForRemove],\n            this.indexActiveForRemove,\n          );\n          this.indexActiveForRemove = -1;\n        }\n        // necessary to prevent accidental delete of chips when user keeps backspace pressed\n        this.fired = true;\n        if (this.timeout) {\n          clearTimeout(this.timeout);\n          this.timeout = null;\n        }\n        this.timeout = setTimeout(() => {\n          this.fired = false;\n        }, 200);\n        // if there is no input and arrow right or left was pressed\n        // navigate between the chips\n      } else if (!this.inputInt && (event.key === 'ArrowRight' || event.key === 'ArrowLeft')) {\n        // determine if index should be increased or decreased\n        const isIndexUp = event.key === 'ArrowRight';\n        // do the navigation in the chips list, returns the chip that should be\n        // active after navigation\n        const activeChip = this.navigate(\n          this.selectedListInt,\n          isIndexUp,\n          this.indexActiveForRemove,\n          true,\n        );\n        // set the chip active for removal (currently active one)\n        this.indexActiveForRemove = this.selectedListInt.indexOf(activeChip);\n        // in any other key event reset the chip active for remove\n      } else {\n        this.indexActiveForRemove = -1;\n      }\n      // if an entry was set active for removal by any key action - announce it\n      // to the screen reader user\n      if (this.indexActiveForRemove >= 0) {\n        // inform screen reader user\n        this.announcement = this.assistiveText.optionToRemoveSelected\n          .replace('{label}', this.selectedListInt[this.indexActiveForRemove][this.labelPropertyName]);\n      }\n    },\n\n    /** LIST MODIFICATIONS */\n\n    /**\n     * remove an entry from the list of selected entries\n     *\n     * @param {Object} option - the option selected from the list of selected\n     * options\n     * @param {number} index - the index of the item in the list\n     */\n    removeEntry(option, index) {\n      // save the label for screen reader information\n      const optionLabel = this.selectedListInt[index][this.labelPropertyName];\n      // remove the item from the internal list\n      this.selectedListInt.splice(index, 1);\n      // emit an event to inform parent of altered list\n      this.updateParentList(this.selectedListInt);\n      // also emit event to inform which item was removed\n      /**\n       * event emitted if option is removed from the list of selected\n       * options (additionally to altered list in case parent needs to know\n       * which item was removed)\n       *\n       * @event removed\n       * @aram {Object} - the removed option\n       */\n      this.$emit('removed', option);\n      // lay the focus on the input field\n      const inputElements = this.$refs.baseInput.$el.getElementsByTagName('input');\n      const mainInputElement = Array.from(inputElements).find(elem => elem.id === this.internalId);\n      if (mainInputElement) {\n        // trigger an input click here instead of focus so that clicked-outside is triggered for all\n        // other input fields (and potential drop downs / pop ups are closed)\n        mainInputElement.click();\n      }\n      // add a timeout so announcement is not interfered with by default drop down list announcement\n      setTimeout(() => {\n        // inform screen reader user\n        this.announcement = this.assistiveText.optionRemoved\n          .replace('{label}', optionLabel);\n      }, 1000);\n    },\n    /**\n     * adding an selected option to the array of selected options\n     */\n    addOption() {\n      // if there is input, unknown options are allowed and direct option addition\n      // is enabled - we can add the option to the selected list directly\n      if (this.inputInt && this.allowUnknownEntries && this.addSelectedEntryDirectly) {\n        // check for duplicates\n        const duplicate = this.selectedListInt\n          .find(option => option[this.labelPropertyName] === this.inputInt);\n        // if no duplicate was found add the entry\n        if (!duplicate) {\n          // where should new item be placed (added at the end or replacing old entry\n          // if single select\n          const setIndex = this.allowMultipleEntries ? this.selectedListInt.length : 0;\n          // create object to add\n          const newEntry = {\n            idInt: this.getIdInt(),\n            [this.labelPropertyName]: this.inputInt,\n          };\n          // set entry in selectedList\n          this.$set(this.selectedListInt, setIndex, newEntry);\n          // emit an event to inform parent of altered list\n          this.updateParentList(this.selectedListInt);\n          // inform screen reader user\n          this.announcement = this.assistiveText.optionAdded\n            .replace('{label}', this.inputInt);\n          // otherwise just emit event to parent (for informing user)\n        } else {\n          /**\n           * emitted when user was trying to add an option but there was already\n           * an option with the same value in the list of selected options\n           *\n           * @event duplicate\n           * @param {Object} - the option with the identical value\n           */\n          this.$emit('duplicate', duplicate);\n        }\n        // reset the input\n        this.inputInt = '';\n      }\n    },\n    modifyListEntry(newString, index) {\n      // since this is also checked when assigning value to chip we should also check\n      // here if label is lang object (e.g. {de: '', en: '' })\n      if (typeof this.selectedListInt[index][this.labelPropertyName] === 'object'\n        && this.selectedListInt[index][this.labelPropertyName][this.language] !== undefined) {\n        // if so then assign the new value to the current language\n        // and also remove the id since the entry was altered and is not identical with the entry\n        // belonging to this id anymore\n        this.selectedListInt[index] = {\n          [this.labelPropertyName]: {\n            [this.language]: newString,\n          },\n        };\n        // else check if label prop is string and assign it directly\n        // (otherwise this case (an object with unknown properties) can not be handled)\n      } else if (typeof this.selectedListInt[index][this.labelPropertyName] === 'string') {\n        // and also remove the id since the entry was altered and is not identical with the entry\n        // belonging to this id anymore\n        this.selectedListInt[index] = {\n          [this.labelPropertyName]: newString,\n        };\n      }\n      // trigger change propagation to parent\n      this.updateParentList(this.selectedListInt);\n    },\n    /**\n     * function called when parent needs to be informed of selected\n     * list changes\n     *\n     * @param {Object[]} newSelectedListInt - the altered list of selected options\n     */\n    updateParentList(newSelectedListInt) {\n      let tempList = JSON.parse(JSON.stringify(newSelectedListInt));\n      // if provided selected list consisted of strings - return this way\n      if (this.isStringArray) {\n        tempList = tempList.map(selected => selected[this.labelPropertyName]);\n      } else if (newSelectedListInt.length) {\n        // remove internal ids again\n        tempList = tempList.map((selected) => {\n          this.$delete(selected, 'idInt');\n          return selected;\n        });\n      }\n      /**\n       * inform parent of changes to selected option list\n       * (you can use the .sync modifier on prop selectedList)\n       *\n       * @event update:selected-list\n       * @param {(Object[], String[])} - the modified list - array\n       * of strings is returned if isStringArray was set to true\n       */\n      this.$emit('update:selected-list', tempList);\n    },\n    /**\n     * every selected option needs an internal id to be uniquely identifyable\n     * by draggablejs\n     *\n     * @param {Object} [option=null] - the option the internal id is determined for\n     */\n    getIdInt(option = null) {\n      // check if the selected option already has an internal identifier\n      // not applicable for newly created entries so check if option was provided\n      if (option) {\n        // get matching option by value (this is only for options that dont have an\n        // external id provided anyways (also duplicates are excluded in 'addOption()'\n        const matchingOption = this.selectedListInt\n          .find(opt => opt[this.labelPropertyName] === option[this.labelPropertyName]\n            || opt[this.labelPropertyName] === option);\n        // check if there was exactly one matching result\n        if (matchingOption) {\n          return matchingOption.idInt;\n        }\n      }\n      // else return a new internal id\n      return createId();\n    },\n\n    /** SORTING */\n    /** function called when the 'sort' button is clicked */\n    sortSelectedList() {\n      this.isActiveInt = false;\n      sort(\n        this.selectedListInt,\n        this.labelPropertyName,\n        this.sortName,\n        this.language ? this.getLangLabel : null,\n      );\n      this.updateParentList(this.selectedListInt);\n    },\n\n    /** DRAGGABLE FUNCTIONALITIES */\n\n    /**\n     * need to set custom due to some strange effects not showing correct element in some cases\n     * @param {DataTransfer} dataTransfer\n     * @param {HTMLElement} dragEl - the dragged HTML Element\n     */\n    setDragElement(dataTransfer, dragEl) {\n      const img = dragEl.cloneNode(true);\n      img.id = 'chip-inline-drag';\n      img.style.position = 'absolute';\n      img.style.top = '-99999px';\n      img.style.left = '-99999px';\n\n      // add the element to the dom\n      document.body.appendChild(img);\n      dataTransfer.setDragImage(img, 0, 0);\n    },\n    onDragEnd() {\n      this.drag = false;\n      const elem = document.getElementById('chip-inline-drag');\n      if (elem) {\n        elem.parentNode.removeChild(elem);\n      }\n      // check if dragging led to differently sorted list\n      // and inform parent if yes\n      if (JSON.stringify(this.selectedList) !== JSON.stringify(this.selectedListInt)) {\n        this.updateParentList(this.selectedListInt);\n      }\n    },\n\n    /** HOVER BOX FUNCTIONALITY */\n\n    /**\n     * function triggered when a chip is clicked and hover box functionality is\n     * available\n     * @param {boolean} value - should hover box be showing or not\n     * @param {Object} option - the option on which click was made\n     */\n    hoverBoxActive(value, option) {\n      /**\n       * event emitted on show / hide hoverbox\n       *\n       * @property {boolean} value - value describing if hoverbox active is true or false\n       * @property {Object} option - the option for which the hoverbox was activated\n       */\n      this.$emit('hoverbox-active', { value, option });\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n  @import \"../../styles/variables\";\n\n  .base-chips-input-field {\n    width: 100%;\n    text-align: left;\n\n    .base-chips-input-field__chips {\n      max-width: 100%;\n\n      .base-chips-input-field__chips-transition {\n        display: flex;\n        flex-wrap: wrap;\n      }\n    }\n\n    .base-chips-input-field__sort {\n      cursor: pointer;\n      margin-left: $spacing;\n      white-space: nowrap;\n      transition: all 0.2s ease;\n\n      &:hover, &:active, &:focus {\n        color: $app-color;\n      }\n    }\n\n    .base-chips-input-field__loader {\n      margin: 0 $spacing;\n      transform: scale(0.5);\n      pointer-events: none;\n    }\n  }\n</style>\n"],"names":["_sfc_main","BaseInput","m","Draggable","i18n","navigateMixin","val","chipsInputField","ref","announcement","useAnnouncer","createId","tempList","option","event","key","isIndexUp","activeChip","index","optionLabel","inputElements","mainInputElement","elem","duplicate","setIndex","newEntry","newString","newSelectedListInt","selected","matchingOption","opt","sort","dataTransfer","dragEl","img","value"],"mappings":"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"}