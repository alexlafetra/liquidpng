import n from "../BaseIcon/BaseIcon.vue.es.js";
import s from "../BaseCheckmark/BaseCheckmark.vue.es.js";
import "./BaseExpandRow.vue.es2.js";
import d from "../../_virtual/_plugin-vue2_normalizer.es.js";
const l = {
  name: "BaseExpandRow",
  components: {
    BaseCheckmark: s,
    BaseIcon: n
  },
  props: {
    /**
     * specify if box is expandable
     */
    expandable: {
      type: Boolean,
      default: !0
    },
    /**
     * Title of the row.
     */
    title: {
      type: String,
      default: ""
    },
    /**
     * Optional subtitle of the row.
     */
    subtitle: {
      type: String,
      default: ""
    },
    /**
     * Lets you optionally specify an icon that is displayed before the title.
     * For valid values, see [BaseIcon](BaseIcon).
     */
    icon: {
      type: String,
      default: ""
    },
    /**
     * set the background of collapsed expand-row-body
     */
    bodyHasBackground: {
      type: Boolean,
      default: !0
    },
    /**
     * Set this to `true` if the row should be in expanded state.
     */
    isExpanded: {
      type: Boolean,
      default: !1
    },
    /**
     * Lets you specify if the row is selectable. If `true`, a check box appears
     * on the left side. The `isSelected` prop determines whether the check box is
     * actually selected or not.
     */
    isSelectable: {
      type: Boolean,
      default: !1
    },
    /**
     * Lets you specify if the row is currently selected.
     */
    isSelected: {
      type: Boolean,
      default: !1
    }
  },
  data() {
    return {
      id: null,
      isExpandedInternal: !1,
      isSelectedInternal: !1
    };
  },
  computed: {
    hasIconSlot() {
      return !!this.$slots.icon;
    }
  },
  watch: {
    /**
     * watch for expanded/collapsed state changes from outside
     * @param {boolean} val - the prop value set from outside
     */
    isExpanded(t) {
      this.isExpandedInternal = t;
    },
    /**
     * watch for select state changes from outside
     * @param {boolean} val - the prop value set from outside
     */
    isSelected(t) {
      this.isSelectedInternal = t;
    }
  },
  created() {
    this.id = this._uid, this.isSelectedInternal = this.isSelected, this.isExpandedInternal = this.isExpanded;
  },
  methods: {
    clicked() {
      this.isExpandedInternal = !this.isExpandedInternal, this.$emit("expanded", this.isExpandedInternal);
    },
    checkboxClicked() {
      this.isSelectedInternal = !this.isSelectedInternal, this.$emit("selected", this.isSelectedInternal);
    }
  }
};
var i = function() {
  var e = this, a = e._self._c;
  return a("div", { class: [
    "base-expand-row",
    { "base-expand-row--expandable": e.expandable },
    { "base-expand-row--expanded": e.isExpandedInternal }
  ] }, [a("div", { staticClass: "base-expand-row-header", attrs: { id: "base-expand-row-" + e.id, "aria-expanded": e.expandable ? e.isExpandedInternal.toString() : null } }, [e.isSelectable ? a("BaseCheckmark", { key: e.id + "checkmark", staticClass: "base-expand-row-checkbox", attrs: { title: "checkbox", "mark-style": "checkbox", checked: e.isSelected }, on: { clicked: e.checkboxClicked } }) : e._e(), a(e.expandable ? "button" : "div", { tag: "component", class: ["base-expand-row-button", { selectable: e.isSelectable }], attrs: { type: e.expandable ? "button" : null }, on: { click: function(c) {
    e.expandable && e.clicked();
  } } }, [e.icon || e.hasIconSlot ? a("div", { staticClass: "base-expand-row-icon" }, [e._t("icon", function() {
    return [a("BaseIcon", { attrs: { name: e.icon, title: "open" } })];
  })], 2) : e._e(), a("div", { staticClass: "base-expand-row-title-subtitle-wrapper" }, [a("div", { staticClass: "base-expand-row-title base-text-fade-out" }, [e._v(" " + e._s(e.title) + " ")]), e.subtitle ? a("div", { staticClass: "base-expand-row-subtitle base-text-fade-out" }, [e._v(" " + e._s(e.subtitle) + " ")]) : e._e()]), e.expandable ? a("BaseIcon", { staticClass: "base-expand-row-collapse-icon", attrs: { name: "drop-down", title: "open" } }) : e._e()], 1)], 1), a("div", { class: ["base-expand-row-body", { "base-expand-row-body-bg": e.bodyHasBackground }], attrs: { role: "region", "aria-labelledby": "base-expand-row-" + e.id, "aria-hidden": e.isExpandedInternal ? "false" : "true" } }, [e._t("default")], 2)]);
}, o = [], r = /* @__PURE__ */ d(
  l,
  i,
  o,
  !1,
  null,
  "42c293df",
  null,
  null
);
const h = r.exports;
export {
  h as default
};
//# sourceMappingURL=BaseExpandRow.vue.es.js.map
