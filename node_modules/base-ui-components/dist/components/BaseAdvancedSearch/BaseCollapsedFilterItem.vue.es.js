import a from "../BaseChip/BaseChip.vue.es.js";
import l from "../BaseIcon/BaseIcon.vue.es.js";
import "./BaseCollapsedFilterItem.vue.es2.js";
import o from "../../_virtual/_plugin-vue2_normalizer.es.js";
const r = {
  name: "BaseCollapsedFilterItem",
  components: {
    BaseIcon: l,
    BaseChip: a
  },
  props: {
    /**
     * the chip object to be displayed. Needs to be an object with idInternal (optional) and labelInternal
     */
    value: {
      type: [Object],
      required: !0,
      validator: (i) => Object.keys(i).includes("labelInternal")
    },
    /**
     * the `field_type` of the form field for which the chip should be displayed
     */
    type: {
      type: String,
      default: "text"
    },
    /**
     * for date and time ranges it needs to be determined if a 'until' character should
     *  be displayed
     */
    rangeIndicator: {
      type: String,
      default: "from"
    },
    /**
     * needed for cursor styling if over chips if list is scrollable
     */
    isScrolling: {
      type: Boolean,
      default: !1
    },
    /**
     * needed for cursor styling if over chips
     */
    scrollable: {
      type: Boolean,
      default: !1
    },
    /**
     * if necessary selected chip text can be rendered as v-html directive
     * will only be applied to values with `idInternal`
     */
    interpretLabelAsHtml: {
      type: Boolean,
      default: !1
    },
    /**
     * provide assistive text for boolean values and to inform user of chip
     * removal options
     *
     * **booleanFilterLabel**: Set text that should be read for a boolean filter value. You may add
     *  the string {label} which will be replaced by the filter label.
     * **optionToRemoveSelected**: text read when an option is focused (and thus selected), should
     *  announce to the screen reader user that option can now be removed via Backspace or Delete.
     *  You may add the string {label} which will be replaced by the filter label.
     */
    assistiveText: {
      type: Object,
      default: () => ({
        booleanFilterLabel: "Filter was set.",
        optionToRemoveSelected: "Press delete or backspace to remove."
      })
    }
  },
  computed: {
    /**
     * is the type of the value to be displayed boolean
     * @returns {boolean}
     */
    isBoolean() {
      return this.type === "boolean";
    },
    isDateOrTimeRange() {
      return ["date", "time"].includes(this.type) && this.rangeIndicator;
    },
    /**
     * does the provided value exist and have a labelInternal
     * @returns {boolean}
     */
    hasValue() {
      return !!this.value && !!this.value.labelInternal;
    },
    /**
     * need to overwrite chips styling cursor and user-select in case
     *  row is scrollable - if not return empty object
     * @returns {{cursor: (string), userSelect: (string)}|{}}
     */
    chipStyling() {
      return this.scrollable ? {
        cursor: this.isScrolling ? "grabbing" : "grab",
        userSelect: this.isScrolling ? "none" : "unset"
      } : {};
    },
    filterItemLabel() {
      return this.isBoolean && this.assistiveText.booleanFilterLabel && this.assistiveText.optionToRemoveSelected ? `${this.assistiveText.booleanFilterLabel}. ${this.assistiveText.optionToRemoveSelected}` : this.isBoolean && this.assistiveText.booleanFilterLabel ? this.assistiveText.booleanFilterLabel : !this.isBoolean && this.assistiveText.optionToRemoveSelected ? `${this.value.labelInternal}. ${this.assistiveText.optionToRemoveSelected}` : this.value.labelInternal.toString();
    }
  },
  methods: {
    /**
     * propagate to parent when the remove icon was clicked
     */
    removeChip(i) {
      const { type: e, key: t } = i;
      (e !== "keydown" || e === "keydown" && ["Backspace", "Delete"].includes(t)) && this.$emit("remove-chip");
    }
  }
};
var n = function() {
  var e = this, t = e._self._c;
  return t("div", { ref: "filterChip", staticClass: "base-collapsed-filter-item", attrs: { role: "listitem", tabindex: "0" }, on: { keydown: e.removeChip } }, [e.isDateOrTimeRange ? t("span", { staticClass: "base-collapsed-filter-item__until" }, [e._v(" " + e._s(e.rangeIndicator) + " ")]) : e._e(), !e.isBoolean && e.hasValue ? t("BaseChip", { staticClass: "base-collapsed-filter-item__chip", attrs: { entry: e.value.labelInternal, "is-linked": !0, "text-styling": e.chipStyling, "interpret-text-as-html": e.interpretLabelAsHtml && !!e.value.idInternal, "assistive-text": e.filterItemLabel }, on: { "remove-entry": e.removeChip } }) : e.isBoolean && e.hasValue ? t("div", { staticClass: "base-collapsed-filter-item__chip base-collapsed-filter-item__boolean-value" }, [t("BaseIcon", { staticClass: "base-collapsed-filter-item__icon", attrs: { title: e.filterItemLabel, name: "check-mark" } }), t("BaseIcon", { staticClass: "base-collapsed-filter-item__icon-remove", attrs: { name: "remove" }, nativeOn: { click: function(s) {
    return s.stopPropagation(), e.removeChip.apply(null, arguments);
  } } })], 1) : e._e()], 1);
}, c = [], p = /* @__PURE__ */ o(
  r,
  n,
  c,
  !1,
  null,
  "1b61f02a",
  null,
  null
);
const h = p.exports;
export {
  h as default
};
//# sourceMappingURL=BaseCollapsedFilterItem.vue.es.js.map
