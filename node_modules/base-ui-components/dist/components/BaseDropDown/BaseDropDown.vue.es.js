import { debounce as i } from "../../utils/utils.es.js";
import a from "vue-click-outside";
import l from "../../mixins/i18n.es.js";
import d from "../BaseIcon/BaseIcon.vue.es.js";
import "./BaseDropDown.vue.es2.js";
import p from "../../_virtual/_plugin-vue2_normalizer.es.js";
const c = {
  name: "BaseDropDown",
  components: {
    BaseIcon: d
  },
  directives: {
    ClickOutside: a
  },
  mixins: [
    l
  ],
  model: {
    prop: "selectedOption",
    event: "value-selected"
  },
  props: {
    /**
     * specify options to choose from
     *   needs to be an array with label and value properties
     */
    options: {
      type: Array,
      default: () => []
    },
    /**
     * label for the drop down, recommended to define for accessibility
     */
    label: {
      type: String,
      default: "Drop Down"
    },
    /**
     * placeholder appearing in select when no option was
     * selected
     */
    placeholder: {
      type: String,
      default: "Select"
    },
    /**
     * the selected value
     */
    selectedOption: {
      type: Object,
      default: () => ({ value: "", label: "" })
    },
    /**
     * define if label should be shown
     */
    showLabel: {
      type: Boolean,
      default: !1
    },
    /**
     * set the background color of drop down head
     */
    headerBackgroundColor: {
      type: String,
      default: "inherit"
    },
    /**
     * set a language (ISO 639-1)
     */
    language: {
      type: String,
      default: "",
      validator: (o) => !o || o.length === 2
    },
    /**
     * set the name of the property that holds the value
     */
    valueProp: {
      type: String,
      default: "value"
    },
    /**
     * flag to set drop down inactive
     */
    isDisabled: {
      type: Boolean,
      default: !1
    },
    /**
     * flag to disable spacing left and right
     * (needed for sidebar drop downs)
     */
    withSpacing: {
      type: Boolean,
      default: !0
    },
    /**
     * align drop down with left or right border
     */
    alignDropDown: {
      type: String,
      default: "left",
      validator(o) {
        return ["left", "right"].includes(o);
      }
    },
    /**
     * set id if drop down with this label appears more than once
     */
    id: {
      type: [String, Number],
      default: ""
    }
  },
  data() {
    return {
      showDropDown: !1,
      keySelectedIndex: -1,
      showFadeOut: !1,
      maxDropDownHeight: "0",
      resizeObserver: null
    };
  },
  computed: {
    selectedOptionInt() {
      return this.getLangLabel(this.selectedOption.label, !0) || this.placeholder || "";
    }
  },
  watch: {
    showDropDown(o) {
      if (o) {
        const e = window.innerHeight - this.$el.offsetTop - 120;
        this.maxDropDownHeight = `${e < 300 ? e : 300}px`;
      }
      o || (this.keySelectedIndex = -1);
    }
  },
  mounted() {
    this.initObserver();
  },
  beforeDestroy() {
    this.resizeObserver && this.resizeObserver.unobserve(this.$refs.baseDropdown);
  },
  methods: {
    initObserver() {
      const o = new ResizeObserver(i(50, () => this.setOverflow()));
      o.observe(this.$refs.baseDropdown), this.resizeObserver = o;
    },
    // event triggered by clicking on option or Enter after
    // selecting via keys
    selectValue(o) {
      this.showDropDown = !1, this.$emit("value-selected", o);
    },
    // adding key navigation for accessibility
    selectByKey(o) {
      const { key: e } = o;
      e === "Space" ? this.showDropDown = !this.showDropDown : this.showDropDown && (e === "ArrowUp" || o.shiftKey && e === "Tab") ? this.keySelectedIndex > 0 && (this.keySelectedIndex -= 1) : this.showDropDown && (e === "ArrowDown" || e === "Tab") ? this.keySelectedIndex < this.options.length - 1 && (this.keySelectedIndex += 1) : e === "Enter" ? this.showDropDown && this.keySelectedIndex >= 0 ? this.selectValue(this.options[this.keySelectedIndex]) : this.showDropDown = !this.showDropDown : e === "Escape" && (this.showDropDown = !1), this.$refs.option && this.$refs.option[this.keySelectedIndex] && this.$refs.dropdownContainer.scrollHeight !== this.$refs.dropdownContainer.clientHeight && this.$refs.option[this.keySelectedIndex].scrollIntoView({ block: "nearest", inline: "nearest" });
    },
    setOverflow() {
      const o = this.$refs.dropDownButton ? this.$refs.dropDownButton.getBoundingClientRect().width : 0, e = this.$refs.headText ? this.$refs.headText.getBoundingClientRect().width : 0;
      this.showFadeOut = e > o;
    }
  }
};
var h = function() {
  var e = this, s = e._self._c;
  return s("div", { directives: [{ name: "click-outside", rawName: "v-click-outside", value: () => e.showDropDown = !1, expression: "() => showDropDown = false" }], ref: "baseDropdown", staticClass: "base-drop-down" }, [s("div", { class: [
    "base-drop-down-label-wrapper",
    { hide: !e.getLangLabel(e.label, !0) || !e.showLabel }
  ] }, [s("label", { staticClass: "base-drop-down-label", attrs: { for: e.getLangLabel(e.label) + "-" + e.id } }, [e._v(" " + e._s(e.getLangLabel(e.label, !0)) + " ")])]), s("button", { class: ["base-drop-down-head", { "base-drop-down-head-spacing": e.withSpacing }], style: { "background-color": e.headerBackgroundColor }, attrs: { id: e.getLangLabel(e.label) + "-" + e.id, "aria-expanded": String(e.showDropDown), disabled: e.isDisabled, "aria-haspopup": "listbox", type: "button" }, on: { click: function(t) {
    t.preventDefault(), e.showDropDown = !e.showDropDown;
  }, keydown: [function(t) {
    return !t.type.indexOf("key") && e._k(t.keyCode, "enter", 13, t.key, "Enter") && e._k(t.keyCode, "esc", 27, t.key, ["Esc", "Escape"]) && e._k(t.keyCode, "down", 40, t.key, ["Down", "ArrowDown"]) && e._k(t.keyCode, "up", 38, t.key, ["Up", "ArrowUp"]) ? null : (t.preventDefault(), e.selectByKey.apply(null, arguments));
  }, function(t) {
    return !t.type.indexOf("key") && e._k(t.keyCode, "tab", 9, t.key, "Tab") ? null : e.selectByKey.apply(null, arguments);
  }] } }, [s("div", { ref: "dropDownButton", class: [
    "base-drop-down-head-text-wrapper",
    { "base-drop-down-head-text-fade-out": e.showFadeOut }
  ] }, [s("span", { ref: "headText", staticClass: "base-drop-down-head-text" }, [e._v(" " + e._s(e.selectedOptionInt) + " ")])]), e._t("header-right", function() {
    return [s("base-icon", { class: ["base-drop-down-icon", { "base-drop-down-icon-rotated": e.showDropDown }], attrs: { name: "drop-down" } })];
  })], 2), e.showDropDown ? s("div", { ref: "dropdownContainer", staticClass: "base-drop-down-body", style: { [e.alignDropDown]: 0, "max-height": e.maxDropDownHeight } }, [e._t("default", function() {
    return [s("ul", { staticClass: "base-drop-down-body-list", attrs: { "aria-labelledby": e.getLangLabel(e.label) + "-" + e.id, role: "listbox" } }, e._l(e.options, function(t, n) {
      return s("li", { key: t[e.valueProp], ref: "option", refInFor: !0, class: [
        "base-drop-down-option",
        {
          "base-drop-down-option-selected": e.selectedOption && t[e.valueProp] === e.selectedOption[e.valueProp]
        },
        { "base-drop-down-option-key-selected": e.keySelectedIndex === n }
      ], attrs: { role: "option", "aria-selected": (e.selectedOption && t[e.valueProp] === e.selectedOption[e.valueProp]).toString(), tabindex: "0" }, on: { keydown: [function(r) {
        return !r.type.indexOf("key") && e._k(r.keyCode, "enter", 13, r.key, "Enter") ? null : e.selectValue(t);
      }, function(r) {
        return !r.type.indexOf("key") && e._k(r.keyCode, "tab", 9, r.key, "Tab") ? null : e.selectByKey.apply(null, arguments);
      }], click: function(r) {
        return e.selectValue(t);
      } } }, [e._v(" " + e._s(e.getLangLabel(t.label, !0)) + " ")]);
    }), 0)];
  })], 2) : e._e()]);
}, u = [], w = /* @__PURE__ */ p(
  c,
  h,
  u,
  !1,
  null,
  "12d55f80",
  null,
  null
);
const m = w.exports;
export {
  m as default
};
//# sourceMappingURL=BaseDropDown.vue.es.js.map
