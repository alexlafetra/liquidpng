import d from "@babel/runtime/helpers/typeof";
import f from "@babel/runtime/helpers/slicedToArray";
var T = globalThis, j = function(t) {
  var r = t.split("/").map(function(n) {
    return n.slice(0, 1).toUpperCase() + n.slice(1);
  }).join("/");
  return r.split(" ").map(function(n) {
    return n.slice(0, 1).toUpperCase() + n.slice(1);
  }).join(" ");
}, S = function() {
  return Math.random().toString(36).substr(2, 9);
}, x = function(t, r) {
  return t.split(".").reduce(function(n, e) {
    if (n)
      return n[e];
  }, r);
}, p = function(t) {
  var r = t.replace(/,? [0-9-]+/g, "");
  if (r.includes(",")) {
    var n = r.split(", ");
    return [n[0], n.splice(1).join()];
  }
  var e = r.split(" ");
  return [e.pop(), r];
}, y = function(t) {
  var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "", n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, e = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
  return t.sort(function(c, u) {
    var a = c, i = u;
    if (r && (a = a[r], i = i[r]), e && (a = e(a), i = e(i)), n) {
      var s = "", g = "", l = p(a), h = f(l, 2);
      a = h[0], s = h[1];
      var m = p(i), v = f(m, 2);
      i = v[0], g = v[1], a.toLowerCase() === i.toLowerCase() && (a = s, i = g);
    }
    return a.toLowerCase() > i.toLowerCase() ? 1 : -1;
  });
}, C = function o(t) {
  var r = !1;
  if (t && d(t) === "object")
    if (t.length >= 0)
      t.forEach(function(e) {
        r = o(e) || r;
      });
    else {
      var n = Object.keys(t);
      n.forEach(function(e) {
        r = o(t[e]) || r;
      });
    }
  else
    r = t === 0 || !!t || r;
  return r;
}, E = function(t, r) {
  var n = 0;
  return function() {
    for (var e = arguments.length, c = new Array(e), u = 0; u < e; u++)
      c[u] = arguments[u];
    clearTimeout(n), n = setTimeout(function() {
      return r.apply(T, c);
    }, t);
  };
}, L = function(t) {
  var r = t.word, n = t.queryString, e = t.highlightTags, c = e === void 0 ? ["u", "strong"] : e, u = new RegExp(n, "ig"), a = "<".concat(c.join("><"), ">"), i = "</".concat(c.join("></"), ">");
  return r.toString().replace(u, function(s) {
    return "".concat(a).concat(s).concat(i);
  });
};
export {
  j as capitalizeString,
  S as createId,
  E as debounce,
  x as extractNestedPropertyValue,
  p as getNameSortValue,
  C as hasData,
  L as highlightText,
  y as sort
};
//# sourceMappingURL=utils.es.js.map
