import n from "../BaseTextList/BaseTextList.vue.es.js";
import "./BaseMapLocations.vue.es2.js";
import s from "../../_virtual/_plugin-vue2_normalizer.es.js";
const l = {
  name: "BaseMapLocations",
  components: {
    BaseMap: () => import("../BaseMap/BaseMap.vue.es.js").then((e) => e.default || e),
    BaseTextList: n
  },
  props: {
    /**
     * set additional styles for map e.g. height
     */
    additionalMapStyles: {
      type: Object,
      default: () => ({ height: "368px" })
    },
    /**
     * define map attribution
     */
    attribution: {
      type: String,
      default: "Source: <a href=https://openstreetmap.org/>OpenStreetMap contributors</a>"
    },
    /**
     * define position of map attribution
     *   @values topright, bottomleft, bottomright
     */
    attributionPosition: {
      type: String,
      default: "bottomright",
      validate(e) {
        return ["topright", "bottomleft", "bottomright"].includes(e);
      }
    },
    /**
     * define number of items for cluster sizes
     *   structure: `{ medium: 5, large: 20, xlarge: 100 }`
     *   Note: properties `medium`, `large`, `xlarge` are mandatory
     */
    clusterSizes: {
      type: Object,
      default: () => ({ medium: 5, large: 20, xlarge: 100 }),
      validator: (e) => e.medium && e.large && e.xlarge
    },
    /**
     * define map copyright
     */
    copyright: {
      type: String,
      default: "<a href=http://creativecommons.org/licenses/by-sa/3.0/>CC BY-SA 3.0</a>"
    },
    /**
     * define html code for a custom icon
     */
    icon: {
      type: String,
      // eslint-disable-next-line max-len
      default: '<svg viewBox="0 0 70.866 70.866" xmlns="http://www.w3.org/2000/svg"><path d="m35.433 0a22.731 22.731 0 0 0-22.731 22.82 24.125 24.125 0 0 0 1.872 9.1814l19.611 38.063a1.3718 1.3718 0 0 0 2.496 0l19.611-38.063a22.249 22.249 0 0 0 1.872-9.1814 22.731 22.731 0 0 0-22.731-22.82zm0 32.858a10.216 10.216 0 1 1 10.216-10.216 10.241 10.241 0 0 1-10.216 10.216z" fill="#010101"/></svg>'
    },
    /**
     * define icon size
     */
    iconSize: {
      type: Number,
      default: 32
    },
    /**
     * define label for the locations-list
     */
    label: {
      type: String,
      default: "Addresses"
    },
    /**
     * define locations
     *   structure: [{
     *     coordinates: [16.382782, 48.208309],
     *     latLng: [48.208309, 16.382782],
     *     data: [ 'University of Applied Arts', 'Oskar Kokoschka-Platz 2',
     *     '1010 Vienna', 'Austria']
     *   }]
     *   Note: either coordinates or latLng is mandatory
     */
    locations: {
      type: Array,
      default: () => [],
      validator: (e) => e.filter((t) => t.latLng || t.coordinates).length === e.length
    },
    /**
     * deactivate popups for marker
     */
    markerPopups: {
      type: Boolean,
      default: !0
    },
    /**
     * define max zoom factor
     */
    maxZoom: {
      type: Number,
      default: 18
    },
    /**
     * define custom options for map data
     *   e.g. {
     *          style: 'normal',
     *          subdomains: ['mapsneu'],
     *          tileMatrixSet: 'google3857',
     *          type: 'geolandbasemap'
     *   }
     *
     *   usage custom keys in `url` property:
     *   https://{s}.wien.gv.at/basemap/{type}/{style}/{tileMatrixSet}/{z}/{y}/{x}.png
     *
     *   for more information refer to the [Leaflet TileLayer documentation](https://leafletjs.com/reference.html#tilelayer)
     */
    options: {
      type: Object,
      default: () => ({})
    },
    /**
     * define url to tileLayer service
     */
    url: {
      type: String,
      default: ""
    },
    /**
     * specify service for the [tileLayer](https://leafletjs.com/examples/wms/wms.html)
     * @values WMTS, TMS, WMS'
     */
    tileLayerService: {
      type: String,
      default: "WMTS",
      validator(e) {
        return ["WMTS", "TMS", "WMS"].includes(e);
      }
    },
    /**
     * define initial zoom factor
     */
    zoom: {
      type: Number,
      default: 16
    }
  },
  data() {
    return {
      highlightedMarker: null,
      highlightedLocation: null,
      centeredMarker: null,
      initMap: !1
    };
  },
  computed: {
    // Observer to check if component is in viewport and show baseMap
    observer() {
      return new IntersectionObserver((e, t) => {
        e.forEach((r) => {
          r.isIntersecting && (t.unobserve(r.target), this.initMap = !0);
        });
      });
    },
    // compare marker objects and remove duplicates
    locationsFiltered() {
      return Array.from(new Set(this.locations.map(JSON.stringify))).map(JSON.parse);
    }
  },
  beforeDestroy() {
    this.observer.disconnect();
  },
  mounted() {
    this.observer.observe(this.$el);
  },
  methods: {
    highlightLocation(e) {
      this.highlightedLocation = e;
    },
    resetMarker() {
      this.highlightedMarker = null, this.centeredMarker = null;
    }
  }
};
var c = function() {
  var t = this, r = t._self._c;
  return r("div", { staticClass: "base-map-locations" }, [r("div", { staticClass: "base-map-locations__map", style: t.additionalMapStyles }, [t.initMap ? r("BaseMap", { style: t.additionalMapStyles, attrs: { attribution: t.attribution, "attribution-position": t.attributionPosition, "cluster-sizes": t.clusterSizes, copyright: t.copyright, "center-marker": t.centeredMarker, icon: t.icon, "icon-size": t.iconSize, "highlight-marker": t.highlightedMarker, marker: t.locationsFiltered, "marker-popups": t.markerPopups, "max-zoom": t.maxZoom, options: t.options, "tile-layer-service": t.tileLayerService, url: t.url, zoom: t.zoom }, on: { highlighted: t.highlightLocation } }) : t._e()], 1), t.label ? r("h2", { staticClass: "base-map-locations__label" }, [t._v(" " + t._s(t.label) + " ")]) : t._e(), r("div", { staticClass: "base-map-locations__list" }, [t._l(t.locationsFiltered, function(o, i) {
    return [o.latLng || o.coordinates ? r("BaseTextList", { key: i, class: [
      "base-map-locations__list__group",
      { "base-map-locations__list__group--highlight": i === t.highlightedLocation }
    ], attrs: { data: [o] }, nativeOn: { click: function(a) {
      t.centeredMarker = i;
    }, focusin: function(a) {
      t.highlightedMarker = i;
    }, mouseenter: function(a) {
      t.highlightedMarker = i;
    }, focusout: function(a) {
      return t.resetMarker.apply(null, arguments);
    }, mouseleave: function(a) {
      return t.resetMarker.apply(null, arguments);
    } } }) : t._e()];
  })], 2)]);
}, u = [], p = /* @__PURE__ */ s(
  l,
  c,
  u,
  !1,
  null,
  "290cbc43",
  null,
  null
);
const d = p.exports;
export {
  d as default
};
//# sourceMappingURL=BaseMapLocations.vue.es.js.map
