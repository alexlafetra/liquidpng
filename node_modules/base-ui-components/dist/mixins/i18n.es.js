const a = {
  computed: {
    /**
     * check if i18n plugin is available
     * @returns {boolean}
     */
    hasI18n: function() {
      return !!this.$i18n;
    }
  },
  methods: {
    /**
     * get the i18n term from json files present in your project - this works exactly like
     * vue-i18n except that the count variable can not be skipped if you want to use
     * named formatting
     *
     * @param {string} key - your locale file key
     * @param {number} count - your count number for pluralization
     * @param {object} variables - your object for named formatting - object property needs
     *  to be named like the localization file variable
     *  (https://kazupon.github.io/vue-i18n/guide/formatting.html)
     * @returns {string}
     */
    getI18nTerm: function(n) {
      var e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : -1, t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      if (!n)
        return "";
      if (this.hasI18n && this.$te(n))
        return e >= 0 ? this.$tc(n, e, t) : this.$t(n, t);
      var r = n.split(".");
      return r.pop() || n;
    },
    /**
     * function to provide an object with translations for all available languages
     * @param {string} key - the locale file key
     * @param {string[]} locales - an array of available locales
     * @returns {Object}
     */
    setLangLabels: function(n, e) {
      var t = this;
      return e.reduce(function(r, s) {
        return t.$set(r, s, t.$i18n ? t.$t(n, s) : n.split(".").pop()), r;
      }, {});
    },
    /**
     * function to
     * a) check if provided value is a language object and if yes
     * b) get the correct label from an object with language (ISO 639-1) as property
     *    (e.g. { de: 'yyy', en: 'xxx' })
     * @param {string|Object} value - the string or object to be processed
     * @param {boolean} useAny - specify if a label in a different language should be used
     *  if the currently set language has no result
     * @returns {Object|string}
     */
    getLangLabel: function(n) {
      var e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, t = this.hasI18n ? this.language || this.$i18n.locale : this.language;
      if (typeof n == "string")
        return n;
      if (n && t && n[t])
        return n[t];
      if (n && t && e) {
        var r = Object.keys(n).find(function(s) {
          return !!n[s];
        });
        return n[r] || n[t] || "";
      }
      return n;
    }
  }
};
export {
  a as default
};
//# sourceMappingURL=i18n.es.js.map
