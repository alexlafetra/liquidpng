import l from "../BaseIcon/BaseIcon.vue.es.js";
import n from "../BaseCheckmark/BaseCheckmark.vue.es.js";
import "./BaseMenuEntry.vue.es2.js";
import a from "../../_virtual/_plugin-vue2_normalizer.es.js";
const r = {
  name: "BaseMenuEntry",
  components: {
    BaseIcon: l,
    BaseCheckmark: n
  },
  props: {
    /**
     * An id to allow identification needs to be specified
     */
    entryId: {
      type: [Number, String],
      default: null,
      required: !0
    },
    /**
     * item main title
     * if prop `isSelectable` is true please always set this so
     * the checkbox has a label
     */
    title: {
      type: String,
      default: ""
    },
    /**
     * additional text displayed directly after title
     */
    subtext: {
      type: String,
      default: ""
    },
    /**
     * specifiy if item is active - which will display a border on right side
     * and title in bold
     */
    isActive: {
      type: Boolean,
      default: !1
    },
    /**
     * specify if item is selected - this will cause the included checkbox
     * to be checked
     */
    isSelected: {
      type: Boolean,
      default: !1
    },
    /**
     * specify an icon that is displayed before the title.
     * see [BaseIcon](BaseIcon) for available icons
     */
    icon: {
      type: String,
      default: ""
    },
    /**
     * Text displayed at the end of the item
     */
    description: {
      type: String,
      default: ""
    },
    /** control if the checkboxes are visible
     *
     */
    selectActive: {
      type: Boolean,
      default: !1
    },
    /**
     * define if entry is selectable - thus if checkboxes are available
     */
    isSelectable: {
      type: Boolean,
      default: !1
    },
    /**
     * define if entry is disabled - thus if checkboxes are available
     *   will overrule prop isSelectable
     */
    isDisabled: {
      type: Boolean,
      default: !1
    },
    /**
     * define if entry will be active upon click
     */
    isActivatable: {
      type: Boolean,
      default: !0
    },
    /**
     * define if title should be displayed in bold constantly
     */
    titleBold: {
      type: Boolean,
      default: !1
    },
    /**
     * define if thumbnail overlay should be shown
     */
    showThumbnails: {
      type: Boolean,
      default: !0
    }
  },
  data() {
    return {
      isSelectedInt: !1,
      // how many columns the thumbnail container takes
      columns: 0
    };
  },
  watch: {
    isSelected(s) {
      this.isSelectedInt = s;
    }
  },
  mounted() {
    this.setThumbnailColumns(), this.isSelectedInt = this.isSelected;
  },
  updated() {
    this.setThumbnailColumns();
  },
  methods: {
    clicked() {
      this.isDisabled || (this.selectActive ? (this.isSelectedInt = !this.isSelectedInt, this.$emit("selected", this.isSelectedInt)) : this.$emit("clicked"));
    },
    slideFadeLeave() {
      this.$refs.slideFade.$el.style.right = "1px";
    },
    slideFadeAfterLeave() {
      this.$refs.slideFade && this.$refs.slideFade.$el.style.removeProperty("right");
    },
    /**
     * Returns the count of columns that the thumbnail icons take.
     */
    setThumbnailColumns() {
      if (this.showThumbnails && this.$refs.thumbnailContainer) {
        const s = this.$refs.thumbnailContainer.childElementCount;
        this.columns = Math.ceil(s / 2);
      }
    }
  }
};
var c = function() {
  var e = this, t = e._self._c;
  return t("div", { ref: "menuEntry", class: [
    "base-menu-entry",
    {
      "base-menu-entry-activatable": e.isActivatable && !e.isDisabled,
      "base-menu-entry-active": e.isActive,
      "base-menu-entry-no-icon": !e.icon,
      "base-menu-entry-disabled": e.isDisabled,
      "base-menu-entry-text-fade-out": !e.showThumbnails && !e.$slots["right-side-elements"]
    }
  ], attrs: { tabindex: e.isSelectable && e.selectActive ? -1 : 0, href: "#" + e.title, role: e.isSelectable && e.selectActive ? "" : "link" }, on: { keyup: function(i) {
    return !i.type.indexOf("key") && e._k(i.keyCode, "enter", 13, i.key, "Enter") ? null : (i.preventDefault(), e.clicked.apply(null, arguments));
  }, click: e.clicked } }, [e.icon ? t("BaseIcon", { ref: "entryIcon", staticClass: "base-menu-entry-icon", attrs: { name: e.icon } }) : e._e(), t("div", { class: [
    "base-menu-entry-text-wrapper",
    { "base-menu-entry-text-slide-overlay": e.showThumbnails && e.$slots.thumbnails && e.isSelectable }
  ] }, [e._t("text-content", function() {
    return [t("div", { staticClass: "base-menu-entry-title-description-wrapper" }, [t("div", { staticClass: "base-menu-entry__title-subtext-wrapper" }, [e.title ? t("div", { class: [
      "base-menu-entry-title",
      { "base-menu-entry-title-bold": e.isActive || e.titleBold }
    ] }, [e._v(" " + e._s(e.title) + " ")]) : e._e(), e.subtext ? t("div", { staticClass: "base-menu-entry-subtext" }, [e._v(" " + e._s(e.subtext) + " ")]) : e._e()]), t("div", { staticClass: "base-menu-entry-description" }, [e._v(" " + e._s(e.description) + " ")])])];
  })], 2), e._t("right-side-elements", function() {
    return [t("div", { staticClass: "base-menu-entry-transition-container base-menu-entry-text-fade-out" }, [t("TransitionGroup", { ref: "slideFade", staticClass: "slide-fade-group", attrs: { name: "slide-fade" }, on: { leave: e.slideFadeLeave, "after-leave": e.slideFadeAfterLeave } }, [e.showThumbnails ? t("div", { key: e.entryId + "thumbnail", ref: "thumbnailContainer", staticClass: "base-menu-entry-thumbnail-container", style: { "--cols": e.columns } }, [e._t("thumbnails")], 2) : e._e(), e.isSelectable && e.selectActive && !e.isDisabled ? t("BaseCheckmark", { key: e.entryId + "checkmark", staticClass: "base-menu-entry-checkbox", attrs: { checked: e.isSelected, label: e.title, title: "checkbox", "mark-style": "checkbox" }, on: { clicked: e.clicked } }) : e._e()], 1)], 1)];
  }, { isSelected: e.isSelectedInt })], 2);
}, d = [], o = /* @__PURE__ */ a(
  r,
  c,
  d,
  !1,
  null,
  "62016e3c",
  null,
  null
);
const h = o.exports;
export {
  h as default
};
//# sourceMappingURL=BaseMenuEntry.vue.es.js.map
