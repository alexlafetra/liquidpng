{"version":3,"file":"BaseChipsBelow.vue.es.js","sources":["../../../src/components/BaseChipsBelow/BaseChipsBelow.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"chipsBelow\"\n    class=\"base-chips-below\">\n    <BaseChipsInput\n      ref=\"chipsInput\"\n      v-model=\"selectedBelowListInt\"\n      v-bind=\"chipsInputProps\"\n      :close-dropdown-on-option-select=\"closeDropdownOnOptionSelect\"\n      :is-loading=\"isLoading\"\n      :display-chips-inline=\"false\"\n      :sort-text=\"sortText\"\n      :sort-name=\"sortName\"\n      :invalid=\"invalidInt\"\n      :error-message=\"errorMessageInt\"\n      @selected-changed=\"addedEntry\"\n      @fetch-dropdown-entries=\"fetchDropDownEntries\">\n      <template\n        #drop-down-entry=\"props\">\n        <!-- @slot a slot to provide customized drop down options\n          @binding {Object} item - an option in the options list  -->\n        <slot\n          :item=\"props.item\"\n          name=\"drop-down-entry\" />\n      </template>\n      <template\n        #label-addition>\n        <!-- @slot Slot to allow for additional elements on the right side of the label row <div> (e.g. language tabs)). for an example see [BaseChipsInputField](BaseChipsInputField) -->\n        <slot name=\"label-addition\" />\n      </template>\n      <template\n        #input-field-addition-before>\n        <!-- @slot Slot to allow for additional elements in the input field <div> (before <input>). for an example see [BaseChipsInputField](BaseChipsInputField) -->\n        <slot name=\"input-field-addition-before\" />\n      </template>\n      <template #input-field-addition-after>\n        <!-- @slot for adding elements after input -->\n        <slot name=\"input-field-addition-after\" />\n      </template>\n      <template #post-input-field>\n        <!-- @slot for adding elements at the end covering the whole height. for an example see [BaseChipsInputField](BaseChipsInputField)-->\n        <slot name=\"post-input-field\" />\n      </template>\n      <template #error-icon>\n        <!-- @slot use a custom icon instead of standard error/warning icon. for an example see [BaseChipsInputField](BaseChipsInputField)-->\n        <slot name=\"error-icon\" />\n      </template>\n      <template #remove-icon>\n        <!-- @slot use a custom icon instead of standard remove icon. for an example see [BaseChipsInputField](BaseChipsInputField)-->\n        <slot name=\"remove-icon\" />\n      </template>\n      <template\n        #no-options>\n        <!-- @slot a slot to customize messages in case of no options present in drop down -->\n        <slot\n          name=\"no-options\" />\n      </template>\n      <!-- @slot to add elements below input fields e.g. add drop down; will appear before the\n        chosen chips list -->\n      <template #below-input>\n        <slot name=\"below-input\" />\n      </template>\n    </BaseChipsInput>\n    <draggable\n      v-model=\"selectedBelowListInt\"\n      :animation=\"200\"\n      :force-fallback=\"!isDragDropCapable\"\n      :fallback-on-body=\"!isDragDropCapable\"\n      :group=\"{ name: 'people' }\"\n      handle=\".base-chips-below-list-icon-wrapper\"\n      @end=\"updateList($event, selectedBelowListInt)\">\n      <div\n        v-for=\"(entry, index) in selectedBelowListInt\"\n        :key=\"'item' + entry.idInt\"\n        :name=\"entry[labelPropertyName]\"\n        :class=\"['base-chips-below-list-item',\n                 { 'base-chips-below-list-item--draggable': draggable }]\"\n        @mousedown=\"chipActive = index\">\n        <div\n          :key=\"'line' + entry.idInt\"\n          class=\"base-chips-below-list-item-line\">\n          <div\n            v-if=\"draggable\"\n            :key=\"'iconwrapper' + entry.idInt\"\n            class=\"base-chips-below-list-icon-wrapper\">\n            <base-icon\n              :key=\"'icon' + entry.idInt\"\n              name=\"drag-lines\"\n              class=\"svg-icon base-chips-below-list-icon\" />\n          </div>\n          <div\n            :key=\"'chip-wrapper' + entry.idInt\"\n            class=\"base-chips-below-list-item-chip-wrapper\">\n            <BaseChip\n              :id=\"'chips-below' + index\"\n              ref=\"selectedChip\"\n              :key=\"'chip' + entry.idInt\"\n              v-model=\"entry[labelPropertyName]\"\n              :is-linked=\"!entry.edited && (entry[identifierPropertyName] === 0\n                || !!entry[identifierPropertyName])\"\n              :hover-box-content=\"hoverboxContent\"\n              class=\"base-chips-input-chip\"\n              @value-changed=\"modifyChipValue($event, index)\"\n              @hoverbox-active=\"hoverBoxActive($event, entry)\"\n              @remove-entry=\"removeEntry($event, index)\" />\n          </div>\n          <BaseChipsInput\n            :id=\"`${id}_${additionalPropertyName}_${entry[identifierPropertyName] || entry.idInt}`\"\n            :key=\"'input_' + entry.idInt\"\n            v-model=\"entry[additionalPropertyName]\"\n            :show-label=\"false\"\n            :label=\"label + '-' + additionalPropertyName\"\n            :list=\"additionalPropOptions\"\n            :show-input-border=\"false\"\n            :allow-dynamic-drop-down-entries=\"false\"\n            :placeholder=\"additionalPropPlaceholder\"\n            :always-linked=\"true\"\n            :language=\"language\"\n            :draggable=\"true\"\n            :drop-down-no-options-info=\"dropDownNoOptionsInfo\"\n            :identifier-property-name=\"identifierPropertyName\"\n            :label-property-name=\"labelPropertyName\"\n            :invalid=\"isInvalidAdditionalOption(entry[labelPropertyName], index)\"\n            :error-message=\"additionalOptionsErrorMessage(entry[labelPropertyName], index)\"\n            :allow-multiple-entries=\"additionalPropAllowMultipleEntries\"\n            :chips-removable=\"isChipsRemovable(entry[additionalPropertyName])\"\n            :show-error-icon=\"showErrorIcon\"\n            :required=\"additionalPropRequired\"\n            :default-entry=\"additionalPropDefaultOption\"\n            class=\"base-chips-below-chips-input\"\n            @selected-changed=\"updateAdditionalProperty($event, index)\" />\n        </div>\n      </div>\n    </draggable>\n  </div>\n</template>\n\n<script>\nimport Draggable from 'vuedraggable';\nimport { ref } from 'vue';\nimport { useAnnouncer } from '@/composables/useAnnouncer';\nimport BaseIcon from '../BaseIcon/BaseIcon';\nimport BaseChipsInput from '../BaseChipsInput/BaseChipsInput';\nimport BaseChip from '../BaseChip/BaseChip';\n\n/**\n * A very specialized component based on [BaseChipsInput](BaseChipsInput)\n * in order to assign additional values (e.g. roles) to selected entries)]\n *\n */\n\nexport default {\n  name: 'BaseChipsBelow',\n  components: {\n    BaseChipsInput,\n    Draggable,\n    BaseChip,\n    BaseIcon,\n  },\n  model: {\n    prop: 'selectedList',\n    event: 'selected-changed',\n  },\n  props: {\n    /**\n     * list of selectable options objects with at least an identifier and a label property.\n     * property names can be set with props `identifierPropertyName` and `labelPropertyName`\n     */\n    list: {\n      type: Array,\n      default: () => [],\n    },\n    /**\n     * list of already selected options objects with at least an identifier and a label property\n     * and a property to use for the secondary drop down ('additional property'), displayed as\n     * chips.\n     * property names can be set with props `identifierPropertyName`, `labelPropertyName` and\n     * `additionalPropertyName`\n     */\n    selectedList: {\n      type: Array,\n      default: () => [],\n    },\n    /**\n     if field is occurring more than once - set an id\n     */\n    id: {\n      type: String,\n      default: '',\n    },\n    /**\n     * input field label\n     */\n    label: {\n      type: String,\n      required: true,\n    },\n    /**\n     * define if label should be visible\n     */\n    showLabel: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * input field placeholder\n     */\n    placeholder: {\n      type: String,\n      default: null,\n    },\n    /**\n     * message displayed when no selectable options are available\n     */\n    dropDownNoOptionsInfo: {\n      type: String,\n      default: 'No options available',\n    },\n    /**\n     * define if the user can add an option that is not in the list\n     */\n    // can the user add Entries that are not available in the vocabulary (selectable list)\n    allowUnknownEntries: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * define whether one or more entries can be selected from the drop-down menu\n     */\n    allowMultipleEntries: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * define if selectable list options should be fetched every time of if the\n     * list passed in the beginning is used\n     */\n    allowDynamicDropDownEntries: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * this prop was added because there was some action needed to be done before entry was added\n     * so this is possible if entry is not added to selectedList directly but only in parent\n     * component\n     */\n    addSelectedEntryDirectly: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * define whether one or more options can be selected from the drop-down menu\n     */\n    additionalPropAllowMultipleEntries: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * Additional property options will set the drop down available for the selected entries\n     * needs to be an object with following attributes:\n     * **label|*** `string`: the label of the default option - use the property name set via prop `labelPropertyName`\n     * **id|*** `string?`: (optional) identifier of the default option - use the property name set via prop `identifierPropertyName`\n     */\n    additionalPropOptions: {\n      type: Array,\n      default: () => [],\n    },\n    /**\n     * define a default option for additional props\n     * see `defaultEntry` at [BaseChipsInput props](BaseChipsInput) for more details\n     */\n    additionalPropDefaultOption: {\n      type: [Object, null],\n      default: null,\n    },\n    /**\n     * specify additional options as required\n     */\n    additionalPropRequired: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * specify a placeholder of the additional property input field\n     */\n    additionalPropPlaceholder: {\n      type: String,\n      default: 'Select role(s)',\n    },\n    /**\n     * define validation messages\n     */\n    validationTexts: {\n      type: Object,\n      default: () => ({\n        required: 'Select an option.',\n      }),\n      // checking if all necessary properties are part of the provided object\n      validator: val => ['required'].every(prop => Object.keys(val).includes(prop)),\n    },\n    /**\n     * set content for the info box activatable by click\n     * see [BaseHoverBox](BaseHoverBox) for more details\n     */\n    hoverboxContent: {\n      type: Object,\n      default: () => ({}),\n    },\n    /**\n     * show spinner to indicate that something is loading.\n     *  This is meant for dynamically fetching entries from a backend and will only\n     *  have an effect if prop `allowDynamicDropDownEntries` is set true!\n     */\n    isLoading: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * if sorting is enabled this will be the text shown in the button\n     */\n    sortText: {\n      type: String,\n      default: 'Sort A – Z',\n    },\n    /**\n     * if `true` sorting will consider the last string in a label or if a comma is\n     * present the string before the comma\n     */\n    sortName: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * set a language (ISO 639-1)\n     */\n    language: {\n      type: String,\n      default: '',\n    },\n    /**\n     * set a chips text for adding a new chip\n     * (alternatively add a 'form.Add' value to your localization files).\n     * if `allowUnknownEntries` is `true` please add this in one form or another!\n     */\n    addNewChipText: {\n      type: String,\n      default: '',\n    },\n    /**\n     * specify the object property that should be used as identifier\n     */\n    identifierPropertyName: {\n      type: String,\n      default: 'id',\n    },\n    /**\n     * specify the object property that should be used as value to be displayed\n     */\n    labelPropertyName: {\n      type: String,\n      default: 'label',\n    },\n    /**\n     * define the name of the property that is relevant for the additional drop down\n     * once a value was selected from the primary drop down\n     */\n    additionalPropertyName: {\n      type: String,\n      default: 'roles',\n    },\n    /**\n     * mark as required field\n     */\n    required: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * mark the form field as invalid and ideally also provide an error message\n     * to display below the form field.\n     * for an example see [BaseInput](BaseInput)\n     */\n    invalid: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * set `true` if input field should be disabled.\n     * for an example see [BaseInput](BaseInput)\n     */\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * add an error message to be displayed below form field if field is invalid\n     * for an example see [BaseInput](BaseInput)\n     */\n    errorMessage: {\n      type: String,\n      default: '',\n    },\n    /**\n     * define if error icon should be shown.\n     * for an example see [BaseInput](BaseInput)\n     */\n    showErrorIcon: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * if true a remove icon will be shown allowing to remove\n     * all input at once.\n     * for an example see [BaseInput](BaseInput)\n     */\n    clearable: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * set `false` if dropdown should be still open after selecting an option\n     */\n    closeDropdownOnOptionSelect: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * specify additional input field styling\n     */\n    inputClass: {\n      type: String,\n      default: '',\n    },\n    /**\n     * define if a button for sorting the entries is visible\n     */\n    sortable: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * define if chips should be draggable\n     */\n    draggable: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * set this flag to `true` to highlight autocomplete option characters that match\n     *  the current search input string\n     *  this will only have effect when the slot `drop-down-entry` is not used\n     */\n    highlightStringMatch: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * if `highlightAutocompleteMatch` is set `true`\n     *  provide tag names to style the matched characters\n     *  (without '<' and '>', e.g. ['b'] for <b>)\n     *  this will only have effect when the slot `drop-down-entry` is not used\n     */\n    highlightStringTags: {\n      type: Array,\n      default: () => ([]),\n    },\n    /**\n     * this prop gives the option to add assistive text for screen readers\n     * properties:\n     * **loaderActive**: text that is announced when results are being fetched (prop\n     *  `isLoading` is set `true`)\n     * **resultsRetrieved**: text that is announced when results were retrieved (drop down\n     *  list changed)\n     * **optionAdded**: text read when option was added to the selected list. string {label}\n     *  could be added to be replaced by the actual chip label (value in [`labelPropertyName`])\n     * **optionRemoved**: text read when option was removed from the selected list. string {label}\n     *  could be added to be replaced by the actual chip label (value in [`labelPropertyName`])\n     */\n    assistiveText: {\n      type: Object,\n      default: () => ({\n        loaderActive: 'loading.',\n        resultsRetrieved: '{number} options in drop down.',\n        optionAdded: 'option {label} added to selected list.',\n        optionRemoved: 'option {label} removed.',\n      }),\n    },\n  },\n  setup() {\n    /**\n     * set up component reference\n     * @type {Ref<UnwrapRef<null|HTMLElement>>}\n     */\n    const chipsBelow = ref(null);\n    // use composable to announce screen reader text on actions taken (e.g.\n    // add chip to selected list or remove chip\n    const { announcement } = useAnnouncer(chipsBelow);\n    return {\n      chipsBelow,\n      announcement,\n    };\n  },\n  data() {\n    return {\n      chipsArray: [],\n      selectedBelowListInt: [],\n      chipActive: -1,\n      // error handling\n      invalidInt: false,\n      errorMessageInt: '',\n      additionalPropErrors: [],\n    };\n  },\n  computed: {\n    // need to filter language from $props for chips input component since only needed for\n    // additional property (roles)!\n    // leads to unwanted behaviour else (creating multilang object)\n    chipsInputProps() {\n      const newProps = { ...this.$props };\n      delete newProps.language;\n      // also remove additional property related props since unknown to chips input component\n      delete newProps.additionalPropOptions;\n      delete newProps.additionalPropPlaceholder;\n      delete newProps.additionalPropertyName;\n      return newProps;\n    },\n    isDragDropCapable() {\n      if (window) {\n        // TODO: due to vue draggable safari related bug\n        //  https://github.com/SortableJS/Vue.Draggable/issues/743 we need to check\n        // specifically for safari to use forceFallback true for Safari browsers\n        const isSafari = navigator.vendor && navigator.vendor.indexOf('Apple') > -1\n          && navigator.userAgent\n          // leaving chrome check in since it is currently working with forceFallback true\n          && navigator.userAgent.indexOf('CriOS') === -1;\n          // taking firefox out since it it is not working anymore with forceFallback true\n          // and need to check first if it is also affected by the Safari bug.\n          // && navigator.userAgent.indexOf('FxiOS') === -1;\n        return !isSafari && 'DragEvent' in window;\n      }\n      return false;\n    },\n  },\n  watch: {\n    /**\n     * create internal list and reset errors\n     * @param {Object[]} val\n     */\n    selectedList: {\n      handler(val) {\n        this.createInternalList(val);\n        // reset error\n        if (val.length) {\n          // reset the invalid state but still respect any invalid state set from outside\n          this.invalidInt = this.invalid;\n          this.errorMessageInt = this.errorMessage;\n        }\n        // check if allowUnknownEntries are allowed and reset errors,\n        // due new entries do not have an id set initially and\n        // the error matching with index breaks\n        if (this.allowUnknownEntries\n          && this.additionalPropErrors.length) {\n          this.additionalPropErrors = [];\n        }\n      },\n      immediate: true,\n    },\n    /**\n     * keep externally set invalid variable and internal invalid variable in sync\n     * @param {boolean} val\n     */\n    invalid: {\n      handler(val) {\n        this.invalidInt = val;\n      },\n      immediate: true,\n    },\n    /**\n     * keep externally set error message variable and internal error message variable in sync\n     * @param {string} val\n     */\n    errorMessage: {\n      handler(val) {\n        this.errorMessageInt = val;\n      },\n      immediate: true,\n    },\n    /**\n     * reset the invalid status when the required property is externally set to false.\n     * @param {boolean} val\n     */\n    required: {\n      handler(val) {\n        if (!val) {\n          // reset but still consider state set from outside\n          this.invalidInt = this.invalid;\n          this.errorMessageInt = this.errorMessage;\n        }\n      },\n    },\n    /**\n     * reset the additional prop errors when property is externally set to false.\n     * @param {boolean} val\n     */\n    additionalPropRequired: {\n      handler(val) {\n        if (!val) {\n          this.additionalPropErrors = [];\n        }\n      },\n    },\n  },\n  methods: {\n    addedEntry(list) {\n      this.emitInternalList(list.map((entry) => {\n        if (typeof entry === 'object') {\n          return {\n            ...entry,\n            [this.additionalPropertyName]: entry[this.additionalPropertyName] || [],\n          };\n        }\n        return {\n          ...{\n            [this.labelPropertyName]: entry,\n            [this.additionalPropertyName]: entry[this.additionalPropertyName] || [],\n          },\n        };\n      }));\n    },\n    removeEntry(evt, index) {\n      const item = this.selectedBelowListInt.splice(index, 1);\n      this.$set(item, this.additionalPropertyName, {});\n      this.emitInternalList(this.selectedBelowListInt);\n      // inform screen reader user\n      this.announcement = this.assistiveText.optionRemoved\n        .replace('{label}', item[0][this.labelPropertyName]);\n    },\n    updateList(evt, list) {\n      this.emitInternalList(list);\n    },\n    updateAdditionalProperty(evt, index) {\n      this.$set(this.selectedBelowListInt[index], this.additionalPropertyName, evt);\n      this.emitInternalList(this.selectedBelowListInt);\n      this.isValidAdditionalOptions(this.selectedBelowListInt[index]);\n      /**\n       * propagate additional-property-changed change event to parent\n       * Note: useful when validation is done from the parent\n       *\n       * @event additional-property-changed\n       * @param {Object} obj - changed object\n       */\n      this.$emit('additional-property-changed', this.selectedList[index]);\n    },\n    createInternalList(val) {\n      this.selectedBelowListInt = val.map((entry, index) => {\n        if (typeof entry === 'object') {\n          return {\n            ...{\n              [this.additionalPropertyName]: [],\n              idInt: this.identifierPropertyName && (entry[this.identifierPropertyName] === 0\n              || entry[this.identifierPropertyName])\n                ? entry[this.identifierPropertyName] : entry[this.labelPropertyName] + index,\n            },\n            ...entry,\n          };\n        }\n        return {\n          ...{\n            [this.labelPropertyName]: entry,\n            idInt: this.list.length + index,\n            [this.additionalPropertyName]: [],\n          },\n        };\n      });\n    },\n    emitInternalList(val) {\n      const sendArr = [];\n      val.forEach((sel, index) => this.$set(sendArr, index, { ...sel }));\n      sendArr.forEach(sel => this.$delete(sel, 'idInt'));\n      /**\n       * propagate list change from dragging event to parent\n       *\n       * @event selected-changed\n       * @param {Object} - the altered list\n       *\n       */\n      this.$emit('selected-changed', sendArr);\n    },\n    modifyChipValue(event, index) {\n      if (!event) {\n        this.selectedBelowListInt.splice(index, 1);\n      } else {\n        const modifiedEntry = { ...this.selectedBelowListInt[index] };\n        if (this.identifierPropertyName) {\n          this.$set(modifiedEntry, this.identifierPropertyName, '');\n        }\n        this.$set(modifiedEntry, this.labelPropertyName, event);\n        this.$set(this.selectedBelowListInt, index, modifiedEntry);\n      }\n      this.emitInternalList(this.selectedBelowListInt);\n    },\n    fetchDropDownEntries(params) {\n      /**\n       * if drop down entries dynamically set - fetch new entries on input\n       *\n       * @event fetch-dropdown-entries\n       * @property {string} value - the input string\n       * @property {string} type - the `labelPropertyName` that was specified\n       *\n       */\n      this.$emit('fetch-dropdown-entries', params);\n    },\n    hoverBoxActive(value, entry) {\n      /**\n       * event emitted on show / hide hoverbox\n       * @event hoverbox-active\n       * @property {boolean} value - value describing if hoverbox active is `true` or `false`\n       * @property {Object} option - the option for which the hoverbox was activated\n       */\n      this.$emit('hoverbox-active', { value, entry });\n    },\n    /**\n     * get additional options error message\n     * @param {string} id - objects id\n     * @param {number} index - index in selectedList (needed for unknown entries)\n     * @returns {string}\n     */\n    additionalOptionsErrorMessage(id, index) {\n      if (this.additionalPropErrors.filter(obj => obj.id === id).length\n            || typeof this.additionalPropErrors[index] !== 'undefined') {\n        return this.validationTexts.required;\n      }\n      return '';\n    },\n    /**\n     * check if chips should be removable\n     * @param {Object} obj\n     * @returns {boolean}\n     */\n    isChipsRemovable(obj) {\n      return !this.additionalPropRequired\n        || (!!this.additionalPropAllowMultipleEntries && obj.length > 1);\n    },\n    /**\n     * validate chips input field\n     * @returns {boolean} - error state\n     */\n    isValidChipsInput() {\n      // if not set do anything\n      if (!this.required) return true;\n\n      // if no chips set, throw error\n      if (!this.selectedList.length) {\n        this.invalidInt = true;\n        // consider also optional errorMessage\n        this.errorMessageInt = `${this.errorMessage} ${this.validationTexts.required}`.trim();\n        return false;\n      }\n      // otherwise everything is fine\n      return true;\n    },\n    /**\n     * check if a single additional option is invalid\n     * @param {string} id\n     * @param {number} index\n     * @returns {boolean}\n     */\n    isInvalidAdditionalOption(id, index) {\n      return !!this.additionalPropErrors.filter(obj => obj.id === id).length\n        || typeof this.additionalPropErrors[index] !== 'undefined';\n    },\n    /**\n     * validate single or all additional option or all from selectedList\n     * @param {object|null} obj - single row object (optional)\n     * @returns {boolean} - valid state\n     */\n    isValidAdditionalOptions(obj) {\n      // if not set do anything\n      if (!this.additionalPropRequired) return true;\n\n      // validate single additional option\n      // if a chip is set (should always be if obj is specified)\n      if (obj && obj[this.additionalPropertyName].length) {\n        // remove the current object from the errors array\n        this.additionalPropErrors = this.additionalPropErrors\n          .filter(item => item.id !== obj.id);\n        // return validation state\n        return true;\n      }\n\n      // validate all selected entries and set errors\n      this.additionalPropErrors = this.selectedList\n        .filter(entry => !entry[this.additionalPropertyName] || !entry[this.additionalPropertyName].length)\n        .map(entry => ({ id: entry.id }));\n\n      // return validation state\n      return this.selectedBelowListInt.length ? !this.additionalPropErrors.length : true;\n    },\n    /**\n     * Validation can be triggered by executing e.g. `this.$refs.baseChipsBelow.validate();` from parent.<br>\n     * Therefore, the component must have a reference set.\n     * @public\n     * @returns {boolean} - components error state\n     */\n    validate() {\n      // clear errors but still consider if invalid state and error message were set from\n      // out side - in this case use these values instead of a complete reset\n      this.invalidInt = this.invalid;\n      this.errorMessageInt = this.errorMessage;\n      this.additionalPropErrors = [];\n      // validate\n      const isValidChipsInput = this.isValidChipsInput();\n      const isValidAdditionalOptions = this.isValidAdditionalOptions(null);\n      // return error state\n      // nice to have would be to return an object or array with more information\n      // e.g. { label: this.label, error: this.errorMessageInt },\n      // but how to deal with the additionalOptions\n      // for now a boolean is enough\n      return !(isValidChipsInput && isValidAdditionalOptions);\n    },\n  },\n};\n\n</script>\n\n<style lang=\"scss\">\n  @import '../../styles/variables.scss';\n\n  .base-chips-below {\n    .base-chips-below-list-item {\n      padding: $spacing-small-half 0 0 0;\n\n      &:not(:last-of-type) {\n        margin-bottom: -2px;\n        border-bottom: $separation-line;\n        padding: $spacing-small-half 0;\n      }\n\n      .base-chips-below-list-item-line {\n        display: flex;\n        align-items: center;\n\n        .base-chips-below-list-icon-wrapper {\n          width: $icon-medium;\n          height: $icon-medium;\n          display: flex;\n          flex: 0 0 auto;\n          cursor: grab;\n\n          .base-chips-below-list-icon {\n            max-height: 100%;\n            width: $icon-medium;\n            color: $input-field-color;\n            margin: auto;\n          }\n        }\n\n        .base-chips-below-list-item-chip-wrapper {\n          width: 100%;\n          margin-right: $spacing;\n          max-width: calc(50% - #{$spacing});\n          flex: 1 0 calc(50% - #{$spacing});\n          text-align: left;\n        }\n\n        .base-chips-below-chips-input {\n          max-width: calc(50%);\n          flex: 1 0 calc(50%);\n        }\n      }\n\n      &.base-chips-below-list-item--draggable {\n        .base-chips-below-list-item-chip-wrapper {\n          margin-left: $spacing-small;\n          max-width: calc(50% - (2 * #{$spacing}));\n          flex: 1 0 calc(50% - (2 * #{$spacing}));\n        }\n\n        .base-chips-below-chips-input {\n          max-width: calc(50% - #{$spacing-small} - #{$spacing-small-half});\n          flex: 1 0 calc(50% - #{$spacing-small} - #{$spacing-small-half});\n        }\n      }\n\n      &.sortable-chosen {\n        border-bottom: 0;\n      }\n    }\n\n    .base-chips-below-list-item-chosen {\n      position: absolute;\n      top: -9999px;\n      left: -9999px;\n    }\n  }\n</style>\n"],"names":["_sfc_main","BaseChipsInput","Draggable","BaseChip","BaseIcon","val","prop","chipsBelow","ref","announcement","useAnnouncer","newProps","list","entry","evt","index","item","sendArr","sel","event","modifiedEntry","params","value","id","obj","isValidChipsInput","isValidAdditionalOptions"],"mappings":"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"}