{"version":3,"file":"utils.es.js","sources":["../../src/utils/utils.js"],"sourcesContent":["export const capitalizeString = (string) => {\n  const newString2 = string.split('/')\n    .map(partialString => partialString.slice(0, 1)\n      .toUpperCase() + partialString.slice(1)).join('/');\n  return newString2.split(' ')\n    .map(partialString => partialString.slice(0, 1)\n      .toUpperCase() + partialString.slice(1)).join(' ');\n};\n\nexport const createId = () => Math.random().toString(36).substr(2, 9);\n\n/**\n * function to extract the value from a nested object property\n * e.g. to get 'prop3' value from { prop1: { prop2: { prop3: [value] }}} provide\n * the object and string `prop1.prop2.prop3`\n *\n * @param {string} string - the nested object property path in dot notation\n * @param {Object} object - the object from which the property value should be extracted\n * @returns {*} - the value contained in the nested object\n */\nexport const extractNestedPropertyValue = (string, object) => string\n  .split('.').reduce((a, b) => {\n    if (a) {\n      return a[b];\n    }\n    // if the previous `a[b]` did not exist `a` is now 'undefined' - return this\n    // directly instead of `a` to make code easier to read\n    return undefined;\n  }, object);\n\n/**\n * function taking a string and returning any name format in an array\n * with primary compare value (=last name) first and\n * secondary compare value (=first name) second\n *\n * @param compareString {string}\n * @returns {[string, string]}\n */\nexport const getNameSortValue = (compareString) => {\n  const compareStringSansNumbers = compareString.replace(/,? [0-9-]+/g, '');\n  if (compareStringSansNumbers.includes(',')) {\n    const compareArray = compareStringSansNumbers.split(', ');\n    return [compareArray[0], compareArray.splice(1).join()];\n  }\n  const compArray = compareStringSansNumbers.split(' ');\n  return [compArray.pop(), compareStringSansNumbers];\n};\n\n/**\n * function for sorting also allowing special sorting of objects for specified\n * attribute\n *\n * @param list {Array}: the list to sort\n * @param objectProp {String}: the property to sort an object by\n * @param sortByName {Boolean}: does it require special name sorting\n * @param valueFunction {Function}: possibility to apply a special function to\n * the value before any further handling (e.g. used for getting language specific\n * label\n * @returns {[*]}\n */\nexport const sort = (\n  list,\n  objectProp = '',\n  sortByName = false,\n  valueFunction = null,\n) => list.sort((a, b) => {\n  // assign respective list values to variables\n  let compareValueA = a;\n  let compareValueB = b;\n  // if a property name was passed use its value for comparison\n  if (objectProp) {\n    compareValueA = compareValueA[objectProp];\n    compareValueB = compareValueB[objectProp];\n  }\n  // if a special function was provided apply it to the value\n  if (valueFunction) {\n    compareValueA = valueFunction(compareValueA);\n    compareValueB = valueFunction(compareValueB);\n  }\n  // if sortByName was specified, get the respective compare values\n  if (sortByName) {\n    let secondaryCompareValueA = '';\n    let secondaryCompareValueB = '';\n    [compareValueA, secondaryCompareValueA] = getNameSortValue(compareValueA);\n    [compareValueB, secondaryCompareValueB] = getNameSortValue(compareValueB);\n\n    // if primary compare values are equal - use secondary compare value\n    if (compareValueA.toLowerCase() === compareValueB.toLowerCase()) {\n      compareValueA = secondaryCompareValueA;\n      compareValueB = secondaryCompareValueB;\n    }\n  }\n  // now do the actual value comparison\n  if (compareValueA.toLowerCase() > compareValueB.toLowerCase()) {\n    return 1;\n  }\n  return -1;\n});\n\nexport const hasData = (fieldValues) => {\n  let hasContent = false;\n  if (fieldValues && typeof fieldValues === 'object') {\n    if (fieldValues.length >= 0) {\n      fieldValues.forEach((values) => {\n        hasContent = hasData(values) || hasContent;\n      });\n    } else {\n      const objectKeys = Object.keys(fieldValues);\n      objectKeys\n        .forEach((key) => {\n          hasContent = hasData(fieldValues[key]) || hasContent;\n        });\n    }\n  } else {\n    hasContent = fieldValues === 0 || !!fieldValues || hasContent;\n  }\n  return hasContent;\n};\n\nexport const debounce = (delay, f) => {\n  let timer = 0;\n  return (...args) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => f.apply(this, args), delay);\n  };\n};\n\n/**\n * highlight characters in a word matching a given string with chosen html tags\n * @param {string} word - the word that should be highlighted\n * @param {string} queryString - the query string that should be highlighted in `word`\n * @param {string[]} highlightTags - the names of one or more html tags to apply\n *  (only names without '<' and '>'! e.g. ['u', 'b'])\n * @returns {string} - the string to fill into v-html\n */\nexport const highlightText = ({ word, queryString, highlightTags = ['u', 'strong'] }) => {\n  const check = new RegExp(queryString, 'ig');\n  const highlightTagsStart = `<${highlightTags.join('><')}>`;\n  const highlightTagsEnd = `</${highlightTags.join('></')}>`;\n  return word.toString()\n    .replace(check, matchedText => (`${highlightTagsStart}${matchedText}${highlightTagsEnd}`));\n};\n"],"names":["capitalizeString","string","newString2","split","map","partialString","slice","toUpperCase","join","createId","Math","random","toString","substr","extractNestedPropertyValue","object","reduce","a","b","getNameSortValue","compareString","compareStringSansNumbers","replace","includes","compareArray","splice","compArray","pop","sort","list","objectProp","arguments","length","undefined","sortByName","valueFunction","compareValueA","compareValueB","secondaryCompareValueA","secondaryCompareValueB","_getNameSortValue","_getNameSortValue2","_slicedToArray","_getNameSortValue3","_getNameSortValue4","toLowerCase","hasData","fieldValues","hasContent","_typeof","forEach","values","objectKeys","Object","keys","key","debounce","delay","f","timer","_len","args","Array","_key","clearTimeout","setTimeout","apply","_this","highlightText","_ref","word","queryString","_ref$highlightTags","highlightTags","check","RegExp","highlightTagsStart","concat","highlightTagsEnd","matchedText"],"mappings":"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"}