import s from "hls.js/dist/hls.light.js";
import a from "../BaseIcon/BaseIcon.vue.es.js";
import o from "../../mixins/i18n.es.js";
import "./BaseHlsVideo.vue.es2.js";
import l from "../../_virtual/_plugin-vue2_normalizer.es.js";
const d = {
  name: "BaseHlsVideo",
  components: {
    BaseIcon: a
  },
  mixins: [
    o
  ],
  props: {
    /**
     * url of the medium to be displayed
     */
    mediaUrl: {
      type: String,
      default: ""
    },
    /**
     * url of image for poster property in html5 video tag
     */
    mediaPosterUrl: {
      type: String,
      default: ""
    },
    /**
     * set height and with from outside
     */
    displaySize: {
      type: Object,
      default: () => ({ height: "720px", width: "1280px" })
    },
    /**
     * start video on load
     */
    autoplay: {
      type: Boolean,
      default: !1
    },
    /**
     * define play button text
     * could be string or path to i18n json as well
     */
    buttonTitle: {
      type: String,
      default: "Play"
    },
    /**
     * define startLevel (size) of hls-video
     */
    hlsStartLevel: {
      type: Number,
      default: void 0
    }
  },
  data() {
    return {
      hsl: () => {
      },
      video: null,
      playButton: !0
    };
  },
  mounted() {
    this.video = this.$refs.videoPlayer, this.autoplay && this.play();
  },
  destroyed() {
    this.hls && this.hls.destroy();
  },
  methods: {
    /**
     * init video
     */
    init() {
      this.video && (s.isSupported() ? this.hls || (this.hls = new s({
        startLevel: this.hlsStartLevel
      }), this.hls.loadSource(this.mediaUrl), this.hls.attachMedia(this.video), this.hls.on(s.Events.MANIFEST_PARSED, () => {
        this.play(), this.playButton = !1, this.video.controls = !0, this.video.focus();
      })) : (this.video.canPlayType("application/vnd.apple.mpegurl") || this.video.canPlayType("application/vnd.apple.mpegurl") === "maybe") && (this.hls = !1, this.video.src = this.mediaUrl, this.video.addEventListener("loadedmetadata", () => {
        this.video.play(), this.video.focus();
      })), this.video.addEventListener("pause", () => {
        this.playButton = !0;
      }), this.video.addEventListener("play", () => {
        this.playButton = !1;
      }));
    },
    /**
     * play video
     */
    play() {
      if (this.video) {
        if (this.hls || this.video.src) {
          this.video.play();
          return;
        }
        this.init();
      }
    },
    /**
     * pause video
     */
    pause() {
      this.video && this.video.pause();
    }
  }
};
var r = function() {
  var e = this, i = e._self._c;
  return i("div", { staticClass: "base-media-video" }, [e.playButton ? i("button", { ref: "playButton", staticClass: "base-media-video__control", attrs: { title: `${e.getI18nTerm(e.buttonTitle)} Video` }, on: { keydown: function(t) {
    return !t.type.indexOf("key") && e._k(t.keyCode, "enter", 13, t.key, "Enter") && e._k(t.keyCode, "space", 32, t.key, [" ", "Spacebar"]) ? null : e.play.apply(null, arguments);
  }, click: e.play } }, [i("base-icon", { staticClass: "base-media-video__icon", attrs: { name: "play" } })], 1) : e._e(), i("video", { ref: "videoPlayer", staticClass: "base-media-video__video", style: e.displaySize, attrs: { poster: e.mediaPosterUrl, tabindex: e.playButton ? "-1" : "0" } }, [e._v(" Your browser does not support the video tag. ")])]);
}, n = [], p = /* @__PURE__ */ l(
  d,
  r,
  n,
  !1,
  null,
  "3b7da14f",
  null,
  null
);
const m = p.exports;
export {
  m as default
};
//# sourceMappingURL=BaseHlsVideo.vue.es.js.map
