{"version":3,"file":"BaseTextList.vue.cjs.js","sources":["../../../src/components/BaseTextList/BaseTextList.vue"],"sourcesContent":["<template>\n  <div\n    :style=\"isSingleTextObject ? { '--columns': colsSingleTextObject } : null\"\n    :class=\"[\n      'base-text-list',\n      'base-text-list--row-gap-' + rowGap,\n      {\n        'base-text-list--cols': hasColumns || isSingleTextObject && colsSingleTextObject > 1,\n        'base-text-list--cols-single-content': isSingleTextObject && colsSingleTextObject > 1,\n      }]\">\n    <div\n      v-for=\"(item, index) in data\"\n      :key=\"index\"\n      class=\"base-text-list__group\">\n      <component\n        :is=\"renderLabelAs\"\n        v-if=\"item.label\"\n        :class=\"['base-text-list__label', { 'base-text-list__label--mb': labelMarginBottom }]\">\n        {{ getLangLabel(item.label) }}\n      </component>\n\n      <!-- Array as multiple columns -->\n      <template v-if=\"typeof item === 'object' && typeof item[0] === 'object'\">\n        <BaseTextList\n          ref=\"baseTextList\"\n          :cols=\"cols\"\n          :data=\"item\"\n          :identifier-property-name=\"identifierPropertyName\"\n          :label-margin-bottom=\"labelMarginBottom\"\n          :list-type=\"listType\"\n          :render-label-as=\"renderLabelAs\"\n          :style=\"{ '--columns': cols }\"\n          :interpret-text-as-html=\"interpretTextAsHtml\" />\n      </template>\n\n      <!-- String as text -->\n      <!-- get rid of prepending white-space -->\n      <p\n        v-else-if=\"item.data && typeof item.data === 'string'\"\n        v-insert-text-as-html=\"{ value: item.data, interpretTextAsHtml }\"\n        :class=\"[\n          'base-text-list__content',\n          { 'base-text-list__content--pre-line': !interpretTextAsHtml },\n          // render single content in columns\n          // eslint-disable-next-line vue/multiline-html-element-content-newline\n          { 'base-text-list--cols': data.length === 1 }]\">{{ item.data }}</p>\n\n      <!-- Array as unordered list -->\n      <ul\n        v-else-if=\"item.data && typeof item.data === 'object' && typeof item.data[0] === 'string'\"\n        class=\"base-text-list__content\">\n        <li\n          v-for=\"(arrayItem, listIndex) in item.data\"\n          :key=\"listIndex\"\n          v-insert-text-as-html=\"{ value: arrayItem, interpretTextAsHtml }\" />\n      </ul>\n\n      <!-- Array/Objects -->\n      <template\n        v-else-if=\"item.data && typeof item.data === 'object'\">\n        <!-- render as comma separated list -->\n        <template\n          v-if=\"!containKeys([].concat(item.data), 'label')\">\n          <div class=\"base-text-list__content base-text-list__content--list\">\n            <span\n              v-for=\"(objectItem, objectIndex) in [].concat(item.data)\"\n              :key=\"objectIndex\"\n              v-clean-dom-nodes=\"{ recursive: false }\"\n              :class=\"['base-link__wrapper', { 'base-link__wrapper--tooltip': isTooltip(objectItem)}]\">\n              <!-- BaseLink: text, external, internal, text and tooltip -->\n              <BaseLink\n                :identifier-property-name=\"identifierPropertyName\"\n                :identifier-property-value=\"objectItem[identifierPropertyName]\"\n                :chip-query-name=\"chipQueryName\"\n                :path=\"item.path\"\n                :tooltip=\"objectItem.additional\"\n                :type=\"item.id\"\n                :url=\"objectItem.url\"\n                :value=\"objectItem.value\"\n                :alt-title=\"objectItem.altTitle\"\n                :interpret-text-as-html=\"interpretTextAsHtml\"\n                :class=\"['base-text-list__link', { 'base-link--chip-text-list': item.id }]\">\n                <template #tooltip>\n                  <template v-if=\"isTooltip(objectItem)\">\n                    <!-- @slot slot for tooltip content\n                         @binding {array} data - the tooltip data that were provided with the `data` object property `additional` -->\n                    <slot\n                      :data=\"objectItem.additional\"\n                      name=\"tooltip\" />\n                  </template>\n                </template>\n                <!-- add directly after to avoid additional spaces - if this\n                  is separated there will be a space between link and comma -->\n              <!-- eslint-disable-next-line max-len -->\n              </BaseLink><span :key=\"`${objectIndex}-space`\">{{ item.data.length && objectIndex !== item.data.length - 1 && !item.id ? ',&nbsp;' : '' }}</span>\n            </span>\n          </div>\n        </template>\n\n        <!-- render as data list -->\n        <template\n          v-if=\"containKeys([].concat(item.data), 'label')\">\n          <dl\n            v-if=\"typeof item.data === 'object'\"\n            :class=\"['base-text-list__content',\n                     'base-text-list__content--' + listType]\">\n            <template\n              v-for=\"(objectItem, objectIndex) in [].concat(item.data)\">\n              <dt\n                :key=\"'l' + objectIndex\"\n                class=\"base-text-list__content__label\">\n                <template\n                  v-if=\"objectItem.label\">\n                  {{ getLangLabel(objectItem.label) }}:&nbsp;\n                </template>\n              </dt>\n              <dd\n                :key=\"'v' + objectIndex\"\n                class=\"base-text-list__content__label base-text-list__content__value\">\n                <BaseLink\n                  :render-link-as=\"renderLinkAs\"\n                  :identifier-property-name=\"identifierPropertyName\"\n                  :identifier-property-value=\"objectItem[identifierPropertyName]\"\n                  :chip-query-name=\"chipQueryName\"\n                  :path=\"item.path\"\n                  :tooltip=\"objectItem.additional\"\n                  :tooltip-threshold-top=\"tooltipThresholdTop\"\n                  :type=\"item.id\"\n                  :url=\"objectItem.url\"\n                  :value=\"objectItem.value\"\n                  :alt-title=\"objectItem.altTitle\"\n                  :interpret-text-as-html=\"interpretTextAsHtml\">\n                  <!-- @slot slot for tooltip content\n                       @binding {array} data - the tooltip data that were provided with the `data` object property `additional` -->\n                  <slot\n                    name=\"tooltip\"\n                    :data=\"objectItem.additional\" />\n                </BaseLink>\n              </dd>\n            </template>\n          </dl>\n        </template>\n      </template>\n    </div>\n  </div>\n</template>\n\n<script>\nimport InsertTextAsHtml from '@/directives/InsertTextAsHtml';\nimport cleanDomNodes from '@/directives/cleanDomNodes';\nimport i18n from '../../mixins/i18n';\n\n/**\n * Component to render different types of text content depending on the data type of prop `data`\n */\n\nexport default {\n  name: 'BaseTextList',\n  components: {\n    // eslint-disable-next-line import/no-self-import\n    BaseTextList: () => import('./BaseTextList').then(m => m.default || m),\n    BaseLink: () => import('../BaseLink/BaseLink').then(m => m.default || m),\n  },\n  directives: {\n    insertTextAsHtml: InsertTextAsHtml,\n    cleanDomNodes,\n  },\n  mixins: [i18n],\n  props: {\n    /**\n     * specify a list of array objects to render different types of text content\n     *\n     * single object structure: `{ label: {string, Object}, data: {string, Object, string[], Object[]} }`\n     *  **label** - a heading for the list section\n     * **data** property variants and their output (see readme.md for examples):\n     * - `{string}` - renders as simple text\n     * - `{Object}` - depending on object properties (see below) renders as chip | external ink | internal link | text | text with tooltip\n     * - `{string[]}` - renders as unordered list\n     * - `{Object[]}` - renders multiple objects (see above)\n     *\n     *  Possible object properties for `{ data : {Object, Object[]} }`:\n     *  - **value** `string` - the displayed text for all types\n     *  - **label** `string?` - an optional pretext in style of 'label:'\n     *  - **altTitle** `string?` - if `interpretTextAsHtml` is set `true`, add a html-free version of the label\n     *    here that can be used for hover title and assistive technologies (needed for type 'chip')\n     * - **[identifierPropertyName]** `string?` - specify the id of a chip or the path for internal link - specify the object property name with prop `identifierPropertyName`\n     * - **id** `string?` - for type chip - an identifier for the chip type (used in link generation)\n     * - **path** `string?` - for type chip (used in link generation)\n     * - **url** `string?` - for external link - the url to link to\n     * - **additional** `Object?` - used for tooltip content generation - an array of objects with properties:\n     *    `label`, `value` optionally `altTitle` (if `interpretTextAsHtml` is set true) and `url` (in case the item should render as link)\n     *    **caveat**: even if tooltip content is created via slot this property (`tooltip`) needs to be present and filled in order for the tooltip to show\n     *\n     * Note: objects wrapped in an extra array are rendered as columns respecting the `cols` property.\n     */\n    data: {\n      type: Array,\n      default: () => ([]),\n    },\n    /**\n     * specify the object property that should be used as identifier\n     *\n     * Note: only applies for chips and internal links:\n     * - chip: to build the link query data\n     *         e.g.: query: `path?chip-link={[identifierPropertyName]:'keywordId',type:'dataObject.id',value:'keywordValue'}`\n     * - internal: to set the link path\n     */\n    identifierPropertyName: {\n      type: String,\n      default: 'source',\n    },\n    /**\n     * specify a query parameter name for type chip links\n     */\n    chipQueryName: {\n      type: String,\n      default: 'chip-link',\n    },\n    /**\n     * render component as e.g.: 'h2' | 'h3'\n     */\n    renderLabelAs: {\n      type: String,\n      default: 'div',\n    },\n    /**\n     * set margin-bottom for the label\n     */\n    labelMarginBottom: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * specify the number of columns to render array nested objects\n     */\n    cols: {\n      type: Number,\n      default: 2,\n      validator: val => val > 0,\n    },\n    /**\n     * specify the number of columns to render a single object typeof string\n     */\n    colsSingleTextObject: {\n      type: Number,\n      default: 1,\n      validator: val => val > 0,\n    },\n    /**\n     * specify how the link element should be rendered - this needs to be a\n     * valid vue link component (e.g. RouterLink, NuxtLink) and vue-router\n     * is necessary\n     * if no routing plugin is found the element will be rendered as <a> tag\n     */\n    renderLinkAs: {\n      type: String,\n      default: 'RouterLink',\n    },\n    /**\n     * specify how data-list (label, value) should be rendered\n     * Note: Only applies to `{ data: {Object[]} }`.\n     * @values horizontal, vertical\n     */\n    listType: {\n      type: String,\n      default: 'horizontal',\n      validator: val => ['horizontal', 'vertical'].includes(val),\n    },\n    /**\n     * specify the gap between content rows\n     * @values large, small\n     */\n    rowGap: {\n      type: String,\n      default: 'large',\n      validator: val => ['large', 'small'].includes(val),\n    },\n    /**\n     * specify a threshold value in px for the [BaseTooltipBox](BaseTooltipBox) top position calculation\n     *\n     * Note: The value can also be set globally with the CSS variable `--base-tooltip-box-threshold-top`.\n     *       The property will be overwritten by the CSS variable.\n     */\n    tooltipThresholdTop: {\n      type: Number,\n      default: 0,\n    },\n    /**\n     * set true to render `data` or `value` content as html\n     *\n     *  **caveat**: setting this variable `true` can lead to XSS attacks. Only use\n     *    this prop on trusted content and never on user-provided content.\n     */\n    interpretTextAsHtml: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      /**\n       * variable for handling columns class\n       * Note: is finally evaluated in created lifecycle hook\n       * @type {boolean}\n       */\n      hasColumns: false,\n    };\n  },\n  computed: {\n    /**\n     * evaluate if data is a single object and typeof string\n     * @returns {boolean}\n     */\n    isSingleTextObject() {\n      return this.data.length === 1\n          && this.data[0].data\n          && typeof this.data[0].data === 'string';\n    },\n  },\n  created() {\n    // Check if the parent component is type `BaseTextList`,\n    // and assume it is recursive, and the current `BaseTextList` has columns.\n    // With this workaround, we avoid problems with the CSS var `--columns` in the parent scope.\n    this.hasColumns = this.$parent.$options.name === 'BaseTextList';\n  },\n  methods: {\n    /**\n     * check if all array objects have a key label\n     *\n     * @param {array} data\n     * @param {string} key\n     * @returns {boolean}\n     */\n    containKeys(data, key) {\n      return data.every(obj => Object.keys(obj).includes(key));\n    },\n    /**\n     * check if the link is type `tooltip`\n     * @param {Object} item\n     * @returns {boolean}\n     */\n    isTooltip(item) {\n      return !!item.additional;\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n  @import \"../../styles/variables\";\n\n  .base-text-list {\n\n    .base-text-list__group {\n      page-break-inside: avoid;\n      break-inside: avoid;\n\n      .base-text-list__label {\n        margin-top: 0;\n        margin-bottom: 0;\n        overflow-wrap: break-word;\n\n        &.base-text-list__label--mb {\n          margin-bottom: $spacing;\n        }\n      }\n\n      // class gets modified in component baseMapLocations\n      .base-text-list__content {\n        position: relative;\n        color: $font-color-second;\n        height: 100%;\n        overflow-wrap: break-word;\n\n        &.base-text-list__content--list {\n          display: flex;\n          flex-direction: row;\n          flex-wrap: wrap;\n\n          .base-link__wrapper {\n            max-width: 100%;\n            min-width: 0;\n\n            &.base-link__wrapper--tooltip {\n              display: inline-flex;\n            }\n          }\n\n          .base-text-list__link {\n            min-width: 0;\n            max-width: 100%;\n\n            &.base-link--chip-text-list {\n              display: inline-block;\n              margin-right: $spacing-small;\n              margin-bottom: $spacing-small-half;\n            }\n          }\n        }\n      }\n\n      .base-text-list__content--pre-line {\n        white-space: pre-line;\n        break-inside: avoid;\n      }\n\n      .base-text-list__content--horizontal {\n\n        .base-text-list__content__label {\n          display: inline;\n        }\n\n        .base-text-list__content__value {\n          display: inline;\n\n          &:after {\n            display: block;\n            content: '';\n            width: 100%;\n          }\n        }\n      }\n\n      .base-text-list__content--vertical {\n        line-height: $line-height;\n\n        .base-text-list__content__label {\n          display: block;\n        }\n\n        .base-text-list__content__value {\n          display: block;\n          color: $font-color;\n          margin-bottom: $spacing-small;\n          word-break: break-word;\n        }\n      }\n    }\n\n    // spacing below elements\n    // Note: Use a negative margin to get an exact bottom boundary\n    //       without extra spacing from paddings of the inner elements.\n    //       Could possibly be done with CSS Masonry layout once it's stable.\n    &.base-text-list--row-gap-small {\n      margin-bottom: -$spacing;\n\n      .base-text-list__group {\n        padding-bottom: $spacing;\n      }\n    }\n\n    &.base-text-list--row-gap-large {\n      margin-bottom: -$line-height;\n\n      .base-text-list__group {\n        padding-bottom: $line-height;\n      }\n    }\n  }\n\n  // columns\n  .base-text-list--cols {\n    columns: var(--columns);\n    column-gap: $spacing-large;\n\n    @media screen and (max-width: $mobile) {\n      columns: inherit;\n    }\n  }\n\n  .base-text-list--cols-single-content {\n    display: flex;\n  }\n</style>\n"],"names":["_sfc_main","BaseTextList$1","m","InsertTextAsHtml","cleanDomNodes","i18n","val","data","key","obj","item"],"mappings":"wWA4JAA,EAAA,CACA,KAAA,eACA,WAAA,CAEA,aAAA,IAAA,QAAA,QAAA,EAAA,KAAA,IAAAC,CAAA,EAAA,KAAAC,GAAAA,EAAA,SAAAA,CAAA,EACA,SAAA,IAAA,QAAA,QAAA,EAAA,KAAA,IAAA,QAAA,iCAAA,GAAA,KAAAA,GAAAA,EAAA,SAAAA,CAAA,CACA,EACA,WAAA,CACA,iBAAAC,EAAA,QACA,cAAAC,EAAA,OACA,EACA,OAAA,CAAAC,EAAAA,OAAA,EACA,MAAA,CA2BA,KAAA,CACA,KAAA,MACA,QAAA,IAAA,CAAA,CACA,EASA,uBAAA,CACA,KAAA,OACA,QAAA,QACA,EAIA,cAAA,CACA,KAAA,OACA,QAAA,WACA,EAIA,cAAA,CACA,KAAA,OACA,QAAA,KACA,EAIA,kBAAA,CACA,KAAA,QACA,QAAA,EACA,EAIA,KAAA,CACA,KAAA,OACA,QAAA,EACA,UAAAC,GAAAA,EAAA,CACA,EAIA,qBAAA,CACA,KAAA,OACA,QAAA,EACA,UAAAA,GAAAA,EAAA,CACA,EAOA,aAAA,CACA,KAAA,OACA,QAAA,YACA,EAMA,SAAA,CACA,KAAA,OACA,QAAA,aACA,UAAAA,GAAA,CAAA,aAAA,UAAA,EAAA,SAAAA,CAAA,CACA,EAKA,OAAA,CACA,KAAA,OACA,QAAA,QACA,UAAAA,GAAA,CAAA,QAAA,OAAA,EAAA,SAAAA,CAAA,CACA,EAOA,oBAAA,CACA,KAAA,OACA,QAAA,CACA,EAOA,oBAAA,CACA,KAAA,QACA,QAAA,EACA,CACA,EACA,MAAA,CACA,MAAA,CAMA,WAAA,EACA,CACA,EACA,SAAA,CAKA,oBAAA,CACA,OAAA,KAAA,KAAA,SAAA,GACA,KAAA,KAAA,CAAA,EAAA,MACA,OAAA,KAAA,KAAA,CAAA,EAAA,MAAA,QACA,CACA,EACA,SAAA,CAIA,KAAA,WAAA,KAAA,QAAA,SAAA,OAAA,cACA,EACA,QAAA,CAQA,YAAAC,EAAAC,EAAA,CACA,OAAAD,EAAA,MAAAE,GAAA,OAAA,KAAAA,CAAA,EAAA,SAAAD,CAAA,CAAA,CACA,EAMA,UAAAE,EAAA,CACA,MAAA,CAAA,CAAAA,EAAA,UACA,CACA,CACA"}