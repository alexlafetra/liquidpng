{"version":3,"file":"BaseEntrySelector.vue.cjs.js","sources":["../../../src/components/BaseEntrySelector/BaseEntrySelector.vue"],"sourcesContent":["<template>\n  <div\n    :style=\"calcStyle\"\n    class=\"base-entry-selector\">\n    <!-- HEAD -->\n    <div\n      ref=\"head\"\n      :class=\"['base-entry-selector__head',\n               { 'base-entry-selector__head--shadow': headHasShadow },\n               { 'base-entry-selector__head--padding': useSearch }]\">\n      <!-- @slot per default this element contains the search element of the component. Use this slot to replace it with your own elements -->\n      <slot name=\"head\">\n        <!-- default -->\n        <BaseSearch\n          v-if=\"useSearch\"\n          v-model=\"filterString\"\n          :show-image=\"true\"\n          :placeholder=\"getI18nTerm(entrySelectorText.search)\"\n          :assistive-text=\"{\n            loaderActive: assistiveText.loaderActive,\n            results: resultsAnnouncement,\n          }\"\n          :class=\"['base-entry-selector__head__search-bar',\n                   { 'base-entry-selector__head__search-bar--margin-large': !showOptionsRow}]\"\n          @input=\"filterEntries($event, 'title')\" />\n      </slot>\n\n      <!-- BASE OPTIONS ROW -->\n      <div\n        v-if=\"showOptionsRow\"\n        class=\"base-entry-selector__options\">\n        <BaseOptions\n          ref=\"baseOptions\"\n          :show-options.sync=\"showOptions\"\n          :options-hidden=\"optionsHidden\"\n          :use-options-button-on=\"'always'\"\n          :show-after-options-below=\"true\"\n          :options-button-icon=\"{\n            show: 'options-menu',\n            hide: 'options-menu',\n          }\"\n          :options-button-text=\"entrySelectorText.options\"\n          align-options=\"left\">\n          <template\n            #afterOptions>\n            <div\n              class=\"base-entry-selector__dropdowns\">\n              <!-- @slot to add custom elements at the end of the options row, e.g. custom drop downs -->\n              <slot name=\"after-options\">\n                <!-- default -->\n                <BaseDropDown\n                  v-if=\"sortOptions.length\"\n                  :id=\"`${sortConfig.label}-sort-drop-down`\"\n                  ref=\"baseDropDown\"\n                  v-model=\"sortParam\"\n                  :label=\"sortConfig.label\"\n                  :options=\"sortOptions\"\n                  :with-spacing=\"false\"\n                  :align-drop-down=\"entryTypes.length ? 'left' : 'right'\"\n                  :style=\"{ maxWidth: `${100 / dropDownElementsCount}%` }\"\n                  :value-prop=\"sortConfig.valuePropertyName\"\n                  class=\"base-entry-selector__dropdowns__dropdown\"\n                  @value-selected=\"fetchEntries\" />\n                <BaseDropDown\n                  v-if=\"entryTypes.length\"\n                  :id=\"`${entryTypesConfig.label}-types-drop-down`\"\n                  ref=\"baseDropDown\"\n                  v-model=\"filterType\"\n                  :label=\"entryTypesConfig.label\"\n                  :options=\"entryTypes\"\n                  :language=\"language\"\n                  :with-spacing=\"false\"\n                  :style=\"{ maxWidth: `${100 / dropDownElementsCount}%` }\"\n                  :value-prop=\"entryTypesConfig.valuePropertyName\"\n                  align-drop-down=\"right\"\n                  class=\"base-entry-selector__dropdowns__dropdown\"\n                  @value-selected=\"filterEntries($event, 'type')\" />\n              </slot>\n            </div>\n          </template>\n          <template\n            #options>\n            <!-- @slot add custom action (buttons) -->\n            <slot name=\"option-actions\" />\n          </template>\n        </BaseOptions>\n      </div>\n      <!-- SELECTOR OPTIONS -->\n      <BaseSelectOptions\n        v-if=\"showOptions\"\n        ref=\"selectOptions\"\n        :select-text=\"getI18nTerm(entrySelectorText.selectAll)\"\n        :selected-number-text=\"getI18nTerm(entrySelectorText.entriesSelected)\"\n        :deselect-text=\"getI18nTerm(entrySelectorText.selectNone)\"\n        :list=\"selectableEntries\"\n        :selected-list=\"selectedEntries\"\n        :select-all-disabled=\"!!maxSelectedEntries\n          && (!(selectableEntries.length < (maxSelectedEntries - selectedListIds.length)\n            || !selectableEntries.some((entry) => !selectedListIds.includes(entry.id))))\"\n        @selected=\"changeAllSelectState\">\n        <template #selectedText>\n          {{ `${selectedListIds.length}${(maxSelectedEntries ? `/${maxSelectedEntries}` : '')}\n          ${getI18nTerm(entrySelectorText.entriesSelected)}` }}\n          <span\n            v-if=\"!!maxSelectedEntries && selectedListIds.length >= maxSelectedEntries\">\n            {{ `(${getI18nTerm(entrySelectorText.maxEntriesReached)})` }}\n          </span>\n        </template>\n      </BaseSelectOptions>\n    </div>\n\n    <!-- BODY -->\n    <div\n      ref=\"body\"\n      class=\"base-entry-selector__body\">\n      <div\n        v-if=\"isLoading\"\n        class=\"loading-area\">\n        <BaseLoader\n          :text-on-loader-show=\"assistiveText.loaderActive\"\n          :class=\"{ 'base-entry-selector__loader__center': entries.length < 4 }\" />\n      </div>\n\n      <!-- @slot the component [BaseMenuList](BaseMenuList) is used per default to display the list of entries - if something different is required use this slot.\n          @binding {Object[]} entries - list of entries to display\n          @binding {Function} select-entry - function to trigger when entry was selected - takes two arguments: @property **index** `number`: the index of the element in the entries list. **selected** `boolean`: if element was selected or deselected\n          -->\n      <slot\n        name=\"entries\"\n        :entries=\"entries\"\n        :select-entry=\"selectEntry\">\n        <!-- default -->\n        <BaseMenuList\n          v-if=\"entries.length\"\n          key=\"menu-list\"\n          ref=\"menuList\"\n          :select-active=\"showOptions\"\n          :list=\"entries\"\n          :active-entry=\"activeEntry\"\n          :selected-list=\"selectedListIds\"\n          class=\"base-entry-selector__body__entries\"\n          @clicked=\"entryClicked\"\n          @selected=\"selectEntry\">\n          <template #entry-text-content=\"{ item }\">\n            <!-- @slot text-content - use this slot to individualize the displayed text per selector entry.\n            @binding {Object} item - the data of one single selector entry provided with `entries` -->\n            <slot\n              name=\"entry-text-content\"\n              :item=\"item\" />\n          </template>\n          <template #entry-right-side-elements=\"{ isSelected, item }\">\n            <!-- @slot use this slot to add elements to the right side of an entry. This slot content will be rendered in place of thumbnails and select checkbox so it will effectively disable the display of selection elements and if select mode is desired, custom elements should be provided\n               @binding { Object } item - the complete entry provided by list\n               @binding { boolean } is-selected - was item selected\n               @binding { boolean } select-active - is select mode of entry selector active -->\n            <slot\n              name=\"entry-right-side-elements\"\n              :is-selected=\"isSelected\"\n              :select-active=\"showOptions\"\n              :item=\"item\" />\n          </template>\n          <template\n            #thumbnails=\"{ item }\">\n            <!-- @slot add custom elements at the end of the item row (see also [BaseMenuList](BaseMenuList)). this slot can only be be used if the `entries` slot is not used\n              @binding { Object } item - the data of one entry provided by `entries` prop -->\n            <slot\n              :item=\"item\"\n              name=\"thumbnails\" />\n          </template>\n        </BaseMenuList>\n        <div\n          v-else-if=\"!isLoading\"\n          class=\"base-entry-selector__no-entries\">\n          <p class=\"base-entry-selector__no-entries__title\">\n            {{ getI18nTerm(entrySelectorText.noEntriesTitle) }}\n          </p>\n          <p class=\"base-entry-selector__no-entries__subtext\">\n            {{ getI18nTerm(entrySelectorText.noEntriesSubtext) }}\n          </p>\n        </div>\n      </slot>\n    </div>\n\n    <BasePagination\n      v-if=\"pageTotal > 1\"\n      ref=\"pagination\"\n      :total=\"pageTotal\"\n      :current=\"pageNumber\"\n      @set-page=\"setPage\" />\n  </div>\n</template>\n\n<script>\nimport i18n from '../../mixins/i18n';\n\n/**\n * Component to select elements from a list, including search, options and pagination elements.\n */\n\nexport default {\n  name: 'BaseEntrySelector',\n  components: {\n    BaseDropDown: () => import('../BaseDropDown/BaseDropDown').then(m => m.default || m),\n    BaseLoader: () => import('../BaseLoader/BaseLoader').then(m => m.default || m),\n    BaseMenuList: () => import('../BaseMenuList/BaseMenuList').then(m => m.default || m),\n    BaseOptions: () => import('../BaseOptions/BaseOptions').then(m => m.default || m),\n    BasePagination: () => import('../BasePagination/BasePagination').then(m => m.default || m),\n    BaseSearch: () => import('../BaseSearch/BaseSearch').then(m => m.default || m),\n    BaseSelectOptions: () => import('../BaseSelectOptions/BaseSelectOptions').then(m => m.default || m),\n  },\n  mixins: [i18n],\n  props: {\n    /**\n     * list of entries to display. Unless the slot `entries` is used this should be an object with\n     * properties compatible with [BaseMenuList](BaseMenuList) `list` object array\n     */\n    entries: {\n      type: Array,\n      default: () => [],\n    },\n    /**\n     * provide the total number of entries for pagination calculations\n     */\n    entriesTotal: {\n      type: Number,\n      default: null,\n    },\n    /**\n     * number of entries per page (this does not steer the number of entries displayed.\n     * (the correct number needs to be provided by `entries`) but is solely\n     * needed for correct pagination calculations)\n     */\n    entriesPerPage: {\n      type: Number,\n      default: 10,\n    },\n    /**\n     * define if entries are selectable - thus if checkboxes are available\n     */\n    entriesSelectable: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * specify a maximum number of entries that can be selected.\n     * specify `0` if there should be no limit\n     */\n    maxSelectedEntries: {\n      type: Number,\n      default: 0,\n    },\n    /**\n     * specify a custom height - mainly useful if component is within a pop-up.\n     * Use a valid CSS height property value.\n     */\n    height: {\n      type: String,\n      default: '',\n    },\n    /**\n     * flag to set if loader should be shown (for fetch requests)\n     */\n    isLoading: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * specify the index of an entry to be marked active (color border on left side).\n     */\n    activeEntry: {\n      type: Number,\n      default: -1,\n    },\n    /**\n     * specify a language (ISO 639-1) (used for label if label is language specific object\n     * e.g. `{ de: 'xxx', en: 'yyy' }`)\n     */\n    language: {\n      type: String,\n      default: 'en',\n    },\n    /**\n     * hide options completely (necessary if only before or after slot elements should remain)\n     * if the complete options row should be hidden set `showOptionsRow` to `false` instead!\n     */\n    optionsHidden: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * define options to filter entries\n     * structure e.g.: `[{ label: { de: \"Alle Typen\", en: \"All Types\" }, source: \"\" }]`\n     */\n    entryTypes: {\n      type: Array,\n      default: () => [],\n    },\n    /**\n     * specify config options for your sorting drop down element (if `sortOptions` are\n     * provided).\n     * Needs to be an object with the following properties:\n     *  **label** `string` - specify a label for the sort options drop down (purely for accessibility purposes)\n     *  **default** `?Object` - specify a default option that the dropdown is initialized with.\n     *    this needs to have the same object structure as the objects in `entryTypes`.\n     *    if no default is provided the first option in the list will be selected.\n     *  **valuePropertyName** `string` - specify the name of the property that contains a unique value\n     */\n    entryTypesConfig: {\n      type: Object,\n      default: () => ({\n        label: 'filter by type',\n        default: null,\n        valuePropertyName: 'value',\n      }),\n      validator: value => !value || ['label', 'default', 'valuePropertyName']\n        .every(key => Object.keys(value).includes(key)),\n    },\n    /**\n     * define options for sorting entries.\n     * structure e.g: `[{ label: 'By Type', value: 'type_en' }]`\n     */\n    sortOptions: {\n      type: Array,\n      default: () => [],\n    },\n    /**\n     * specify config options for your sorting drop down element (if `sortOptions` are\n     * provided).\n     * Needs to be an object with the following properties:\n     *  **label** `string` - specify a label for the sort options drop down (purely for accessibility purposes)\n     *  **default** `?Object` - specify a default option that the dropdown is initialized with.\n     *    this needs to have the same object structure as the objects in `entryTypes`.\n     *    if no default is provided the first option in the list will be selected.\n     *  **valuePropertyName** `string` - specify the name of the property that contains a unique value\n     */\n    sortConfig: {\n      type: Object,\n      default: () => ({\n        label: 'sort entries',\n        default: null,\n        valuePropertyName: 'value',\n      }),\n      validator: value => !value || Object.keys(value).every(key => [\n        'label', 'default', 'valuePropertyName'].includes(key)),\n    },\n    /**\n     * specify informational texts for the component (especially helpful to provide language\n     * specific text) - this needs to be an object with the following\n     * properties (if you don't want to display any text leave an empty string):\n     *\n     *     **noEntriesTitle**: Header text shown if search for string returned no results.\n     *     **noEntriesSubtext**: subtext shown if search for string returned no result.\n     *     **options**: Text for title button.\n     *        This needs to be an object containing a `show` and `hide` property that are shown when\n     *        `entriesSelectable` is `true` or `false` respectively.\n     *     **search**: placeholder in search input field.\n     *     **selectAll**: Text for 'Select All' button.\n     *     **selectNone**: Text for 'Select None' button.\n     *     **entriesSelected**: Text for number of entries (x) selected. information displayed as\n     *      `x {provided text}`.\n     *\n     *  The values of this object might be plain string or a key for an i18n file (in case it is not\n     *  an object that is required! - in that case the above applies to the values within that\n     *  object)\n     */\n    entrySelectorText: {\n      type: Object,\n      default: () => ({\n        noEntriesTitle: 'No matching entries found',\n        noEntriesSubtext: 'Please adjust your search criteria.',\n        options: {\n          show: 'options',\n          hide: 'options',\n        },\n        search: 'Search',\n        selectAll: 'Select All',\n        selectNone: 'Select None',\n        entriesSelected: 'entries selected',\n        maxEntriesReached: 'Maximum Number Exceeded!',\n      }),\n      // checking if all necessary properties are part of the provided object\n      validator: val => [\n        'noEntriesTitle',\n        'noEntriesSubtext',\n        'options',\n        'search',\n        'selectAll',\n        'selectNone',\n        'entriesSelected',\n        'maxEntriesReached',\n      ]\n        .every(prop => Object.keys(val).includes(prop))\n          && ['show', 'hide'].every(requiredProp => Object.keys(val.options).includes(requiredProp)),\n    },\n    /**\n     * define if search field should be shown.\n     * this will have no effect if `head` slot is used.\n     */\n    useSearch: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * this will remove the complete row between search and entries list.\n     * This means also the slots `options` and `afterOptions` are not available anymore!\n     * (if only the options menu should be hidden use `optionsHidden` instead)\n     */\n    showOptionsRow: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * this prop gives the option to add assistive text for screen readers.\n     * properties:\n     * **loaderActive**: text that is announced when results are being fetched (prop\n     *  `isLoading` is set `true`)\n     * **resultsFound**: provide text that should be announced when the search has\n     *  yielded results. Adding the string '{number}' will announce the total number\n     *  of results found\n     * **noResultsFound**: provide text that should be announced when no search results\n     *  were round\n     */\n    assistiveText: {\n      type: Object,\n      default: () => ({\n        resultsFound: '{number} Results found.',\n        noResultsFound: 'No results found.',\n        loaderActive: 'Loading.',\n      }),\n    },\n  },\n  data() {\n    return {\n      /**\n       * variable to store filter text entered into search\n       * @type {string}\n       */\n      filterString: '',\n      /**\n       * variable to store selected filter type\n       * @type {Object}\n       */\n      filterType: {},\n      /**\n       * variable to store selected sort option\n       * @type {Object}\n       */\n      sortParam: {},\n      headHasShadow: false,\n      pageNumber: 1,\n      showOptions: false,\n      // TODO: eventually it would make sense to have selected entries settable from outside\n      selectedEntries: [],\n      /**\n       * timeout to prevent triggering of search after every key stroke\n       * @type {?number}\n       * TODO: eventually this should be kept in front end to give more individual control to\n       * component users\n       */\n      timeout: null,\n      /**\n       * variable to remember if page changed when entries are updated (to set the focus\n       * to first entry after page change)\n       */\n      pageChanged: false,\n      /**\n       * manage the announcement of found results\n       * @type {string}\n       */\n      resultsAnnouncement: '',\n    };\n  },\n  computed: {\n    /**\n     * create object for the element style attribute\n     * @returns {Object}\n     */\n    calcStyle() {\n      return this.height ? { height: this.height } : {};\n    },\n    /**\n     * calculate page total for pagination from available numbers\n     * @returns {number}\n     */\n    pageTotal() {\n      return this.entriesPerPage ? Math.ceil(this.entriesTotal / this.entriesPerPage) : 0;\n    },\n    /**\n     * BaseMenuList components needs a list of unique IDs for selected entries\n     * @returns {string[]}\n     */\n    selectedListIds() {\n      // deduplicate by creating set and convert back to array\n      return [...new Set(this.selectedEntries.map(entry => entry.id))];\n    },\n    /**\n     * to calc the correct max-with for the sort and type drop downs we need to know how\n     * many there are\n     * @type {number}\n     */\n    dropDownElementsCount() {\n      if (this.sortOptions && this.sortOptions.length\n        && this.entryTypes && this.entryTypes.length) {\n        return 2;\n      }\n      return 1;\n    },\n    /**\n     * filter entries which are not disabled\n     *\n     * @returns {Object[]}\n     */\n    selectableEntries() {\n      return this.entries.filter(entry => !entry.disabled);\n    },\n  },\n  watch: {\n    /**\n     * watch if entries are updated to set the focus on the first list\n     * element\n     */\n    entries() {\n      // check if the menu list exist already (which it should on page\n      // change) and if change was triggered by changing the page\n      if (this.$refs.menuList && this.pageChanged) {\n        // wait until the elements are rendered\n        this.$nextTick(() => {\n          // then depending on if select input is shown or not\n          const firstFocusableListElement = this.showOptions\n            // get the first select input element\n            ? this.$refs.menuList.$el.querySelector('input:enabled')\n            // or the first menu entry element (that has tabindex 0 set)\n            : this.$refs.menuList.$el.querySelector('*[tabindex]:not([tabindex=\"-1\"])');\n          // check if an element was found\n          if (firstFocusableListElement) {\n            // if yes - focus\n            firstFocusableListElement.focus();\n          }\n        });\n      }\n      // reset pageChanged flag\n      this.pageChanged = false;\n      // announce that entries have changed\n      this.resultsAnnouncement = this.assistiveText[this.entriesTotal ? 'resultsFound' : 'noResultsFound']\n        .replace('{number}', this.entriesTotal);\n      // and reset afterward so the same text would trigger the watcher again\n      setTimeout(() => {\n        this.resultsAnnouncement = '';\n      }, 300);\n    },\n    /**\n     * watch outside variable to have it in sync with internal 'showOptions'\n     */\n    entriesSelectable: {\n      handler(val) {\n        if (val !== this.showOptions) {\n          this.showOptions = val;\n        }\n      },\n      immediate: true,\n    },\n    showOptions(val) {\n      // delete selected when options menu is closed and reset select all\n      if (!val) {\n        this.selectedEntries = [];\n      }\n      if (val !== this.entriesSelectable) {\n        /**\n         * emit event to inform parent about toggle triggered and keep prop variable\n         * `entriesSelectable` in sync\n         * @event update:entries-selectable\n         * @param {boolean} - are entries selectable\n         */\n        this.$emit('update:entries-selectable', this.showOptions);\n      }\n    },\n    /**\n     * watch selectedEntries to inform parent of changes in selection\n     */\n    selectedEntries() {\n      /**\n       * event emitted every time the selected entries change\n       * @event selected-changed\n       * @param {Object[]} - array of updated selected entries\n       */\n      this.$emit('selected-changed', this.selectedEntries);\n    },\n  },\n  created() {\n    // set the default option for the drop down menus\n    this.sortParam = this.sortConfig.default\n      || (this.sortOptions.length ? this.sortOptions[0] : {});\n    this.filterType = this.entryTypesConfig.default\n      || (this.entryTypes.length ? this.entryTypes[0] : {});\n  },\n  mounted() {\n    // fetch initial entries\n    this.fetchEntries();\n    // add scroll listener to determine if head shadow should be displayed\n    this.$refs.body\n      .addEventListener('scroll', this.scroll);\n  },\n  beforeDestroy() {\n    this.$refs.body\n      .removeEventListener('scroll', this.scroll);\n  },\n  methods: {\n    /**\n     * select all or none entries\n     *\n     * @param {Boolean} selected\n     */\n    changeAllSelectState(selected) {\n      if (selected) {\n        // add all visible entries to selected list\n        this.selectedEntries = this.selectedEntries.concat(this.selectableEntries);\n        // deduplicate by creating set and convert back to array\n        this.selectedEntries = [...new Set(this.selectedEntries)];\n      } else {\n        const entriesIds = this.entries.map(entry => entry.id);\n        this.selectedEntries = this.selectedEntries\n          .filter(entry => !entriesIds.includes(entry.id));\n      }\n    },\n    fetchEntries() {\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n        this.timeout = null;\n      }\n      this.timeout = setTimeout(() => {\n        /**\n         * Event emitted to fetch entries\n         *\n         * @event fetch-entries\n         * @property {string} page - current pagination page\n         * @property {string} query - the search string\n         * @property {object} sort - the sort filter\n         * @property {object} type - the type filter\n         */\n        this.$emit('fetch-entries', {\n          page: this.pageNumber,\n          query: this.filterString,\n          sort: this.sortParam,\n          type: this.filterType,\n        });\n      }, 600);\n    },\n    filterEntries(value, type) {\n      if (type === 'type') {\n        this.fetchEntries();\n      } else if (type === 'title') {\n        if (this.timeout) {\n          clearTimeout(this.timeout);\n          this.timeout = null;\n        }\n        this.timeout = setTimeout(() => {\n          if (value.length === 0 || value.length > 2) {\n            this.fetchEntries();\n          }\n        }, 600);\n      }\n      this.pageNumber = 1;\n    },\n    scroll() {\n      if (this.$refs.body.scrollTop) {\n        this.headHasShadow = true;\n        return;\n      }\n      this.headHasShadow = false;\n    },\n    /**\n     * function to trigger from slot `entries` when an entry was selected\n     * @param {Object} obj - selected entry\n     * @property {boolean} obj.selected - variable indicating if entry was selected or deselected\n     * @property {string} obj.index - the index of the selected or deselected entry in 'entries'\n     * @public\n     */\n    selectEntry(obj) {\n      if (obj.selected) {\n        this.selectedEntries.push(this.entries[obj.index]);\n      } else {\n        this.selectedEntries = this.selectedEntries\n          .filter(entry => entry.id !== this.entries[obj.index].id);\n      }\n    },\n    setPage(number) {\n      this.pageChanged = true;\n      this.pageNumber = number;\n      this.fetchEntries();\n    },\n    entryClicked(index) {\n      /**\n       * Triggered when the entry is clicked\n       *\n       * @event entry-clicked\n       * @param {string} - the id of the clicked entry\n       */\n      this.$emit('entry-clicked', this.entries[index].id);\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n  @import \"../../styles/variables.scss\";\n\n  .base-entry-selector {\n    display: flex;\n    flex-direction: column;\n    background: $background-color;\n\n    &__head {\n      position: sticky;\n      z-index: map-get($zindex, entry-selector-head);\n      background-color: $background-color;\n      flex: 0 0 auto;\n\n      &--padding {\n        padding-top: $spacing;\n      }\n\n      &--shadow {\n        box-shadow: 0 $spacing-small $spacing-small (-$spacing-small) rgba(0, 0, 0, 0.25);\n      }\n\n      &__search-bar {\n        margin-bottom: $spacing-small;\n      }\n\n      &__search-bar--margin-large {\n        margin-bottom: $spacing;\n      }\n    }\n\n    &__options {\n      padding-bottom: $spacing-small;\n    }\n\n    &__body {\n      position: relative;\n      flex: 1 1 auto;\n      overflow-y: auto;\n      overflow-x: hidden;\n      min-height: $row-height-large;\n\n      &__entries {\n        height: 100%;\n      }\n\n      .loading-area {\n        position: absolute;\n        height: 100%;\n        width: 100%;\n        z-index: map-get($zindex, loader);\n        background-color: $loading-background;\n        overflow: hidden;\n\n        .base-entry-selector__loader__center {\n          top: 50%;\n        }\n      }\n    }\n\n    &__no-entries {\n      height: 100%;\n      width: 100%;\n      padding-top: 50px;\n\n      &__title,\n      &__subtext {\n        text-align: center;\n        color: $font-color-second;\n        margin-bottom: $spacing;\n        padding: 0 $spacing-large;\n      }\n\n      &__title {\n        font-size: $font-size-large;\n      }\n    }\n\n    &__dropdowns {\n      display: flex;\n      justify-content: flex-end;\n      width: 100%;\n\n      &__dropdown {\n        &:not(:first-of-type) {\n          margin-left: $spacing;\n        }\n      }\n\n      @media screen and (max-width: $tablet) {\n        flex-wrap: wrap;\n      }\n    }\n  }\n</style>\n"],"names":["_sfc_main","m","i18n","value","key","val","prop","requiredProp","entry","firstFocusableListElement","selected","entriesIds","type","obj","number","index"],"mappings":"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"}