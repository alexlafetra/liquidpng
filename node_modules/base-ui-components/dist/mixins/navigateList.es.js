const s = {
  methods: {
    /**
     * function to navigate a drop-down list or similar via key up/down
     * @param {Array} list - the list to navigate in
     * @param {boolean} isArrowDown - was key navigation up or down
     * @param {number} currentIndex - the index of the current active option in the array
     * @param {boolean} [loop=false] - should index return to last/first
     *  item if first/last item was reached
     * @param {boolean} [allowNegativeIndex=false] - allow index to become -1 (no active option -->
     *  function will return null)
     * @returns {?Object|?string} - the new active element
     */
    navigate: function(t, n, a) {
      var i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1, r = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !1, e = n ? 1 : -1;
      return this.isWithinArrayLimit(t, n, a + e) ? t[a + e] : a >= 0 && r ? null : i ? t[n ? 0 : t.length - 1] : t[a];
    },
    isWithinArrayLimit: function(t, n, a) {
      var i = n ? t.length : 0, r = {
        ">=": function(u, g) {
          return u >= g;
        },
        "<": function(u, g) {
          return u < g;
        }
      }, e = n ? "<" : ">=";
      return r[e](a, i);
    }
  }
};
export {
  s as default
};
//# sourceMappingURL=navigateList.es.js.map
