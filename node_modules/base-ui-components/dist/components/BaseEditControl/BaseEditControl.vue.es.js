import s from "../BaseButton/BaseButton.vue.es.js";
import n from "../BaseLoader/BaseLoader.vue.es.js";
import o from "../../mixins/i18n.es.js";
import "./BaseEditControl.vue.es2.js";
import i from "../../_virtual/_plugin-vue2_normalizer.es.js";
const l = {
  name: "BaseEditControl",
  components: {
    BaseButton: s,
    BaseLoader: n
  },
  mixins: [
    o
  ],
  props: {
    /**
     * toggle control buttons
     */
    controls: {
      type: Boolean,
      default: !1
    },
    /**
     * disable edit button
     */
    disabled: {
      type: Boolean,
      default: !1
    },
    /**
     * set edit mode
     */
    edit: {
      type: Boolean,
      default: !1
    },
    /**
     * flag to set if loader should be shown (for autocomplete requests
     */
    isLoading: {
      type: Boolean,
      default: !1
    },
    /**
     * define title
     */
    title: {
      type: String,
      default: "Title"
    },
    /**
     * define subtitle
     */
    subtitle: {
      type: String,
      default: ""
    },
    /**
     * render title as e.g.: 'h2' | 'h3'
     */
    renderTitleAs: {
      type: String,
      default: "h2"
    },
    /**
     * define button text.
     * could be string or path to i18n json as well
     */
    editButtonText: {
      type: String,
      default: "Edit"
    },
    /**
     * define button text.
     * could be string or path to i18n json as well
     */
    cancelButtonText: {
      type: String,
      default: "Cancel"
    },
    /**
     * define button text.
     * could be string or path to i18n json as well
     */
    saveButtonText: {
      type: String,
      default: ""
    },
    /**
     * decide on buttons presented in edit mode.
     *  **save**: element has a 'save' and 'cancel' button
     *  **done**: element solely has a 'done' button. this button is also emitting
     *    a `saved` event when clicked and uses the `saveButtonText`
     */
    editMode: {
      type: String,
      default: "save",
      validator: (a) => ["save", "done"].includes(a)
    }
  },
  computed: {
    /**
     * set icon depending on editMode
     * @returns {string}
     */
    saveButtonIcon() {
      return this.isLoading ? "" : this.editMode === "done" ? "check-mark" : "save-file";
    },
    /**
     * set default save button text depending on editMode
     * @returns {string}
     */
    saveButtonTextInt() {
      return this.saveButtonText || (this.editMode === "done" ? "Done" : "Save");
    }
  },
  watch: {
    edit: {
      handler(a) {
        a ? window.addEventListener("keyup", this.escEventHandler) : window.removeEventListener("keyup", this.escEventHandler);
      }
    }
  },
  methods: {
    activate(a) {
      this.$emit("activated", a);
    },
    cancel(a) {
      this.$emit("canceled", a);
    },
    save(a) {
      this.$emit("saved", a);
    },
    /**
     * intercept escape key event and reset edit mode
     */
    escEventHandler(a) {
      a.key === "Escape" && this.cancel();
    }
  }
};
var d = function() {
  var t = this, e = t._self._c;
  return e("div", { staticClass: "base-edit-control" }, [t.title ? e(t.renderTitleAs, { tag: "component", staticClass: "base-edit-control__title base-text-fade-out-background" }, [t._t("default", function() {
    return [t._v(" " + t._s(t.title) + " "), t.subtitle ? e("span", { staticClass: "base-edit-control__title__additional" }, [t._v(" " + t._s(t.subtitle) + " ")]) : t._e()];
  })], 2) : t._e(), t.controls ? e("div", { staticClass: "base-edit-control__buttons" }, [t.edit ? t._e() : e("base-button", { staticClass: "base-edit-control__button", attrs: { disabled: t.disabled, "has-background-color": !1, icon: t.isLoading ? "" : "edit", text: t.getI18nTerm(t.editButtonText) }, on: { clicked: t.activate } }, [t.isLoading ? e("template", { slot: "left-of-text" }, [e("span", { staticClass: "base-edit-control__loader" }, [e("BaseLoader")], 1)]) : t._e()], 2), t.edit ? e("base-button", { staticClass: "base-edit-control__button", attrs: { disabled: t.disabled, "has-background-color": !1, icon: t.saveButtonIcon, text: t.getI18nTerm(t.saveButtonTextInt) }, on: { clicked: t.save } }, [t.isLoading ? e("template", { slot: "left-of-text" }, [e("span", { staticClass: "base-edit-control__loader" }, [e("BaseLoader")], 1)]) : t._e()], 2) : t._e(), t.editMode === "save" && t.edit ? e("base-button", { staticClass: "base-edit-control__button", attrs: { "has-background-color": !1, icon: "remove", text: t.getI18nTerm(t.cancelButtonText) }, on: { clicked: t.cancel } }) : t._e()], 1) : t._e()], 1);
}, r = [], c = /* @__PURE__ */ i(
  l,
  d,
  r,
  !1,
  null,
  "62affe8f",
  null,
  null
);
const b = c.exports;
export {
  b as default
};
//# sourceMappingURL=BaseEditControl.vue.es.js.map
