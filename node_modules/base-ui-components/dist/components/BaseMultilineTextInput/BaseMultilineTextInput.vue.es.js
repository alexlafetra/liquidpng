import n from "../BaseInput/BaseInput.vue.es.js";
import r from "../BaseIcon/BaseIcon.vue.es.js";
import { createId as s } from "../../utils/utils.es.js";
import "./BaseMultilineTextInput.vue.es2.js";
import l from "../../_virtual/_plugin-vue2_normalizer.es.js";
const o = {
  name: "BaseMultilineTextInput",
  components: {
    BaseInput: n,
    BaseIcon: r,
    BaseSwitchButton: () => import("../BaseSwitchButton/BaseSwitchButton.vue.es.js").then((e) => e.default || e)
  },
  model: {
    prop: "input",
    event: "input"
  },
  props: {
    /**
     * input displayed in the textarea.
     *   if `tabs` prop is set, this needs to be an object with properties corresponding to
     *   tab names.
     */
    input: {
      type: [Object, String],
      default: ""
    },
    /**
     * set the label for the input component
     */
    label: {
      type: String,
      default: ""
    },
    /**
     * set `true` if label should be visible
     */
    showLabel: {
      type: Boolean,
      default: !0
    },
    /**
     * set input field placeholder
     */
    placeholder: {
      type: String,
      default: ""
    },
    /**
     * set tabs for the input field
     */
    tabs: {
      type: Array,
      default: () => ["default"]
    },
    /**
     * give the possibility to specify what should be displayed in the tabs
     */
    tabLabels: {
      type: Array,
      default: () => []
    },
    /**
     * set the currently active tab (specify the property of the object not the label)
     */
    activeTab: {
      type: String,
      default() {
        return this.tabs[0] || "default";
      }
    },
    /**
     * set a legend for the tabs to be read (for accessibility only, hidden)
     */
    tabsLegend: {
      type: String,
      default: "Radiogroup"
    },
    /**
     * set id which is used for label + id
     */
    id: {
      type: [String, Number],
      default: ""
    },
    /**
     * set a language (ISO 639-1)
     */
    language: {
      type: String,
      default: ""
    },
    /**
     * mark as required field (currently only used for `aria-required`)
     */
    required: {
      type: Boolean,
      default: !1
    },
    /**
     * mark the form field as invalid and ideally also provide an error message
     * to display below the form field.
     * for an example see [BaseInput](BaseInput)
     */
    invalid: {
      type: Boolean,
      default: !1
    },
    /**
     * set true if input field should be disabled.
     * for an example see [BaseInput](BaseInput)
     */
    disabled: {
      type: Boolean,
      default: !1
    },
    /**
     * add an error message to be displayed below form field if field is invalid.
     * for an example see [BaseInput](BaseInput)
     */
    errorMessage: {
      type: String,
      default: ""
    },
    /**
     * define if error icon should be shown.
     * for an example see [BaseInput](BaseInput)
     */
    showErrorIcon: {
      type: Boolean,
      default: !0
    },
    /**
     * if true a remove icon will be shown allowing to remove
     * all input at once.
     * for an example see [BaseInput](BaseInput)
     */
    clearable: {
      type: Boolean,
      default: !1
    }
  },
  data() {
    return {
      activeTabInt: this.activeTab || "default",
      fieldContent: {},
      isActive: !1
    };
  },
  computed: {
    /**
     * check if an id was provided (to handle label input connection), if not create one
     * @returns {String|string}
     */
    idInt() {
      return this.id || s();
    },
    // TODO: refactor component props to already match object necessary for switch component
    switchTabs() {
      return this.tabs.map((e, t) => ({ value: e, label: this.tabLabels[t] || e }));
    },
    inputListeners() {
      return {
        // add all the listeners from the parent
        ...this.$listeners,
        input: () => {
          this.$emit("input", this.emitFieldContent());
        }
      };
    },
    showFadeOut() {
      return this.$refs && this.$refs.textarea ? !this.isActive && this.$refs.textarea.scrollHeight > this.$refs.textareaWrapper.clientHeight : !this.isActive;
    }
  },
  watch: {
    // watch for input changes from outside
    input: {
      handler(e) {
        (typeof e == "object" && JSON.stringify(e) !== JSON.stringify(this.fieldContent) || typeof e == "string" && e !== this.fieldContent[this.activeTabInt]) && this.setFieldContent(e);
      },
      immediate: !0,
      deep: !0
    },
    // get updates for active tab from outside
    activeTab(e) {
      this.activeTabInt = e;
    }
  },
  methods: {
    setFieldContent(e) {
      if (this.tabs.length < 2) {
        const t = this.activeTabInt || "default";
        this.$set(this.fieldContent, t, typeof e == "string" ? e : e[t]);
      } else
        this.tabs.forEach((t) => this.$set(
          this.fieldContent,
          t,
          e[t]
        ));
    },
    emitFieldContent() {
      return typeof this.input == "object" ? this.fieldContent : this.fieldContent[this.activeTabInt];
    },
    hasText(e) {
      return !!this.fieldContent[e];
    }
  }
};
var u = function() {
  var t = this, a = t._self._c;
  return a("BaseInput", t._g({ staticClass: "base-multiline-text-input", attrs: { id: t.idInt, "is-active": t.isActive, label: t.label, "show-label": t.showLabel, placeholder: t.placeholder, required: t.required, invalid: t.invalid, disabled: t.disabled, "show-error-icon": t.showErrorIcon, "error-message": t.errorMessage, clearable: t.clearable, "use-fade-out": !1 }, on: { "update:isActive": function(i) {
    t.isActive = i;
  }, "update:is-active": function(i) {
    t.isActive = i;
  } }, scopedSlots: t._u([{ key: "label-addition", fn: function() {
    return [a("div", { staticClass: "base-multiline-text-input__additions" }, [t._t("label-addition"), t.tabs && t.tabs[0] !== "default" ? a("BaseSwitchButton", { staticClass: "base-multiline-text-input__tabs", attrs: { options: t.switchTabs, label: t.tabsLegend, "active-tab": t.activeTab }, scopedSlots: t._u([{ key: "right-of-content", fn: function(i) {
      return [t.hasText(i.value) ? a("BaseIcon", { staticClass: "base-multiline-text-input__text-icon", attrs: { name: "text" } }) : t._e()];
    } }], null, !1, 1815464703), model: { value: t.activeTabInt, callback: function(i) {
      t.activeTabInt = i;
    }, expression: "activeTabInt" } }) : t._e()], 2)];
  }, proxy: !0 }, { key: "input", fn: function() {
    return [a("div", { ref: "textareaWrapper", class: [
      "base-multiline-text-input__textarea-wrapper",
      { "base-multiline-text-input__textarea-wrapper__fade-out": t.showFadeOut }
    ] }, [a("textarea", t._g({ directives: [{ name: "model", rawName: "v-model", value: t.fieldContent[t.activeTabInt], expression: "fieldContent[activeTabInt]" }], ref: "textarea", staticClass: "base-multiline-text-input__textarea", attrs: { id: t.idInt, required: t.required, "aria-required": t.required.toString(), "aria-describedby": t.idInt, "aria-invalid": t.invalid.toString(), disabled: t.disabled, "aria-disabled": t.disabled.toString(), placeholder: t.placeholder }, domProps: { value: t.fieldContent[t.activeTabInt] }, on: { keydown: function(i) {
      if (!i.type.indexOf("key") && t._k(i.keyCode, "tab", 9, i.key, "Tab"))
        return null;
      t.isActive = !1;
    }, input: function(i) {
      i.target.composing || t.$set(t.fieldContent, t.activeTabInt, i.target.value);
    } } }, t.inputListeners))])];
  }, proxy: !0 }, { key: "input-field-addition-before", fn: function() {
    return [t._t("input-field-addition-before")];
  }, proxy: !0 }, { key: "input-field-addition-after", fn: function() {
    return [t._t("input-field-addition-after")];
  }, proxy: !0 }, { key: "post-input-field", fn: function() {
    return [t._t("post-input-field")];
  }, proxy: !0 }, { key: "error-icon", fn: function() {
    return [t._t("error-icon")];
  }, proxy: !0 }, { key: "remove-icon", fn: function() {
    return [t._t("remove-icon")];
  }, proxy: !0 }], null, !0), model: { value: t.fieldContent[t.activeTabInt], callback: function(i) {
    t.$set(t.fieldContent, t.activeTabInt, i);
  }, expression: "fieldContent[activeTabInt]" } }, t.$listeners));
}, d = [], f = /* @__PURE__ */ l(
  o,
  u,
  d,
  !1,
  null,
  "74fa2118",
  null,
  null
);
const y = f.exports;
export {
  y as default
};
//# sourceMappingURL=BaseMultilineTextInput.vue.es.js.map
