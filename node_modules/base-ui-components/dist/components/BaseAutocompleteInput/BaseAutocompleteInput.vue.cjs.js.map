{"version":3,"file":"BaseAutocompleteInput.vue.cjs.js","sources":["../../../src/components/BaseAutocompleteInput/BaseAutocompleteInput.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"autocompleteInput\"\n    class=\"base-autocomplete-input\">\n    <BaseInput\n      :id=\"id\"\n      v-model=\"inputInt\"\n      :is-active.sync=\"isActiveInt\"\n      :label=\"label\"\n      :show-label=\"showLabel\"\n      :placeholder=\"placeholder\"\n      :required=\"required\"\n      :invalid=\"invalid\"\n      :error-message=\"errorMessage\"\n      :show-error-icon=\"showErrorIcon\"\n      :use-form-field-styling=\"useFormFieldStyling\"\n      :show-input-border=\"showInputBorder\"\n      :clearable=\"clearable\"\n      :loadable=\"loadable\"\n      :is-loading=\"isLoading\"\n      :language=\"language\"\n      :disabled=\"disabled\"\n      :drop-down-list-id=\"`${id}-list-identifier`\"\n      :linked-list-option=\"activeOption ? activeOption[identifierPropertyName] : null\"\n      :assistive-text=\"{\n        loaderActive: assistiveText.loaderActive,\n      }\"\n      class=\"base-autocomplete-input__input-field\"\n      @keydown.enter.prevent=\"onEnter\"\n      @keydown.up.down.prevent=\"onArrowKey\"\n      @keydown=\"onKeydown\"\n      v-on=\"inputListeners\">\n      <template #below-input>\n        <BaseDropDownList\n          v-if=\"isActiveInt\"\n          :drop-down-options=\"filteredListInt\"\n          :active-option.sync=\"activeOption\"\n          :identifier-property-name=\"identifierPropertyName\"\n          :label-property-name=\"labelPropertyName\"\n          :list-id=\"`${id}-list-identifier`\"\n          :language=\"language\"\n          :drop-down-no-options-info=\"dropDownNoOptionsInfo\"\n          :use-highlight-string-match=\"highlightStringMatch\"\n          :highlight-string-tags=\"highlightStringTags\"\n          :highlight-string-match=\"inputInt\"\n          class=\"base-autocomplete-input__drop-down\"\n          @click.native.stop=\"\"\n          @touchstart.native.stop=\"\"\n          @update:selected-option=\"selectOption\">\n          <template #option=\"{ option }\">\n            <!-- @slot provide custom drop down options\n              @binding {string, Object} item - the option from provided options list -->\n            <slot\n              :item=\"option\"\n              name=\"drop-down-entry\" />\n          </template>\n        </BaseDropDownList>\n      </template>\n      <template\n        #label-addition>\n        <!-- @slot Slot to allow for additional elements on the right side of the label row <div> (e.g. language tabs)). for an example see [BaseChipsInputField](BaseChipsInputField)-->\n        <slot name=\"label-addition\" />\n      </template>\n      <template #pre-input-field>\n        <!-- @slot slot to add elements within the form field but in a row before the actual input field. for an example see [BaseChipsInputField](BaseChipsInputField)-->\n        <slot name=\"pre-input-field\" />\n      </template>\n      <template\n        #input-field-addition-before>\n        <!-- @slot Slot to allow for additional elements in the input field <div> (before <input>). for an example see [BaseChipsInputField](BaseChipsInputField)-->\n        <slot name=\"input-field-addition-before\" />\n      </template>\n      <template #input-field-inline-before>\n        <!-- @slot to add elements directly inline before the input (contrary to `input-field-addition-before` this does not wrap. for an example see [BaseInput](BaseInput)-->\n        <slot name=\"input-field-inline-before\" />\n      </template>\n      <template #input-field-addition-after>\n        <!-- @slot for adding elements after input -->\n        <slot name=\"input-field-addition-after\" />\n      </template>\n      <template #post-input-field>\n        <!-- @slot for adding elements at the end covering the whole height. for an example see [BaseChipsInputField](BaseChipsInputField)-->\n        <slot name=\"post-input-field\" />\n      </template>\n      <template #error-icon>\n        <!-- @slot use a custom icon instead of standard error/warning icon. for an example see [BaseChipsInputField](BaseChipsInputField)-->\n        <slot name=\"error-icon\" />\n      </template>\n      <template #remove-icon>\n        <!-- @slot use a custom icon instead of standard remove icon. for an example see [BaseChipsInputField](BaseChipsInputField)-->\n        <slot name=\"remove-icon\" />\n      </template>\n    </BaseInput>\n  </div>\n</template>\n\n<script>\nimport BaseInput from '@/components/BaseInput/BaseInput';\nimport BaseDropDownList from '@/components/BaseDropDownList/BaseDropDownList';\nimport { createId } from '@/utils/utils';\nimport { useAnnouncer } from '@/composables/useAnnouncer';\nimport { ref } from 'vue';\nimport navigateMixin from '../../mixins/navigateList';\n\n/**\n * Input component allowing to select single values from a drop down that are filled into\n * the input field as string\n */\n\nexport default {\n  name: 'BaseAutocompleteInput',\n  components: {\n    BaseInput,\n    BaseDropDownList,\n  },\n  mixins: [\n    navigateMixin,\n  ],\n  model: {\n    prop: 'input',\n    event: 'input',\n  },\n  props: {\n    /**\n     * input field settable from outside\n     */\n    input: {\n      type: [String, Number],\n      default: '',\n    },\n    /**\n     * provide a list of options for the drop down.\n     * could be a list of strings or objects - if it is objects if necessary please adapt\n     * the props `labelPropertyName` (value to be displayed) and `identifierPropertyName` (used for\n     * identification) for correct handling\n     */\n    list: {\n      type: Array,\n      default: () => [],\n    },\n    /** label for input field, required for usability purposes, handle\n     * showing of label with property `showLabel`\n     */\n    label: {\n      type: String,\n      required: true,\n    },\n    /**\n     * defines if input label should be visible\n     */\n    showLabel: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * if field is occurring more then once - set an id\n     * in case a custom input is used with the input slot it is important to\n     * assign the same id to the input element\n     */\n    id: {\n      type: String,\n      default: '',\n    },\n    /**\n     * set a placeholder for the input field\n     */\n    placeholder: {\n      type: String,\n      default: 'Enter Text Here',\n    },\n    /**\n     * mark as required field (currently only used for `aria-required`)\n     */\n    required: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * mark the form field as invalid and ideally also provide an error message\n     * to display below the form field\n     */\n    invalid: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * add an error message to be displayed below form field if field is invalid\n     */\n    errorMessage: {\n      type: String,\n      default: '',\n    },\n    /**\n     * define if error icon should be shown\n     */\n    showErrorIcon: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * set input field in active state from outside.\n     * the `.sync` modifier can be used on this prop\n     */\n    isActive: {\n      type: Boolean,\n      default: null,\n    },\n    /**\n     * option to have the border of the input field not displayed\n     */\n    showInputBorder: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * define if standard form field styling should be\n     * used (otherwise no box shadow)\n     */\n    useFormFieldStyling: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * if `true` a remove icon (or a custom icon if slot `remove-icon` is used) will be shown allowing to remove\n     * all input at once\n     */\n    clearable: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * if `true` space is reserved for a loader that can be activated\n     * with the 'isLoading' prop\n     */\n    loadable: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * show spinner to indicate that something is loading\n     * (for dynamically fetched entries that need to do backend requests)\n     */\n    isLoading: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * set a language (ISO 639-1)\n     */\n    language: {\n      type: String,\n      default: '',\n    },\n    /**\n     * set `true` if input field should be disabled\n     */\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * specify the object property that should be used as identifier\n     */\n    identifierPropertyName: {\n      type: String,\n      default: 'id',\n    },\n    /**\n     * specify the object property that should be used as value to be displayed\n     */\n    labelPropertyName: {\n      type: String,\n      default: 'label',\n    },\n    /**\n     * message displayed when no selectable options are available\n     */\n    dropDownNoOptionsInfo: {\n      type: String,\n      default: 'No options available',\n    },\n    /**\n     * if this is `true` parent needs to take care of filling the options list on string\n     * input etc. - useful for fetching autocomplete options from a backend\n     */\n    dynamicFetch: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * set this flag to `true` to highlight autocomplete option characters that match\n     *  the current search input string\n     */\n    highlightStringMatch: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * if `highlightAutocompleteMatch` is set `true`\n     *  provide tag names to style the matched characters\n     *  (without '<' and '>', e.g. ['b'] for <b>)\n     */\n    highlightStringTags: {\n      type: Array,\n      default: () => ([]),\n    },\n    /**\n     * add text that is announced when results are being fetched (prop\n     *  `isLoading` is set `true`) and when results were retrieved (drop down\n     *  list changed)\n     */\n    assistiveText: {\n      type: Object,\n      default: () => ({\n        loaderActive: 'Drop down options are loading.',\n        resultsRetrieved: '{number} options found with your input.',\n      }),\n    },\n  },\n  setup() {\n    /**\n     * set up component reference\n     * @type {Ref<UnwrapRef<null|HTMLElement>>}\n     */\n    const autocompleteInput = ref(null);\n    // use composable to announce screen reader text on actions taken (e.g.\n    // add chip to selected list or remove chip\n    const { announcement } = useAnnouncer(autocompleteInput);\n\n    return {\n      autocompleteInput,\n      announcement,\n    };\n  },\n  data() {\n    return {\n      /**\n       * internal input representation passed on to BaseInput\n       * @type {?string|Object}\n       */\n      inputInt: null,\n      /**\n       * needed for navigation via keyboard in drop down list\n       * the index of the current active option in the list array\n       * @type {number}\n       */\n      activeOptionIndex: -1,\n      /**\n       * internal representation for active state of input and drop down\n       * @type {boolean}\n       */\n      isActiveInt: false,\n      /**\n       * timeout for drop down options found announcer because otherwise\n       * text not read if more than one character entered into input\n       * @type {?number}\n       */\n      timeout: null,\n    };\n  },\n  computed: {\n    inputListeners() {\n      return {\n        // add all the listeners from the parent\n        ...this.$listeners,\n        // and add custom listeners\n        ...{\n          // keep this input from propagating and use own event\n          // (handled this way because this input event is only triggered on\n          // keyboard input not when I select from the drop down)\n          input: () => {},\n          // keep this BaseInput event from propagating and use component's own event\n          'update:is-active': () => {},\n        },\n      };\n    },\n    /**\n     * compute an internal representation for the list to always have an\n     * object with identifier provided to BaseDropDownList\n     * @returns {Object[]}\n     */\n    listInt() {\n      // if list is array of objects - simply return the original prop value\n      return !this.optionsIsListOfStrings\n        // else map the array of strings with internal properties and an internal id\n        ? this.list : this.list.map(option => ({\n          [this.labelPropertyName]: option,\n          [this.identifierPropertyName]: `${option}-${createId()}`,\n        }));\n    },\n    /**\n     * additionally if the list is not fetched dynamically filter already selected\n     * options from the  list\n     * (since inputInt is always only string now this can only be done by comparing\n     * the label!)\n     */\n    filteredListInt() {\n      // check if list content is fetched dynamically\n      if (!this.dynamicFetch) {\n        // if not filter input string by label property\n        return this.listInt\n          .filter(option => option[this.labelPropertyName].toLowerCase()\n            .includes(this.inputInt.toLowerCase()));\n      }\n      // else just return the unmodified list\n      return this.listInt;\n    },\n    /**\n     * determine if list prop is array of strings or objects\n     * @returns {boolean}\n     */\n    optionsIsListOfStrings() {\n      return !!this.list && !!this.list.length && typeof this.list[0] === 'string';\n    },\n    /**\n     * the currently active option object\n     */\n    activeOption: {\n      /**\n       * setter function of activeOption - will set active option index\n       * @param {?Object} val - the active option (by hover or arrow key use)\n       */\n      set(val) {\n        this.activeOptionIndex = this.listInt.indexOf(val);\n      },\n      /**\n       * getter function for activeOption - determined by active option index\n       * @returns {?Object}\n       */\n      get() {\n        return this.listInt[this.activeOptionIndex];\n      },\n    },\n  },\n  watch: {\n    /**\n     * watch input prop to update internal representation\n     */\n    input: {\n      handler(val) {\n        if (val !== this.inputInt) {\n          this.inputInt = val;\n        }\n      },\n      immediate: true,\n    },\n    /**\n     * watch internal input variable to inform parent of changes if necessary\n     * @param {Object|string} val\n     */\n    inputInt(val) {\n      if (val !== this.input) {\n        /**\n         * event triggered when input changes - part of v-model\n         * @event input\n         * @param {string} - the altered input string\n         */\n        this.$emit('input', val);\n      }\n      // if options should be fetched dynamically trigger event when inputInt changes\n      if (this.dynamicFetch) {\n        /**\n         * an event specifically triggered when drop down should be fetched anew\n         * when `dynamicFetch` is set `true`\n         * @event fetch-dropdown-entries\n         * @property {string} value\n         */\n        this.$emit('fetch-dropdown-entries', { value: val });\n      }\n    },\n    isActive: {\n      /**\n       * watch prop isActive to sync with internal variable\n       * @param {boolean} val - is input active\n       */\n      handler(val) {\n        // check first if internal and external variable differ\n        if (val !== this.isActiveInt) {\n          this.isActiveInt = val;\n        }\n      },\n      immediate: true,\n    },\n    /**\n     * watch internal is active variable to be able to inform parent about\n     * changes\n     * @param {boolean} val\n     */\n    isActiveInt(val) {\n      // if input is not active anymore reset the active option index\n      if (!val) {\n        this.activeOptionIndex = -1;\n      }\n      /**\n       * update when active state of input field changes\n       * the `.sync` modifier can be used on this event\n       * @event update:is-active\n       * @param {boolean} - is input field active\n       */\n      this.$emit('update:is-active', val);\n    },\n    filteredListInt(val) {\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n        this.timeout = null;\n      }\n      // adding this timeout because with dynamicFetch false the list\n      // changes immediately and announcement text is not always read\n      this.timeout = setTimeout(() => {\n        // only read announcement if drop down is open\n        if (this.isActiveInt) {\n          if (val.length) {\n            this.announcement = this.assistiveText.resultsRetrieved\n              .replace('{number}', val.length);\n          } else {\n            this.announcement = this.dropDownNoOptionsInfo;\n          }\n        }\n      }, 1000);\n    },\n  },\n  methods: {\n    /**\n     * event for keydown arrow (up, down) key use\n     *\n     * @param {KeyboardEvent} event - the keydown event\n     */\n    onArrowKey(event) {\n      // check if the list has any options\n      if (this.listInt.length) {\n        // if yes trigger the navigate function\n        this.activeOption = this.navigate(\n          this.listInt,\n          event.key === 'ArrowDown',\n          this.activeOptionIndex,\n          false,\n          true,\n        );\n      }\n    },\n    /**\n     * triggered on keydown enter event and will add\n     * a selected option\n     */\n    onEnter() {\n      // check if there is a currently active option\n      if (this.activeOption) {\n        this.selectOption(this.activeOption);\n        // if enter was not pressed to add an option from the drop down\n        // use it to toggle the drop down\n      } else {\n        this.isActiveInt = false;\n      }\n    },\n    /**\n     * if user continues typing after 'enter' (which closes the drop down)\n     * the dropdown should open again\n     */\n    onKeydown(event) {\n      const { key } = event;\n      if (!['Tab', 'Enter'].includes(key)) {\n        this.isActiveInt = true;\n      }\n    },\n    /**\n     * function to toggle the drop down e.g. on space or enter key\n     */\n    toggleDropDown() {\n      this.isActiveInt = !this.isActiveInt;\n    },\n    /**\n     * @param {Object} selectedOption - the option selected from drop down or by keyboard\n     * enter - always an object due to internal identifier prop added in case it was a string\n     */\n    selectOption(selectedOption) {\n      // assign the newly selected value to the input field (only the string from label prop!)\n      this.inputInt = selectedOption[this.labelPropertyName];\n      // if options list was objects also inform parent which option was selected separately\n      if (!this.optionsIsListOfStrings) {\n        // therefore identify the selected option from the list\n        const originalOption = this.list\n          .find(option => option[this.identifierPropertyName]\n            === selectedOption[this.identifierPropertyName]);\n        this.$emit('selected', originalOption);\n      } else {\n        /**\n         * inform parent when an option was selected with all information provided in options list\n         * (mainly useful when options list was array of objects - if strings this information\n         * is provided with input event anyways)\n         * @event selected\n         * @param {string, Object} - selected option (if list of objects was provided the whole object)\n         */\n        this.$emit('selected', this.inputInt);\n      }\n      // close the drop down and blur input\n      this.isActiveInt = false;\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.base-autocomplete-input {\n  .base-autocomplete-input__input-field {\n    .base-autocomplete-input__drop-down {\n      background: white;\n      min-width: 100%;\n    }\n  }\n}\n</style>\n"],"names":["_sfc_main","BaseInput","BaseDropDownList","navigateMixin","autocompleteInput","ref","announcement","useAnnouncer","option","createId","val","event","key","selectedOption","originalOption"],"mappings":"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"}