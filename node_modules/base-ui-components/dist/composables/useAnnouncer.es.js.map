{"version":3,"file":"useAnnouncer.es.js","sources":["../../src/composables/useAnnouncer.js"],"sourcesContent":["import { ref, watch } from 'vue';\n\n/**\n * composable to add an HTML element to a component that uses aria-live 'assertive'\n *  to announce provided text\n *\n * @param {Ref<UnwrapRef<null|HTMLElement>>} target - a reference to an element where the announcer should\n *  be appended to\n * @param {number} timeout - time (in ms) to wait until announcement text is deleted again\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function useAnnouncer(target, timeout = 300) {\n  /**\n   * variable to save the assertive element to be able to update / delete the\n   * innerText from it\n   * @type {Ref<UnwrapRef<null|HTMLElement>>}\n   */\n  const assertiveElement = ref(null);\n  /**\n   * variable to control the text to be read\n   * @type {Ref<UnwrapRef<string>>}\n   */\n  const announcement = ref('');\n\n  // automatically delete the text again after a timeout, so the\n  // same text could be read again at a later point in time\n  function clearText() {\n    setTimeout(() => {\n      // reset HTML element inner text\n      assertiveElement.value.innerText = '';\n      // and announcement string (so changes to it can be detected)\n      announcement.value = '';\n    }, timeout);\n  }\n\n  // watch the provided announcement value for changes and update\n  // the element inner text if necessary\n  watch(announcement, (val) => {\n    // first check if the target element exists, so assertive element could be set\n    if (!target.value) {\n      // eslint-disable-next-line no-console\n      console.warn('Announcement element could not be set because the target reference is undefined!');\n      return;\n    }\n    // if a string was set assign it to the HTML element created earlier\n    if (val) {\n      assertiveElement.value.innerText = val;\n      // afterward trigger the text clearance\n      clearText();\n    }\n  });\n\n  /**\n   * unfortunately it is currently not possible to use onMounted with the nuxt frontend\n   * (warning: nuxt [Vue warn]: onMounted is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup().)\n   * therefore we use a watcher on the element reference and add the assertive\n   * element once this is there\n   */\n  watch(target, () => {\n    if (target.value) {\n      // create a HTML element\n      assertiveElement.value = document.createElement('div');\n      // use the 'hide' class to hide it from the screen\n      assertiveElement.value.classList.add('hide');\n      // set the aria-live attribute to 'assertive' so it is announced as soon as it\n      // is filled with text\n      assertiveElement.value.setAttribute('aria-live', 'assertive');\n      // append the element to the component\n      target.value.appendChild(assertiveElement.value);\n    }\n  });\n\n  return {\n    // export announcement variable so it can be modified in the component\n    announcement,\n  };\n}\n"],"names":["useAnnouncer","target","timeout","arguments","length","undefined","assertiveElement","ref","announcement","clearText","setTimeout","value","innerText","watch","val","console","warn","document","createElement","classList","add","setAttribute","appendChild"],"mappings":";AAWO,SAASA,EAAaC,GAAuB;AAAA,MAAfC,IAAOC,UAAAC,SAAA,KAAAD,UAAA,CAAA,MAAAE,SAAAF,UAAA,CAAA,IAAG,KAMvCG,IAAmBC,EAAI,IAAI,GAK3BC,IAAeD,EAAI,EAAE;AAI3B,WAASE,IAAY;AACnBC,eAAW,WAAM;AAEfJ,MAAAA,EAAiBK,MAAMC,YAAY,IAEnCJ,EAAaG,QAAQ;AAAA,IACtB,GAAET,CAAO;AAAA,EACZ;AAIAW,SAAAA,EAAML,GAAc,SAACM,GAAQ;AAE3B,QAAI,CAACb,EAAOU,OAAO;AAEjBI,cAAQC,KAAK,kFAAkF;AAC/F;AAAA,IACF;AAEA,IAAIF,MACFR,EAAiBK,MAAMC,YAAYE,GAEnCL;EAEJ,CAAC,GAQDI,EAAMZ,GAAQ,WAAM;AAClB,IAAIA,EAAOU,UAETL,EAAiBK,QAAQM,SAASC,cAAc,KAAK,GAErDZ,EAAiBK,MAAMQ,UAAUC,IAAI,MAAM,GAG3Cd,EAAiBK,MAAMU,aAAa,aAAa,WAAW,GAE5DpB,EAAOU,MAAMW,YAAYhB,EAAiBK,KAAK;AAAA,EAEnD,CAAC,GAEM;AAAA;AAAA,IAELH,cAAAA;AAAAA;AAEJ;"}