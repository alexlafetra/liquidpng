{"version":3,"file":"BaseEditControl.vue.cjs.js","sources":["../../../src/components/BaseEditControl/BaseEditControl.vue"],"sourcesContent":["<template>\n  <div\n    class=\"base-edit-control\">\n    <component\n      :is=\"renderTitleAs\"\n      v-if=\"title\"\n      class=\"base-edit-control__title  base-text-fade-out-background\">\n      <!-- @slot title slot -->\n      <slot>\n        {{ title }}\n        <span\n          v-if=\"subtitle\"\n          class=\"base-edit-control__title__additional\">\n          {{ subtitle }}\n        </span>\n      </slot>\n    </component>\n\n    <div\n      v-if=\"controls\"\n      class=\"base-edit-control__buttons\">\n      <base-button\n        v-if=\"!edit\"\n        :disabled=\"disabled\"\n        :has-background-color=\"false\"\n        :icon=\"!isLoading ? 'edit' : ''\"\n        :text=\"getI18nTerm(editButtonText)\"\n        class=\"base-edit-control__button\"\n        @clicked=\"activate\">\n        <template\n          v-if=\"isLoading\"\n          slot=\"left-of-text\">\n          <span class=\"base-edit-control__loader\">\n            <BaseLoader />\n          </span>\n        </template>\n      </base-button>\n\n      <base-button\n        v-if=\"edit\"\n        :disabled=\"disabled\"\n        :has-background-color=\"false\"\n        :icon=\"saveButtonIcon\"\n        :text=\"getI18nTerm(saveButtonTextInt)\"\n        class=\"base-edit-control__button\"\n        @clicked=\"save\">\n        <template\n          v-if=\"isLoading\"\n          slot=\"left-of-text\">\n          <span class=\"base-edit-control__loader\">\n            <BaseLoader />\n          </span>\n        </template>\n      </base-button>\n\n      <base-button\n        v-if=\"editMode === 'save' && edit\"\n        :has-background-color=\"false\"\n        icon=\"remove\"\n        :text=\"getI18nTerm(cancelButtonText)\"\n        class=\"base-edit-control__button\"\n        @clicked=\"cancel\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport BaseButton from '@/components/BaseButton/BaseButton';\nimport BaseLoader from '@/components/BaseLoader/BaseLoader';\nimport i18n from '../../mixins/i18n';\n\nexport default {\n  name: 'BaseEditControl',\n  components: {\n    BaseButton,\n    BaseLoader,\n  },\n  mixins: [\n    i18n,\n  ],\n  props: {\n    /**\n     * toggle control buttons\n     */\n    controls: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * disable edit button\n     */\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * set edit mode\n     */\n    edit: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * flag to set if loader should be shown (for autocomplete requests\n     */\n    isLoading: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * define title\n     */\n    title: {\n      type: String,\n      default: 'Title',\n    },\n    /**\n     * define subtitle\n     */\n    subtitle: {\n      type: String,\n      default: '',\n    },\n    /**\n     * render title as e.g.: 'h2' | 'h3'\n     */\n    renderTitleAs: {\n      type: String,\n      default: 'h2',\n    },\n    /**\n     * define button text.\n     * could be string or path to i18n json as well\n     */\n    editButtonText: {\n      type: String,\n      default: 'Edit',\n    },\n    /**\n     * define button text.\n     * could be string or path to i18n json as well\n     */\n    cancelButtonText: {\n      type: String,\n      default: 'Cancel',\n    },\n    /**\n     * define button text.\n     * could be string or path to i18n json as well\n     */\n    saveButtonText: {\n      type: String,\n      default: '',\n    },\n    /**\n     * decide on buttons presented in edit mode.\n     *  **save**: element has a 'save' and 'cancel' button\n     *  **done**: element solely has a 'done' button. this button is also emitting\n     *    a `saved` event when clicked and uses the `saveButtonText`\n     */\n    editMode: {\n      type: String,\n      default: 'save',\n      validator: val => ['save', 'done'].includes(val),\n    },\n  },\n  computed: {\n    /**\n     * set icon depending on editMode\n     * @returns {string}\n     */\n    saveButtonIcon() {\n      if (this.isLoading) {\n        return '';\n      }\n      return this.editMode === 'done' ? 'check-mark' : 'save-file';\n    },\n    /**\n     * set default save button text depending on editMode\n     * @returns {string}\n     */\n    saveButtonTextInt() {\n      return this.saveButtonText || (this.editMode === 'done' ? 'Done' : 'Save');\n    },\n  },\n  watch: {\n    edit: {\n      handler(val) {\n        if (val) {\n          window.addEventListener('keyup', this.escEventHandler);\n        } else {\n          window.removeEventListener('keyup', this.escEventHandler);\n        }\n      },\n    },\n  },\n  methods: {\n    activate(event) {\n      /**\n       * event emitted by click on edit button\n       *\n       * @event activated\n       * @param {PointerEvent} - the native pointer event\n       */\n      this.$emit('activated', event);\n    },\n    cancel(event) {\n      /**\n       * event emitted by click on cancel button\n       * @event canceled\n       * @param {PointerEvent} - the native pointer event\n       */\n      this.$emit('canceled', event);\n    },\n    save(event) {\n      /**\n       * event emitted by click on save button\n       * @event saved\n       * @param {PointerEvent} - the native pointer event\n       */\n      this.$emit('saved', event);\n    },\n    /**\n     * intercept escape key event and reset edit mode\n     */\n    escEventHandler(e) {\n      if (e.key === 'Escape') {\n        this.cancel();\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n  @import \"../../styles/variables\";\n\n  .base-edit-control {\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    min-height: $row-height-small;\n\n    &__title {\n      flex-grow: 1;\n      justify-self: flex-start;\n      margin-bottom: 0;\n      white-space: nowrap;\n      overflow: hidden;\n      position: relative;\n      z-index: 0;\n\n      &__additional {\n        font-weight: normal;\n        font-size: $font-size-small;\n        color: $font-color-second;\n      }\n    }\n\n    &__buttons {\n      display: flex;\n      align-items: center;\n    }\n\n    &__button {\n      &:last-of-type {\n        padding-right: 0;\n        transition-property: color;\n      }\n    }\n\n    &__loader {\n      position: relative;\n      margin-right: $spacing;\n      transform: scale(0.45);\n      /* adjusted for 'save-file' icon */\n      top: 2px;\n      height: 12px;\n      width: 12px;\n    }\n  }\n</style>\n"],"names":["_sfc_main","BaseButton","BaseLoader","i18n","val","event","e"],"mappings":"oWAuEAA,EAAA,CACA,KAAA,kBACA,WAAA,CACA,WAAAC,EAAA,QACA,WAAAC,EAAA,OACA,EACA,OAAA,CACAC,EAAA,OACA,EACA,MAAA,CAIA,SAAA,CACA,KAAA,QACA,QAAA,EACA,EAIA,SAAA,CACA,KAAA,QACA,QAAA,EACA,EAIA,KAAA,CACA,KAAA,QACA,QAAA,EACA,EAIA,UAAA,CACA,KAAA,QACA,QAAA,EACA,EAIA,MAAA,CACA,KAAA,OACA,QAAA,OACA,EAIA,SAAA,CACA,KAAA,OACA,QAAA,EACA,EAIA,cAAA,CACA,KAAA,OACA,QAAA,IACA,EAKA,eAAA,CACA,KAAA,OACA,QAAA,MACA,EAKA,iBAAA,CACA,KAAA,OACA,QAAA,QACA,EAKA,eAAA,CACA,KAAA,OACA,QAAA,EACA,EAOA,SAAA,CACA,KAAA,OACA,QAAA,OACA,UAAAC,GAAA,CAAA,OAAA,MAAA,EAAA,SAAAA,CAAA,CACA,CACA,EACA,SAAA,CAKA,gBAAA,CACA,OAAA,KAAA,UACA,GAEA,KAAA,WAAA,OAAA,aAAA,WACA,EAKA,mBAAA,CACA,OAAA,KAAA,iBAAA,KAAA,WAAA,OAAA,OAAA,OACA,CACA,EACA,MAAA,CACA,KAAA,CACA,QAAAA,EAAA,CACAA,EACA,OAAA,iBAAA,QAAA,KAAA,eAAA,EAEA,OAAA,oBAAA,QAAA,KAAA,eAAA,CAEA,CACA,CACA,EACA,QAAA,CACA,SAAAC,EAAA,CAOA,KAAA,MAAA,YAAAA,CAAA,CACA,EACA,OAAAA,EAAA,CAMA,KAAA,MAAA,WAAAA,CAAA,CACA,EACA,KAAAA,EAAA,CAMA,KAAA,MAAA,QAAAA,CAAA,CACA,EAIA,gBAAAC,EAAA,CACAA,EAAA,MAAA,UACA,KAAA,OAAA,CAEA,CACA,CACA"}