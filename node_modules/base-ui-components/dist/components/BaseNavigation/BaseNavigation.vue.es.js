import d from "../BaseButton/BaseButton.vue.es.js";
import c from "../BaseLink/BaseLink.vue.es.js";
import { debounce as u } from "../../utils/utils.es.js";
import "./BaseNavigation.vue.es2.js";
import v from "../../_virtual/_plugin-vue2_normalizer.es.js";
const m = {
  name: "BaseNavigation",
  components: {
    BaseButton: d,
    BaseLink: c
  },
  props: {
    /**
     * list of primary navigation items, with the following properties:
     *
     *    **id** `string` - a unique id
     *    **label** `string` - a label for the route to be displayed
     *    **shortLabel** `string?` - a shorter version of the label to be shown if the regular label does not
     *      fit the element anymore
     *    **route** `string?` - the route of the element should navigate to
     *    **url** `string?` - the external url to navigate to on element click
     *    **routeMatch** `RegEx?` - provide a regular expression that will be used to determine
     *      the currently active element
     *
     *  caveat: the object requires either the `route` or the `url` property!
     *
     * on a desktop screen, these elements will be rendered on the left-hand side of the navigation
     * on a mobile screen, these elements will be rendered in the upper half of the dropdown list
     */
    primaryItems: {
      type: Array,
      default: () => [
        {
          id: "1",
          label: "Label",
          shortLabel: "",
          route: "/"
        }
      ],
      validator: (n) => n.every((e) => !["id", "label"].some((i) => !Object.keys(e).includes(i)) && (e.route || e.url))
    },
    /**
     * list of secondary navigation items, with the following properties:
     *
     *    **id** `string` - a unique id
     *    **label** `string` - a label for the route to be displayed
     *    **shortLabel** `?string` - a shorter version of the label to be shown if the regular label does not
     *      fit the element anymore
     *   **route** `string?` - the route of the element should navigate to
     *    **url** `string?` - the external url to navigate to on element click
     *    **routeMatch** `RegEx?` - provide a regular expression that will be used to determine
     *      the currently active element
     *
     *  caveat: the object requires either the `route` or the `url` property!
     *
     * on a desktop screen, these elements will be rendered on the right-hand side of the navigation
     * on a mobile screen, these elements will be rendered in the lower half of the dropdown list
     */
    secondaryItems: {
      type: Array,
      default: () => [
        {
          id: "1",
          label: "Label",
          shortLabel: "",
          route: "/"
        }
      ],
      validator: (n) => n.every((e) => !["id", "label"].some((i) => !Object.keys(e).includes(i)) && (e.route || e.url))
    },
    /**
     * specify how link element should be rendered - this needs to be a
     * valid vue link component (e.g. `RouterLink`, `NuxtLink`) and vue-router
     * is necessary
     */
    renderAs: {
      type: String,
      default: "a",
      validate: (n) => ["RouterLink", "NuxtLink", "a"].includes(n)
    },
    /**
     * specify a label for the navigation bar - for accessibility reasons
     */
    navigationLabel: {
      type: String,
      default: "App Navigation"
    },
    /**
     * provide a accessible label for the mobile menu icon
     */
    menuButtonLabel: {
      type: String,
      default: "Toggle Navigation"
    },
    /**
     * active Element can be set two ways:
     * 1) provide a regex in property `routeMatch` for each element in
     *  `primaryItems` and `secondaryItems`
     * 2) handle the active element in the front end and set the active
     *  element id with this property - this property will have priority over
     *  `routeMatch`
     */
    activeElementId: {
      type: [String, Number],
      default: null
    },
    /**
     * define a custom size (in px) when the component should switch to mobile view
     *  (with hamburger menu icon)
     */
    mobileSize: {
      type: Number,
      default: 640
    }
  },
  data() {
    return {
      /**
       * variable to control navigation drop down on mobile
       * @type {boolean}
       */
      navOpen: !1,
      /**
       * after calculating all the element widths - should short label be shown?
       * @type {boolean}
       */
      showShortLabel: !1,
      /**
       * resize observer to recalculate if label fits or short label should be shown
       * @type {any}
       */
      resizeTimeout: null,
      /**
       * store if window size is mobile <640px (or custom `mobileSize`) to render correct elements
       */
      isMobile: !1
    };
  },
  computed: {
    /**
     * determine if router is available
     * @returns {boolean}
     */
    routerAvailable() {
      return !!this.$router;
    },
    /**
     * provide a list of all nav elements on the page (=primary and secondary items
     *  combined)
     * @returns {Object[]}
     */
    navElements() {
      return [].concat(this.primaryItems, this.secondaryItems);
    },
    /**
     * return the active list element or an empty object if $route not initialized yet
     * (empty object to avoid undefined errors)
     * @returns {{}|Object}
     */
    activeElement() {
      let n = null;
      if (this.activeElementId)
        n = this.navElements.find((e) => e.id === this.activeElementId);
      else if (this.$route) {
        const { path: e } = this.$route;
        n = this.navElements.find((i) => i.routeMatch && e.search(i.routeMatch) >= 0), n || (n = this.navElements.find((i) => e === i.route));
      }
      return !n && !this.navElements.some((e) => e.routeMatch) && !this.activeElementId && console.warn("Attention - no active element could be identified and the first list item will be used!Please set an active element via prop `activeElementId` or `routeMatch` property."), n || this.navElements[0];
    },
    /**
     * the id of the currently active element
     * @returns {?string}
     */
    activeElementIdInt() {
      var n;
      return ((n = this.activeElement) == null ? void 0 : n.id) ?? "";
    },
    /**
     * list of navigation elements minus the currently active element
     * @returns {Object[]}
     */
    mobileDropDownElements() {
      return this.navElements.filter((n) => n.id !== this.activeElementIdInt);
    },
    /**
     * return all elements that should appear in the mobile drop down below the separation line
     * (filtering out the active item)
     * @returns {Object[]}
     */
    mobileRightElements() {
      return this.secondaryItems.filter((n) => n.id !== this.activeElementIdInt);
    },
    /**
     * return all elements that should appear in the mobile drop down above the separation line
     * (filtering out the active item)
     * @returns {Object[]}
     */
    mobileLeftElements() {
      return this.primaryItems.filter((n) => n.id !== this.activeElementIdInt);
    },
    /**
     * drop down primary and secondary separator should only be shown if in total min 3 items
     * @returns {boolean}
     */
    showSeparator() {
      return !!this.mobileLeftElements.length && !!this.mobileRightElements.length && this.mobileLeftElements.length + this.mobileRightElements.length > 2;
    }
  },
  mounted() {
    this.calcIsMobile(), this.$nextTick(() => {
      this.calcTextWidth();
    }), window.addEventListener("resize", this.resizeTriggered);
  },
  destroyed() {
    window.removeEventListener("resize", this.resizeTriggered);
  },
  methods: {
    /**
     * determine if labels fit the navigation element or if short labels should be used
     */
    calcTextWidth() {
      const n = this.isMobile ? "mobileViewNavigation" : "desktopNavigation", e = this.$refs[n].cloneNode(!0), i = this.$refs[n].clientWidth;
      if (e.style.maxWidth = `${i}px`, this.$refs[n].parentElement.append(e), this.isMobile) {
        const t = this.$refs.menuButton.$el.clientWidth, a = e.firstChild.firstChild, s = a.firstChild, l = Number(window.getComputedStyle(a).paddingLeft.replace("px", ""));
        s.innerText = this.activeElement.label, this.showShortLabel = i - t - 2 * l < s.scrollWidth || this.mobileDropDownElements.some((r) => (s.innerText = r.label, Math.ceil(i - 2 * l) < s.scrollWidth));
      } else
        this.showShortLabel = [...e.childNodes].flat().filter((t) => t instanceof HTMLElement && t.getElementsByClassName("base-navigation__nav-item-link")[0]).some((t, a) => {
          var o;
          const s = t.firstChild, l = s.firstChild;
          l.innerText = (o = this.navElements[a]) == null ? void 0 : o.label;
          const r = Number(window.getComputedStyle(s).paddingLeft.replace("px", ""));
          return Math.ceil(s.clientWidth - 2 * r) < l.scrollWidth;
        });
      e.remove();
    },
    /**
     * resize function with timeout to minimize number of label display recalculations
     */
    resizeTriggered() {
      u(300, () => {
        this.calcIsMobile(), this.$nextTick(() => {
          this.calcTextWidth();
        });
      })();
    },
    /**
     * set isMobile variable (function called on window resize)
     */
    calcIsMobile() {
      this.isMobile = (window == null ? void 0 : window.innerWidth) < this.mobileSize;
    }
  }
};
var h = function() {
  var e = this, i = e._self._c;
  return i("nav", { staticClass: "base-navigation", attrs: { "aria-label": e.navigationLabel } }, [e.isMobile ? [i("div", { ref: "mobileViewNavigation", staticClass: "base-navigation__mobile-nav-bar" }, [i("div", { staticClass: "base-navigation__nav-item" }, [i("BaseLink", { staticClass: "base-navigation__nav-item-link base-navigation__nav-item-link--active", attrs: { "render-link-as": e.renderAs, value: e.showShortLabel && e.activeElement.shortLabel ? e.activeElement.shortLabel : e.activeElement.label, "additional-attributes": { ariaCurrentValue: "page", exactPath: !0 }, "identifier-property-value": e.activeElement.route }, scopedSlots: e._u([{ key: "label", fn: function({ label: t }) {
    return [i("span", { class: { "base-navigation__nav-item-link__text--truncation": e.showShortLabel } }, [e._v(" " + e._s(t) + " ")])];
  } }]) })], 1), e.isMobile && e.mobileDropDownElements.length ? i("BaseButton", { ref: "menuButton", staticClass: "base-navigation__mobile-menu-button", attrs: { "button-style": "row", text: "", "icon-title": e.menuButtonLabel, icon: e.navOpen ? "remove" : "drag-lines", "aria-expanded": e.navOpen.toString() }, on: { clicked: function(t) {
    e.navOpen = !e.navOpen;
  } } }) : e._e()], 1), i("transition", { attrs: { name: "translateY" } }, [e.navOpen ? i("ul", { staticClass: "base-navigation__drop-down" }, [e._l(e.mobileLeftElements, function(t) {
    return i("li", { key: `pm-${t.id}`, staticClass: "base-navigation__nav-item" }, [i("BaseLink", { class: [
      "base-navigation__nav-item-link",
      { "base-navigation__nav-item-link--separator": e.mobileLeftElements.length + e.mobileRightElements.length > 2 },
      { "base-navigation__nav-item-link--active": e.activeElementIdInt === t.id }
    ], attrs: { "render-link-as": e.renderAs, value: e.showShortLabel && t.shortLabel ? t.shortLabel : t.label, "identifier-property-value": t.route || void 0, url: t.url || void 0 }, nativeOn: { click: function(a) {
      e.navOpen = !1;
    }, keydown: function(a) {
      if (!a.type.indexOf("key") && e._k(a.keyCode, "enter", 13, a.key, "Enter"))
        return null;
      e.navOpen = !1;
    } }, scopedSlots: e._u([{ key: "label", fn: function({ label: a }) {
      return [i("span", { class: { "base-navigation__nav-item-link__text--truncation": e.showShortLabel } }, [e._v(" " + e._s(a) + " ")])];
    } }], null, !0) })], 1);
  }), e._l(e.mobileRightElements, function(t) {
    return i("li", { key: `sm-${t.id}`, class: [
      "base-navigation__nav-item",
      "base-navigation__nav-item--secondary",
      { "base-navigation__nav-item--separator": e.showSeparator }
    ] }, [i("BaseLink", { class: [
      "base-navigation__nav-item-link",
      { "base-navigation__nav-item-link--active": e.activeElementIdInt === t.id }
    ], attrs: { "render-link-as": e.renderAs, value: e.showShortLabel && t.shortLabel ? t.shortLabel : t.label, "identifier-property-value": t.route || void 0, url: t.url || void 0 }, nativeOn: { click: function(a) {
      e.navOpen = !1;
    }, keydown: function(a) {
      if (!a.type.indexOf("key") && e._k(a.keyCode, "enter", 13, a.key, "Enter"))
        return null;
      e.navOpen = !1;
    } }, scopedSlots: e._u([{ key: "label", fn: function({ label: a }) {
      return [i("span", { class: { "base-navigation__nav-item-link__text--truncation": e.showShortLabel } }, [e._v(" " + e._s(a) + " ")])];
    } }], null, !0) })], 1);
  })], 2) : e._e()])] : i("ul", { ref: "desktopNavigation", staticClass: "base-navigation__nav-items" }, [e._l(e.primaryItems, function(t) {
    return i("li", { key: `p-${t.id}`, staticClass: "base-navigation__nav-item" }, [i("BaseLink", { class: [
      "base-navigation__nav-item-link",
      { "base-navigation__nav-item-link--active": e.activeElementIdInt === t.id }
    ], attrs: { "render-link-as": e.renderAs, value: e.showShortLabel && t.shortLabel ? t.shortLabel : t.label, "aria-current": t.id === e.activeElementIdInt ? "page" : null, "identifier-property-value": t.route || void 0, url: t.url || void 0 }, scopedSlots: e._u([{ key: "label", fn: function({ label: a }) {
      return [i("span", { class: { "base-navigation__nav-item-link__text--truncation": e.showShortLabel } }, [e._v(" " + e._s(a) + " ")])];
    } }], null, !0) })], 1);
  }), e._l(e.secondaryItems, function(t) {
    return i("li", { key: `s-${t.id}`, staticClass: "base-navigation__nav-item base-navigation__nav-item--secondary" }, [i("BaseLink", { class: [
      "base-navigation__nav-item-link",
      { "base-navigation__nav-item-link--active": e.activeElementIdInt === t.id }
    ], attrs: { "render-link-as": e.renderAs, value: e.showShortLabel && t.shortLabel ? t.shortLabel : t.label, "aria-current": t.id === e.activeElementIdInt ? "page" : null, "identifier-property-value": t.route || void 0, url: t.url || void 0 }, scopedSlots: e._u([{ key: "label", fn: function({ label: a }) {
      return [i("span", { class: { "base-navigation__nav-item-link__text--truncation": e.showShortLabel } }, [e._v(" " + e._s(a) + " ")])];
    } }], null, !0) })], 1);
  })], 2)], 2);
}, b = [], _ = /* @__PURE__ */ v(
  m,
  h,
  b,
  !1,
  null,
  "c5ea6286",
  null,
  null
);
const L = _.exports;
export {
  L as default
};
//# sourceMappingURL=BaseNavigation.vue.es.js.map
