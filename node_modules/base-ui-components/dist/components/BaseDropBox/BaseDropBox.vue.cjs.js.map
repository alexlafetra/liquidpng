{"version":3,"file":"BaseDropBox.vue.cjs.js","sources":["../../../src/components/BaseDropBox/BaseDropBox.vue"],"sourcesContent":["<template>\n  <BaseBoxButton\n    v-bind=\"$props\"\n    :box-ratio=\"boxRatio\"\n    :render-element-as=\"renderElementAs\"\n    :disabled=\"disabled\"\n    :class=\"[\n      'base-drop-box',\n      { 'base-box-button-disabled': disabled },\n      { 'is-drag-over': isDragOver }]\"\n    @clicked=\"onClicked\"\n    @onTooltip=\"onTooltip\">\n    <div\n      class=\"base-drop-box-inner\">\n      <draggable\n        v-if=\"dropType === 'elements'\"\n        v-model=\"dragList\"\n        :sort=\"false\"\n        :group=\"dropElementName\"\n        :on-change=\"onDragChange\"\n        ghost-class=\"base-drop-box-ghost\"\n        class=\"base-drop-box-drag-area\"\n        @add=\"addEntry\">\n        <div\n          class=\"base-drop-box-drag-area\"\n          @dragleave=\"dragLeave\"\n          @pointerenter=\"dragEnter\"\n          @pointerleave=\"dragLeave\">\n          <div\n            v-for=\"item in dragList\"\n            :key=\"item.id\"\n            class=\"base-drop-box-cloned-items\">\n            {{ item }}\n          </div>\n        </div>\n      </draggable>\n      <form\n        v-else\n        ref=\"fileform\" />\n    </div>\n  </BaseBoxButton>\n</template>\n\n<script>\nimport Draggable from 'vuedraggable';\nimport BaseBoxButton from '../BaseBoxButton/BaseBoxButton';\n\n/**\n * An Element to drop files or other UI Elements into\n */\n\nexport default {\n  name: 'BaseDropBox',\n  components: {\n    BaseBoxButton,\n    Draggable,\n  },\n  props: {\n    /**\n     * specify an icon to be displayed centered in the box\n     */\n    icon: {\n      type: String,\n      default: null,\n    },\n    /**\n     * if `true` a plus sign is displayed in front of the icon\n     */\n    showPlus: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * the text displayed below the icon\n     */\n    text: {\n      type: String,\n      default: '',\n    },\n    /**\n     * specify a potential subtext\n     */\n    subtext: {\n      type: String,\n      default: '',\n    },\n    /**\n     * define the box size\n     */\n    boxSize: {\n      type: Object,\n      default: () => ({ width: '250px' }),\n    },\n    /**\n     * define the ratio of width and height of the box\n     * (in percent string, e.g. 1:1 --> `'100'`, 1:2 --> `'50'`)\n     */\n    boxRatio: {\n      type: String,\n      default: '100',\n    },\n    /**\n     * specify the tag of the button\n     */\n    renderElementAs: {\n      type: String,\n      default: 'div',\n    },\n    /**\n     * specify the type of drops\n     *     @values files, elements\n     */\n    dropType: {\n      type: String,\n      default: 'files',\n      validate(val) {\n        return ['files', 'elements'].includes(val);\n      },\n    },\n    /**\n     * if the `dropType` is `elements`, specify the element group name\n     * this needs to match the group name of the draggable element that should\n     * be dragged into this element\n     */\n    dropElementName: {\n      type: String,\n      default: '',\n    },\n    /**\n     * if the `dropType` is `elements` specify a class name to limit interactions to a certain element\n     */\n    dragItemClass: {\n      type: String,\n      default: '',\n    },\n    /**\n     * set button inactive\n     */\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * show tooltip\n     */\n    showTooltip: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      dragAndDropCapable: false,\n      isDragOver: false,\n      dragList: [],\n    };\n  },\n  mounted() {\n    this.dragAndDropCapable = this.determineDragAndDropCapable();\n    if (this.dragAndDropCapable && this.dropType === 'files' && !this.disabled) {\n      ['drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop'].forEach(((evt) => {\n        this.$refs.fileform.addEventListener(evt, ((e) => {\n          e.preventDefault();\n          e.stopPropagation();\n        }), false);\n      }));\n      this.$refs.fileform.addEventListener('drop', (e) => {\n        this.isDragOver = false;\n        /**\n         * event emitted when a file or an element is dropped on the box, emitting the type of event\n         *\n         * @event dropped-file\n         * @param { DragEvent } - propagating the triggered event\n         */\n        this.$emit('dropped-file', e);\n      });\n      ['dragenter', 'dragleave'].forEach(((evt) => {\n        this.$refs.fileform.addEventListener(evt, ((originalEvent) => {\n          // kind of hacky solution to prevent target element to change color\n          // only works when draggable prop is set on every draggable element on site\n          // otherwise it will light up on file drop boxes!\n          if (!originalEvent.dataTransfer.types.includes('draggable')) {\n            this.isDragOver = !this.isDragOver;\n          }\n        }));\n      }));\n    }\n  },\n  methods: {\n    onDragChange(evt) {\n      if (!this.isDragOver) {\n        // check if a drag item class was specified otherwise always\n        // set dragging true\n        if (!this.dragItemClass) {\n          this.isDragOver = true;\n          // else check if cloned element contains class name\n        } else if (evt.clone.className.includes(this.dragItemClass)) {\n          this.isDragOver = true;\n        }\n      }\n      return evt.newIndex;\n    },\n    determineDragAndDropCapable() {\n      const div = document.createElement('div');\n      return (('draggable' in div) || ('ondragstart' in div && 'ondrop' in div))\n      && 'FormData' in window && 'FileReader' in window;\n    },\n    /**\n     * method to get the dropped element id and emit it to parent\n     */\n    addEntry(event) {\n      // check if box is for receiving elements (not files)\n      if (this.dropType === 'elements') {\n        // and check if item is currently still dragged over box (draggable event will also\n        // fire if item was dragged outside again)\n        if (this.isDragOver) {\n          const draggedElementId = this.dragList[0].id;\n          /**\n           * event emitted when an element is dropped on the box, emitting the element data id\n           *\n           * @event dropped-element\n           * @param { string } - the id of the dropped element\n           */\n          this.$emit('dropped-element', draggedElementId);\n        }\n        this.dragList = [];\n        // otherwise box stays highlighted on touch\n        if (event.originalEvent.type === 'touchend') {\n          this.isDragOver = false;\n        }\n      }\n    },\n    dragEnter(event) {\n      // trigger click event on touch devices\n      if (event.pointerType === 'touch' && !this.disabled && !this.isDragOver) {\n        this.$emit('clicked', event);\n      }\n    },\n    dragLeave(event) {\n      // to prevent trigger when it is touch device and element was just dropped into box\n      if (!(event.pointerType === 'touch' && !event.relatedTarget)) {\n        this.isDragOver = false;\n      }\n    },\n    onClicked(event) {\n      // on touch devices the click event is handled with dragEnter() due problems on iOS Safari\n      if (('ontouchstart' in window) || (navigator.msMaxTouchPoints > 0)) {\n        return;\n      }\n\n      /**\n       * Triggered when the box or tooltip is clicked\n       *\n       * @event clicked\n       * @param {Event} - propagating the triggered click event\n       */\n      if (!this.disabled) {\n        this.$emit('clicked', event);\n      }\n    },\n    onTooltip(event) {\n      /**\n       * Triggered when the box or tooltip is clicked\n       *\n       * @event clicked\n       * @param {Event} - propagating the triggered click event\n       */\n      this.$emit('clicked', event);\n    },\n  },\n};\n\n</script>\n\n<style lang=\"scss\" scoped>\n  @import '../../styles/variables.scss';\n\n  .base-drop-box {\n    background-color: $background-color !important;\n    display: flex;\n    cursor: text;\n\n    &:hover {\n      color: $app-color !important;\n    }\n\n    .base-drop-box-inner {\n      position: absolute;\n      height: 100%;\n      width: 100%;\n      border: $upload-border;\n      transition: all 0.2s ease;\n\n      &:hover {\n        border: $upload-border-hover;\n        cursor: pointer;\n      }\n\n      .base-drop-box-drag-area {\n        height: 100%;\n      }\n\n      form{\n        text-align: center;\n        height: 100%;\n        width: 100%;\n      }\n    }\n\n    &.base-box-button-disabled {\n\n      .base-drop-box-inner {\n        border-color: $graytext-color;\n\n        &:hover {\n          border-color: $graytext-color;\n          cursor: default;\n          box-shadow: none;\n        }\n      }\n    }\n  }\n\n  .is-drag-over {\n    color: $app-color;\n    cursor: move;\n\n    &:hover {\n      cursor: pointer;\n    }\n\n    .base-drop-box-inner {\n      border: $upload-border-hover;\n    }\n  }\n\n  .base-drop-box-drag-area ::v-deep .base-drop-box-ghost {\n    visibility: hidden !important;\n    position: absolute;\n    top: auto;\n  }\n</style>\n"],"names":["_sfc_main","BaseBoxButton","Draggable","val","evt","e","originalEvent","div","event","draggedElementId"],"mappings":"ySAmDAA,EAAA,CACA,KAAA,cACA,WAAA,CACA,cAAAC,EAAA,QACA,UAAAC,CACA,EACA,MAAA,CAIA,KAAA,CACA,KAAA,OACA,QAAA,IACA,EAIA,SAAA,CACA,KAAA,QACA,QAAA,EACA,EAIA,KAAA,CACA,KAAA,OACA,QAAA,EACA,EAIA,QAAA,CACA,KAAA,OACA,QAAA,EACA,EAIA,QAAA,CACA,KAAA,OACA,QAAA,KAAA,CAAA,MAAA,SACA,EAKA,SAAA,CACA,KAAA,OACA,QAAA,KACA,EAIA,gBAAA,CACA,KAAA,OACA,QAAA,KACA,EAKA,SAAA,CACA,KAAA,OACA,QAAA,QACA,SAAAC,EAAA,CACA,MAAA,CAAA,QAAA,UAAA,EAAA,SAAAA,CAAA,CACA,CACA,EAMA,gBAAA,CACA,KAAA,OACA,QAAA,EACA,EAIA,cAAA,CACA,KAAA,OACA,QAAA,EACA,EAIA,SAAA,CACA,KAAA,QACA,QAAA,EACA,EAIA,YAAA,CACA,KAAA,QACA,QAAA,EACA,CACA,EACA,MAAA,CACA,MAAA,CACA,mBAAA,GACA,WAAA,GACA,SAAA,CAAA,CACA,CACA,EACA,SAAA,CACA,KAAA,mBAAA,KAAA,8BACA,KAAA,oBAAA,KAAA,WAAA,SAAA,CAAA,KAAA,WACA,CAAA,OAAA,YAAA,UAAA,WAAA,YAAA,YAAA,MAAA,EAAA,QAAAC,GAAA,CACA,KAAA,MAAA,SAAA,iBAAAA,EAAA,GAAA,CACA,EAAA,eAAA,EACA,EAAA,gBAAA,CACA,EAAA,EAAA,CACA,GACA,KAAA,MAAA,SAAA,iBAAA,OAAAC,GAAA,CACA,KAAA,WAAA,GAOA,KAAA,MAAA,eAAAA,CAAA,CACA,CAAA,EACA,CAAA,YAAA,WAAA,EAAA,QAAAD,GAAA,CACA,KAAA,MAAA,SAAA,iBAAAA,EAAAE,GAAA,CAIAA,EAAA,aAAA,MAAA,SAAA,WAAA,IACA,KAAA,WAAA,CAAA,KAAA,WAEA,EACA,GAEA,EACA,QAAA,CACA,aAAAF,EAAA,CACA,OAAA,KAAA,aAGA,KAAA,cAGAA,EAAA,MAAA,UAAA,SAAA,KAAA,aAAA,IACA,KAAA,WAAA,IAHA,KAAA,WAAA,IAMAA,EAAA,QACA,EACA,6BAAA,CACA,MAAAG,EAAA,SAAA,cAAA,KAAA,EACA,OAAA,cAAAA,GAAA,gBAAAA,GAAA,WAAAA,IACA,aAAA,QAAA,eAAA,MACA,EAIA,SAAAC,EAAA,CAEA,GAAA,KAAA,WAAA,WAAA,CAGA,GAAA,KAAA,WAAA,CACA,MAAAC,EAAA,KAAA,SAAA,CAAA,EAAA,GAOA,KAAA,MAAA,kBAAAA,CAAA,CACA,CACA,KAAA,SAAA,GAEAD,EAAA,cAAA,OAAA,aACA,KAAA,WAAA,GAEA,CACA,EACA,UAAAA,EAAA,CAEAA,EAAA,cAAA,SAAA,CAAA,KAAA,UAAA,CAAA,KAAA,YACA,KAAA,MAAA,UAAAA,CAAA,CAEA,EACA,UAAAA,EAAA,CAEAA,EAAA,cAAA,SAAA,CAAAA,EAAA,gBACA,KAAA,WAAA,GAEA,EACA,UAAAA,EAAA,CAEA,iBAAA,QAAA,UAAA,iBAAA,GAUA,KAAA,UACA,KAAA,MAAA,UAAAA,CAAA,CAEA,EACA,UAAAA,EAAA,CAOA,KAAA,MAAA,UAAAA,CAAA,CACA,CACA,CACA"}