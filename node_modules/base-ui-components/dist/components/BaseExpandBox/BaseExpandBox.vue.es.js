import { debounce as n } from "../../utils/utils.es.js";
import i from "../BaseBox/BaseBox.vue.es.js";
import o from "../BaseButton/BaseButton.vue.es.js";
import "./BaseExpandBox.vue.es2.js";
import a from "../../_virtual/_plugin-vue2_normalizer.es.js";
const r = {
  name: "BaseExpandBox",
  components: {
    BaseBox: i,
    BaseButton: o
  },
  props: {
    /**
     * expand box from the outside
     */
    expand: {
      type: Boolean,
      default: !1
    },
    /**
     * define padding of the box
     */
    padding: {
      type: String,
      default: "small",
      validator(s) {
        return ["none", "large", "small"].includes(s);
      }
    },
    /**
     * button text to show more content
     */
    showMoreText: {
      type: String,
      default: "Show more"
    },
    /**
     * button text to show less content
     */
    showLessText: {
      type: String,
      default: "Show less"
    },
    /**
     * define whether box height depends on content
     */
    autoHeight: {
      type: Boolean,
      default: !1
    },
    /**
     * define the max height of the collapsed box in px
     */
    maxCollapsedHeight: {
      type: Number,
      default: 300
    },
    /**
     * define the height including margin of the show-more button in px
     */
    showButtonHeight: {
      type: Number,
      default: 54
    },
    /**
     * option to disable the box shadow if element is nested into a box
     */
    boxShadow: {
      type: Boolean,
      default: !0
    }
  },
  data() {
    return {
      elementId: null,
      expandInt: !1,
      initialized: !1,
      showButton: !1,
      mutationObserver: null,
      resizeObserver: null
    };
  },
  computed: {
    maxCollapsedHeightInt() {
      return this.showButton ? this.maxCollapsedHeight - this.showButtonHeight : this.maxCollapsedHeight;
    },
    style() {
      return { "--max-collapsed-height": `${this.maxCollapsedHeightInt}px` };
    }
  },
  mounted() {
    this.init();
  },
  beforeDestroy() {
    this.mutationObserver && this.mutationObserver.disconnect(), this.resizeObserver && this.resizeObserver.disconnect();
  },
  methods: {
    /**
     * init
     */
    init() {
      this.elementId = this._uid, this.expand && (this.expandInt = !0), this.calcButtonVisibility({}), this.initObserver(), this.initialized = !0;
    },
    /**
     * create resize/mutation observer for the content container
     * to trigger the calculation for the visibility of the show more button
     */
    initObserver() {
      const s = new ResizeObserver(n(50, () => this.calcButtonVisibility({}))), e = new MutationObserver(() => this.calcButtonVisibility({ collapse: !0 }));
      s.observe(this.$refs.content), e.observe(this.$refs.content, { childList: !0, subtree: !0 }), this.resizeObserver = s, this.mutationObserver = e;
    },
    /**
     * calculate visibility of 'show more' button
     * @param {boolean} collapse - defines if the content is collapsed
     */
    calcButtonVisibility({ collapse: s = !1 }) {
      if (s && (this.expandInt = !1), this.$refs.contentInner) {
        const e = this.$refs.contentInner.cloneNode(!0);
        e.setAttribute("id", `contentInnerTemp-${this.elementId}`), this.$el.appendChild(e);
        const t = e.offsetHeight;
        this.$el.removeChild(document.getElementById(`contentInnerTemp-${this.elementId}`)), this.showButton = t > this.maxCollapsedHeight, this.expandInt || this.$emit("box-height", this.$el.offsetHeight);
      }
    },
    /**
     * click event for the show-more button
     */
    clicked() {
      this.expandInt = !this.expandInt, this.$emit("update:expand", this.expandInt);
    }
  }
};
var l = function() {
  var e = this, t = e._self._c;
  return t("base-box", { class: [
    "base-expand-box",
    "base-expand-box-padding-" + e.padding,
    { "base-expand-box-auto-height": e.autoHeight },
    { "base-expand-box-open": e.expandInt }
  ], style: e.style, attrs: { "box-ratio": "0", "box-size": {}, "box-hover": !1, "box-shadow-size": e.boxShadow ? "small" : "none" } }, [e.$slots.header ? t("div", { staticClass: "base-expand-box-header" }, [e._t("header")], 2) : e._e(), t("div", { ref: "content", class: [
    "base-expand-box-content",
    { "base-expand-box-content-fade-out": !e.initialized || !e.expandInt && e.showButton }
  ] }, [t("div", { staticClass: "base-expand-box-content-inner" }, [t("div", { ref: "contentInner" }, [e._t("default")], 2)])]), e.showButton ? t("base-button", { class: [
    "base-expand-box-button",
    { "base-button-icon-rotate-180": e.expandInt }
  ], attrs: { text: e.expandInt ? e.showLessText : e.showMoreText, "has-background-color": !1, "align-text": "left", icon: "drop-down", "icon-position": "right" }, on: { clicked: e.clicked } }) : e._e(), e.$slots.footer ? t("div", { staticClass: "base-expand-box-footer" }, [t("div", { staticClass: "base-expand-box-footer-inner" }, [e._t("footer")], 2)]) : e._e()], 1);
}, d = [], h = /* @__PURE__ */ a(
  r,
  l,
  d,
  !1,
  null,
  "2b352f82",
  null,
  null
);
const f = h.exports;
export {
  f as default
};
//# sourceMappingURL=BaseExpandBox.vue.es.js.map
