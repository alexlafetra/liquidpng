import n from "vuedraggable";
import l from "../BaseMenuEntry/BaseMenuEntry.vue.es.js";
import "./BaseMenuList.vue.es2.js";
import o from "../../_virtual/_plugin-vue2_normalizer.es.js";
const c = {
  name: "BaseMenuList",
  components: {
    BaseMenuEntry: l,
    Draggable: n
  },
  props: {
    /**
     * define if entries are selectable -> d.h. the selectboxes are showing
     */
    selectActive: {
      type: Boolean,
      default: !1
    },
    /**
     * list of menu entries - array of objects
     *   Entry properties that can be displayed:
     *
     *     *required*:
     *      **id** `string` - give every item an unique id
     *
     *     *optional*:
     *      **title** `string` - main text line in the list item
     *      **description** `string` - second text line in the list item
     *      **active** `boolean` - steer from outside if item should be displayed active (with left
     *        side color border)
     *      **selected** `boolean` - steer from outside if entry select box should be checked
     *      **disabled** `boolean` - steer from outside if entry select box should be disabled
     *      **icon** `string` - a valid [BaseIcon](BaseIcon) icon name
     *
     *      Also see [BaseMenuEntry](BaseMenuEntry) component for more information on
     *        the mentioned properties.
     */
    list: {
      type: Array,
      default: () => [],
      validator: (t) => t.every((e) => Object.keys(e).includes("id"))
    },
    /**
     * index of the entry that should currently be active
     * TODO: check if it would be better to use id here!
     */
    activeEntry: {
      type: Number,
      default: -1
    },
    /**
     * provide a list of entries that should appear selected
     */
    selectedList: {
      type: Array,
      default: () => []
    },
    /**
     * specify the group name for the drag receiver
     */
    dragName: {
      type: String,
      default: "menuEntry"
    }
  },
  data() {
    return {
      // have internally necessary props in separate array to prevent issues with
      // outside store mutations
      entryProps: [],
      dragging: !1,
      dragAndDropCapable: !1,
      isDraggable: !0,
      resizeTimeout: null,
      /**
       * chrome can not deal with delay if drag image is cloned from dom on setData directly
       * so image needs to be set previously and stored in variable
       * @type {?SVGElement}
       */
      dragImg: null
    };
  },
  watch: {
    list() {
      this.setInternalVar();
    },
    activeEntry(t) {
      this.entryProps.map((e) => this.$set(e, "active", !1)), t >= 0 && this.entryProps[t] && this.$set(this.entryProps[t], "active", !0);
    },
    selectActive(t) {
      t ? this.setInternalVar() : this.entryProps.forEach((e) => this.$set(e, "selected", !1));
    },
    selectedList() {
      this.setInternalVar();
    }
  },
  created() {
    this.setInternalVar();
  },
  mounted() {
    this.isDraggable = !this.isMobile(), this.dragAndDropCapable = "DragEvent" in window, window.addEventListener("resize", () => {
      clearTimeout(this.resizeTimeout), this.resizeTimeout = setTimeout(() => {
        this.isDraggable = !this.isMobile();
      }, 250);
    }), typeof this.$refs.draggable._sortable.nativeDraggable < "u" ? this.$refs.draggable._sortable.nativeDraggable = this.dragAndDropCapable : console.warn('The option "nativeDraggable" in sortableJS is missing. Please check for changes https://github.com/SortableJS/sortablejs.');
  },
  methods: {
    // this function is called when a menu entry is clicked (when checkboxes not active)
    activateItem(t) {
      this.$emit("clicked", t);
    },
    selectItem(t, e) {
      this.$set(this.entryProps[t], "selected", e), this.$emit("selected", { index: t, selected: e });
    },
    setInternalVar() {
      this.entryProps = this.list.map((t) => ({
        selected: t.selected || this.selectedList.includes(t.id),
        active: t.active || !1,
        error: t.error || !1
      })), this.entryProps.length && this.activeEntry >= 0 && this.$set(this.entryProps[this.activeEntry], "active", !0);
    },
    /**
     * get the relevant icon image from the dom and save it in a variable
     * (Chrome could not deal with setting it in modifyDragItem directly)
     * @param {CustomEvent} event
     */
    getDragImage(t) {
      const e = t.item.getElementsByClassName("base-menu-entry-icon")[0];
      if (e) {
        const r = `${e.clientHeight * 2}px`, s = e.cloneNode(!0);
        s.id = "drag-icon", s.style.height = r, s.style.maxHeight = r, s.style.width = r, s.style.backgroundColor = "white", s.style.position = "absolute", s.style.top = "-99999px", s.style.left = "-99999px", this.dragImg = s;
      } else
        this.dragImg = null;
    },
    dragStart() {
      this.dragging = !0;
    },
    dragEnd() {
      this.dragging = !1;
      const t = document.getElementById("drag-icon");
      t && t.parentNode.removeChild(t);
    },
    modifyDragItem(t) {
      this.dragImg && (document.body.appendChild(this.dragImg), typeof DataTransfer.prototype.setDragImage == "function" && t.setDragImage(this.dragImg, 0, 0)), t.setData("draggable", "");
    },
    isMobile() {
      return window.innerWidth < 640;
    }
  }
};
var d = function() {
  var e = this, r = e._self._c;
  return r("draggable", { ref: "draggable", staticClass: "base-menu-list", attrs: { value: e.list, sort: !1, disabled: !e.isDraggable || e.selectActive, group: { name: e.dragName, pull: "clone", put: !1 }, "set-data": e.modifyDragItem, "force-fallback": !e.dragAndDropCapable, "fallback-on-body": !e.dragAndDropCapable, tag: "ul" }, on: { choose: e.getDragImage, start: e.dragStart, end: e.dragEnd } }, e._l(e.list, function(s, a) {
    return r("li", { key: s.id || s.title, staticClass: "base-menu-list__list-entry" }, [r("base-menu-entry", { ref: "menuEntry", refInFor: !0, attrs: { "entry-id": s.id, title: s.title, "is-active": e.entryProps[a].active, "is-selected": e.entryProps[a].selected, "is-disabled": s.disabled, icon: s.icon, description: s.description, "is-selectable": !0, "select-active": e.selectActive }, on: { clicked: function(i) {
      return e.activateItem(a);
    }, selected: function(i) {
      return e.selectItem(a, i);
    } }, scopedSlots: e._u([{ key: "text-content", fn: function() {
      return [e._t("entry-text-content", null, { item: s })];
    }, proxy: !0 }, { key: "right-side-elements", fn: function({ isSelected: i }) {
      return [e._t("entry-right-side-elements", null, { isSelected: i, item: s })];
    } }, { key: "thumbnails", fn: function() {
      return [e._t("thumbnails", null, { item: s })];
    }, proxy: !0 }], null, !0) })], 1);
  }), 0);
}, g = [], u = /* @__PURE__ */ o(
  c,
  d,
  g,
  !1,
  null,
  "2121ef26",
  null,
  null
);
const y = u.exports;
export {
  y as default
};
//# sourceMappingURL=BaseMenuList.vue.es.js.map
