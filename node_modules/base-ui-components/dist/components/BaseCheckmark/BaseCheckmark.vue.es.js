import { createId as d } from "../../utils/utils.es.js";
import k from "../BaseIcon/BaseIcon.vue.es.js";
import "./BaseCheckmark.vue.es2.js";
import s from "../../_virtual/_plugin-vue2_normalizer.es.js";
const h = {
  name: "BaseCheckmark",
  components: {
    BaseIcon: k
  },
  model: {
    prop: "checked",
    event: "clicked"
  },
  props: {
    /**
     * choose the style
     * @values radio, checkbox
     */
    markStyle: {
      type: String,
      default: "radio",
      validator(a) {
        return a === "radio" || a === "checkbox";
      }
    },
    /**
     * specify a descriptive label
     * this will not be displayed but is only there for usability purposes
     * TODO: for radio button label should actually be visible!
     */
    label: {
      type: String,
      default: "select"
    },
    /**
     * specify a value for the radio button - if none is specified the label will be used to
     * determine if radio button should be active!
     */
    radioValue: {
      type: String,
      default: ""
    },
    /**
     * define if label should be visible - default set false because
     * currently not needed in base project
     */
    showLabel: {
      type: Boolean,
      default: !1
    },
    /**
     * checkbox checked or radio button checked can be set from outside, default
     * value depending on type of selector
     */
    checked: {
      type: [Boolean, String],
      default: !1
    },
    /**
     * set the size of the checkBox
     * @values large, small
     */
    checkBoxSize: {
      type: String,
      default: "small",
      validator(a) {
        return a === "small" || a === "large";
      }
    }
  },
  data() {
    return {
      checkedInt: !1
    };
  },
  computed: {
    internalId() {
      return d();
    },
    radioValueInt() {
      return this.radioValue || this.label;
    }
  },
  watch: {
    checked: {
      handler(a) {
        this.checkedInt = a;
      },
      immediate: !0
    }
  },
  methods: {
    clicked() {
      this.markStyle === "checkbox" && (this.checkedInt = !this.checkedInt), this.$emit("clicked", this.markStyle === "checkbox" ? this.checkedInt : this.radioValueInt);
    }
  }
};
var u = function() {
  var e = this, t = e._self._c;
  return t("div", { class: ["base-checkbox-container", "base-checkbox-container-" + e.checkBoxSize], on: { keydown: function(c) {
    return !c.type.indexOf("key") && e._k(c.keyCode, "enter", 13, c.key, "Enter") ? null : (c.stopPropagation(), e.clicked.apply(null, arguments));
  }, click: function(c) {
    return c.stopPropagation(), e.clicked.apply(null, arguments);
  } } }, [(e.markStyle === "checkbox" ? "checkbox" : "radio") == "checkbox" ? t("input", { directives: [{ name: "model", rawName: "v-model", value: e.checkedInt, expression: "checkedInt" }], class: ["base-checkbox-input", { "base-checkbox-checked": e.checkedInt }], attrs: { id: e.internalId, name: e.label, type: "checkbox" }, domProps: { value: e.radioValueInt, checked: Array.isArray(e.checkedInt) ? e._i(e.checkedInt, e.radioValueInt) > -1 : e.checkedInt }, on: { keydown: function(c) {
    if (!c.type.indexOf("key") && e._k(c.keyCode, "enter", 13, c.key, "Enter"))
      return null;
    c.preventDefault();
  }, change: function(c) {
    var n = e.checkedInt, o = c.target, i = !!o.checked;
    if (Array.isArray(n)) {
      var l = e.radioValueInt, r = e._i(n, l);
      o.checked ? r < 0 && (e.checkedInt = n.concat([l])) : r > -1 && (e.checkedInt = n.slice(0, r).concat(n.slice(r + 1)));
    } else
      e.checkedInt = i;
  } } }) : (e.markStyle === "checkbox" ? "checkbox" : "radio") == "radio" ? t("input", { directives: [{ name: "model", rawName: "v-model", value: e.checkedInt, expression: "checkedInt" }], class: ["base-checkbox-input", { "base-checkbox-checked": e.checkedInt }], attrs: { id: e.internalId, name: e.label, type: "radio" }, domProps: { value: e.radioValueInt, checked: e._q(e.checkedInt, e.radioValueInt) }, on: { keydown: function(c) {
    if (!c.type.indexOf("key") && e._k(c.keyCode, "enter", 13, c.key, "Enter"))
      return null;
    c.preventDefault();
  }, change: function(c) {
    e.checkedInt = e.radioValueInt;
  } } }) : t("input", { directives: [{ name: "model", rawName: "v-model", value: e.checkedInt, expression: "checkedInt" }], class: ["base-checkbox-input", { "base-checkbox-checked": e.checkedInt }], attrs: { id: e.internalId, name: e.label, type: e.markStyle === "checkbox" ? "checkbox" : "radio" }, domProps: { value: e.radioValueInt, value: e.checkedInt }, on: { keydown: function(c) {
    if (!c.type.indexOf("key") && e._k(c.keyCode, "enter", 13, c.key, "Enter"))
      return null;
    c.preventDefault();
  }, input: function(c) {
    c.target.composing || (e.checkedInt = c.target.value);
  } } }), t("div", { class: [
    "base-checkmark-container",
    "base-checkmark-container-" + e.checkBoxSize,
    { "base-radiomark": e.markStyle === "radio" && e.checkedInt === e.radioValueInt }
  ] }, [e.markStyle === "checkbox" && e.checkedInt ? t("base-icon", { class: ["base-checkmark", "base-checkmark-" + e.checkBoxSize], attrs: { name: "check-mark" } }) : e._e()], 1), t("label", { class: ["base-checkbox-labeltext", { hide: !e.showLabel }], attrs: { for: e.internalId } }, [e._v(e._s(e.label))])]);
}, m = [], p = /* @__PURE__ */ s(
  h,
  u,
  m,
  !1,
  null,
  "a0feb9a5",
  null,
  null
);
const x = p.exports;
export {
  x as default
};
//# sourceMappingURL=BaseCheckmark.vue.es.js.map
