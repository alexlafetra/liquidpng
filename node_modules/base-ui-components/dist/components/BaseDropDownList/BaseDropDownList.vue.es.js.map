{"version":3,"file":"BaseDropDownList.vue.es.js","sources":["../../../src/components/BaseDropDownList/BaseDropDownList.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"dropDownContainer\"\n    :class=\"['base-drop-down-list__container',\n             { 'base-drop-down-list__container-drop-down-style': displayAsDropDown }]\"\n    class=\"base-drop-down-list__container\">\n    <!-- @slot for adding elements before the options list -->\n    <slot name=\"before-list\" />\n    <ul\n      :id=\"listId\"\n      ref=\"dropDownList\"\n      :style=\"listBodyStyle\"\n      :aria-activedescendant=\"activeOption ? activeOption[identifierPropertyName] : false\"\n      role=\"listbox\"\n      class=\"base-drop-down-list\">\n      <template v-for=\"(option, optionIndex) in dropDownOptions\">\n        <li\n          v-if=\"optionHasData(option[labelPropertyName])\"\n          :id=\"option[identifierPropertyName]\"\n          ref=\"option\"\n          :key=\"optionIndex\"\n          :value=\"valueIsString ? getLangLabel(option[labelPropertyName], true)\n            : option[identifierPropertyName]\"\n          :aria-selected=\"selectStyled && option[identifierPropertyName] === selectedOption\"\n          :class=\"[\n            'base-drop-down-list__option',\n            { 'base-drop-down-list__option__hover': activeStyled },\n            {\n              'base-drop-down-list__option__selected': selectStyled\n                && option === selectedOption,\n            },\n            {\n              'base-drop-down-list__option__active': activeStyled\n                && optionIndex === activeOptionIndex,\n            },\n            {\n              'base-drop-down-list__option__active-custom': useCustomOptionActiveBackgroundColor\n                && optionIndex === activeOptionIndex,\n            }]\"\n          role=\"option\"\n          tabindex=\"0\"\n          @keydown.enter=\"selected(option)\"\n          @click.stop=\"selected(option)\"\n          @touchstart.stop=\"\">\n          <!-- @slot a slot to customize every single option (e.g. display of information other than `[valuePropertyName]`)\n            @binding {Object} option - the current option in the options list-->\n          <slot\n            name=\"option\"\n            :option=\"option\">\n            <template v-if=\"useHighlightStringMatch\">\n              <!-- eslint-disable-next-line vue/no-v-html -->\n              <span v-html=\"highlight(getLangLabel(option[labelPropertyName], true))\" />\n            </template>\n            <template v-else>\n              {{ getLangLabel(option[labelPropertyName], true) }}\n            </template>\n          </slot>\n        </li>\n      </template>\n      <div\n        v-if=\"!dropDownOptions.length && (noOptionsSlotHasData || dropDownNoOptionsInfo)\"\n        :class=\"[\n          'base-drop-down-list__option',\n          'base-drop-down-list__no-options',\n        ]\">\n        <!--\n          @slot customize what is displayed when no drop down options are available\n        -->\n        <slot\n          v-if=\"!dropDownOptions.length\"\n          name=\"no-options\">\n          {{ dropDownNoOptionsInfo }}\n        </slot>\n      </div>\n    </ul>\n    <!-- @slot to add elements after the options list -->\n    <slot name=\"after-list\" />\n  </div>\n</template>\n\n<script>\nimport { highlightText } from '@/utils/utils';\nimport i18n from '../../mixins/i18n';\n\n/** a multipurpose drop down list */\n\n// TODO: currently only taking objects not strings??\n\nexport default {\n  name: 'BaseDropDownList',\n  mixins: [\n    i18n,\n  ],\n  props: {\n    /**\n     * list of options to select from\n     */\n    dropDownOptions: {\n      type: Array,\n      default: () => [],\n    },\n    /**\n     * specify the name of a property that can be used as identifier\n     * // TODO: need handling if no identifier provided!!\n     */\n    identifierPropertyName: {\n      type: String,\n      default: 'id',\n    },\n    /**\n     * specify the name of the property that should be displayed\n     */\n    labelPropertyName: {\n      type: String,\n      default: 'value',\n    },\n    /**\n     * specify the currently active option (will have gray background\n     * if not disabled by setting `activeStyled` `false`) for example for\n     * combination with input and keyboard use\n     */\n    activeOption: {\n      type: [Object, String],\n      default: () => ({}),\n    },\n    /**\n     * specify the currently selected option (will appear in app color if not disabled\n     * by setting `selectStyled` `false`, but also used for `aria-selected`).\n     *   the `.sync` modifier can be used here\n     */\n    selectedOption: {\n      type: [Object, String],\n      default: () => ({}),\n    },\n    /**\n     * in order to link the drop down body to an <input> element specify a list\n     * id and use the `list` attribute on the input\n     */\n    listId: {\n      type: String,\n      default: '',\n    },\n    /**\n     * add styling to the list body (e.g. max-height)\n     */\n    listBodyStyle: {\n      type: Object,\n      default: () => ({}),\n    },\n    /**\n     * flag if the currently active element should be styled\n     * (gray background)\n     */\n    activeStyled: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * flag if the currently selected entry should be styled\n     * (only makes sense for single select, color: app-color)\n     */\n    selectStyled: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * if `true` the element will be styled as a drop down element with\n     * box-shadow\n     */\n    displayAsDropDown: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * message displayed when no selectable options are available\n     */\n    dropDownNoOptionsInfo: {\n      type: String,\n      default: '',\n    },\n    /**\n     * specify a language (ISO 639-1) (used for label if label is language specific object\n     * e.g. `{ de: 'xxx', en: 'yyy' }`\n     */\n    language: {\n      type: String,\n      default: '',\n    },\n    /**\n     * this adds the possibility of nested options (thus a second list nested within the first one),\n     * if this is set `true` this will have consequences for scroll adjustment of list on keyboard use\n     * and how the active option is determined (the identifier property will be used)\n     */\n    hasSubOptions: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * in case a custom option background should be set to the currently active option\n     *   (this will also apply if `activeStyled` is set `false`).\n     * if you want to use this option please set the css variable `--option-background`\n     * in your app\n     */\n    useCustomOptionActiveBackgroundColor: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * set true if option characters matching a string provided in `highlightStringMatch`\n     *  should be highlighted\n     */\n    useHighlightStringMatch: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * if `useHighlightStringMatch` is set to `true`, provide a string to match with the\n     *  option label here\n     */\n    highlightStringMatch: {\n      type: String,\n      default: '',\n    },\n    /**\n     * provide tag names to style the matched characters\n     *  (without '<' and '>', e.g. ['b'] for <b>)\n     */\n    highlightStringTags: {\n      type: Array,\n      default: () => ([]),\n    },\n  },\n  data() {\n    return {\n      /**\n       * if there is any (associated by id) store the related input element\n       * in this variable\n       * @type {HTMLElement}\n       */\n      inputElement: null,\n    };\n  },\n  computed: {\n    /**\n     * variable to store if values provided in the list are strings\n     * (or an object with language specific strings e.g. { de: 'xxx', en: 'yyy' }) or\n     * if list contains other objects (e.g. for AdvancedSearch)\n     * @returns {boolean}\n     */\n    valueIsString() {\n      return this.dropDownOptions\n        && this.dropDownOptions.length\n        && typeof this.getLangLabel(this.dropDownOptions[0][this.labelPropertyName], true) === 'string';\n    },\n    /**\n     * the index of the currently active option provided by parent\n     * @returns {number}\n     */\n    activeOptionIndex() {\n      // check if options has submenu\n      if (this.hasSubOptions && (!this.activeOption\n        || this.activeOption[this.identifierPropertyName] !== undefined)) {\n        return this.dropDownOptions\n          .findIndex(opt => opt[this.identifierPropertyName]\n            === this.activeOption[this.identifierPropertyName]);\n      }\n      return this.dropDownOptions.indexOf(this.activeOption);\n    },\n    /**\n     * determine if no-options slot has data\n     * @returns {Boolean}\n     */\n    noOptionsSlotHasData() {\n      return !!this.$slots['no-options'];\n    },\n    /**\n     * create an object out of prop `highlightStringTags` so it can be\n     *  spread into the options of the `highlightText` function\n     * @returns {{highlightTags: []}|{}}\n     */\n    highlightTags() {\n      return this.highlightStringTags?.length\n        ? { highlightTags: this.highlightStringTags } : {};\n    },\n  },\n  mounted() {\n    // check if this element is associated with an input element\n    const htmlInputElements = document.getElementsByTagName('input');\n    // check if an input element exists\n    if (htmlInputElements && htmlInputElements.length) {\n      const inputElementsArray = Array.from(htmlInputElements);\n      // get the element that has the equal list id\n      this.inputElement = inputElementsArray\n        .find(el => el.getAttribute('list') === this.listId);\n      // if the parent also has a input field that should be connected - it will need to\n      // have the same id! (input attribute 'list') (this is to avoid unwanted side effects)\n      if (this.inputElement) {\n        this.inputElement.addEventListener('keydown', this.navigateOptions);\n      }\n    }\n  },\n  destroyed() {\n    // check if there is an associated input element\n    if (this.inputElement) {\n      // if yes - remove the event listener again\n      this.inputElement.removeEventListener('keydown', this.navigateOptions);\n    }\n  },\n  methods: {\n    /**\n     * function to highlight characters of a string\n     * @param {string} word - the option that should be matched with query string\n     * @returns {string} - the string to fill into v-html\n     */\n    highlight(word) {\n      return highlightText({\n        word,\n        queryString: this.highlightStringMatch,\n        // this is an empty object if prop `highlightStringTags` was not used\n        ...this.highlightTags,\n      });\n    },\n    /**\n     * triggered if option was selected by click\n     *\n     * @param {Object} option - the selected option\n     */\n    selected(option) {\n      /**\n       * inform parent if option was selected by mouse click\n       * (the .sync modifier on prop selectedOption can be used)\n       *\n       * @event update:selected-option\n       * @param {Object} - the selected option\n       */\n      this.$emit('update:selected-option', option);\n    },\n    /**\n     * check if an option has data (and should be displayed)\n     *\n     * @param {Object} option - the option in question\n     * @returns {boolean}\n     */\n    optionHasData(option) {\n      if (typeof option === 'string') {\n        return !!option;\n      }\n      if (option && option.length) {\n        return !!option.length;\n      }\n      return !!(option && Object.keys(option).length);\n    },\n    /**\n     * a function to navigate the dropdown list by keyboard, used in\n     * event listener 'keydown'\n     *\n     * @property {KeyboardEvent} event - the keydown event from the input\n     * field associated by 'id'\n     */\n    navigateOptions(event, { activeOptionHeight = 0, activeOptionTop = 0 } = {}) {\n      const { key } = event;\n      if (['ArrowDown', 'ArrowUp'].includes(key)) {\n        // check if it is necessary to adjust scrolltop of container (to\n        // always have entry steered to with arrow keys in view)\n        // if list has suboptions this should be navigated from suboptions\n        if ((!this.hasSubOptions || activeOptionHeight) && this.$refs.option\n          && this.$refs.option[this.activeOptionIndex]) {\n          // save the active option in a variable\n          const activeOptionTemp = this.$refs.option[this.activeOptionIndex];\n          // get the option height\n          const activeOptionHeightTemp = activeOptionHeight || activeOptionTemp.clientHeight;\n          // get the option top position\n          const activeOptionTopTemp = activeOptionTemp.offsetTop + activeOptionTop;\n          if (this.$parent.$refs.dropDownContainer) {\n            this.$parent.navigateOptions(event, {\n              activeOptionHeight: activeOptionHeightTemp,\n              activeOptionTop: activeOptionTopTemp,\n            });\n          } else {\n            // find the correct container to scroll\n            // assume its the outer element\n            let scrollContainerTemp = this.$refs.dropDownContainer;\n            const dropDownListTemp = this.$refs.dropDownList;\n            // check if its the inner element (this could be the case if the `before-list` slot is used)\n            if (dropDownListTemp.scrollHeight > dropDownListTemp.clientHeight) {\n              scrollContainerTemp = dropDownListTemp;\n            }\n            // get the current scroll position of the container\n            const scrollContainerScrollTop = scrollContainerTemp.scrollTop;\n            // get the container height\n            const scrollContainerHeight = scrollContainerTemp.clientHeight;\n            // check if current active option is out of view\n            const optionOutOfView = activeOptionTopTemp + activeOptionHeightTemp\n              < scrollContainerScrollTop || activeOptionTopTemp\n              > scrollContainerScrollTop + scrollContainerHeight;\n            // if active option index is 0 - return to top\n            if (!this.hasSubOptions && !this.activeOptionIndex) {\n              scrollContainerTemp.scrollTo({\n                top: 0,\n              });\n              // else if index is last entry of options list - bring last item into view\n            } else if (!this.hasSubOptions\n              && this.activeOptionIndex === this.dropDownOptions.length - 1) {\n              scrollContainerTemp.scrollTo({\n                top: activeOptionTopTemp + activeOptionHeightTemp,\n              });\n              // else check if key was arrow down\n            } else if (event.key === 'ArrowDown') {\n              // if option is out of sight set container scrollTop to option position\n              if (optionOutOfView) {\n                scrollContainerTemp.scrollTo({\n                  top: activeOptionTopTemp,\n                });\n                // else if the option position is larger then container height\n                // add the height of one option row to scroll top\n              } else if (activeOptionTopTemp + activeOptionHeightTemp\n                > scrollContainerHeight + scrollContainerScrollTop) {\n                // dropDownContainerTemp.scrollTop += activeOptionHeightTemp;\n                scrollContainerTemp.scrollTo({\n                  top: scrollContainerScrollTop + activeOptionHeightTemp,\n                });\n              }\n              // else check if key was arrow up\n            } else if (event.key === 'ArrowUp') {\n              // if option is out of sight set scrollTop to option position so it shows\n              // up as last option in container\n              if (optionOutOfView) {\n                scrollContainerTemp.scrollTo({\n                  top: activeOptionTopTemp\n                    + activeOptionHeightTemp - scrollContainerHeight,\n                });\n                // else if index is smaller than previous index (navigating up) and the container\n                // top position is larger than the option top position subtract one option row\n                // height\n              } else if (scrollContainerScrollTop > activeOptionTopTemp) {\n                scrollContainerTemp.scrollTo({\n                  top: scrollContainerScrollTop - activeOptionHeightTemp,\n                });\n              }\n            }\n          }\n        }\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n  @import \"../../styles/variables\";\n\n  .base-drop-down-list__container {\n    background: inherit;\n\n    &.base-drop-down-list__container-drop-down-style {\n      box-shadow: $drop-shadow;\n      z-index: map-get($zindex, dropdown);\n      max-height: 10 * $row-height-small;\n      overflow-y: auto;\n      position: absolute;\n    }\n\n    .base-drop-down-list {\n      position: relative;\n      overflow-y: auto;\n\n      .base-drop-down-list__option {\n        display: flex;\n        align-items: center;\n        min-height: $row-height-small;\n        padding: $spacing-small-half $spacing;\n        line-height: $line-height;\n        width: 100%;\n        transition: all 0.2s ease;\n        cursor: pointer;\n\n        &.base-drop-down-list__no-options {\n          cursor: default;\n          align-items: center;\n          padding: 0 $spacing;\n        }\n\n        &.base-drop-down-list__option__selected {\n          color: $app-color;\n        }\n\n        &.base-drop-down-list__option__hover:hover {\n          background-color: $button-header-color;\n        }\n\n        &.base-drop-down-list__option__active,\n        &.base-drop-down-list__option__active:hover {\n          background-color: $keyboard-active-color;\n        }\n\n        &.base-drop-down-list__option__active-custom, {\n          background-color: var(--option-background);\n        }\n      }\n    }\n  }\n</style>\n"],"names":["_sfc_main","i18n","opt","_a","htmlInputElements","inputElementsArray","el","word","highlightText","option","event","activeOptionHeight","activeOptionTop","key","activeOptionTemp","activeOptionHeightTemp","activeOptionTopTemp","scrollContainerTemp","dropDownListTemp","scrollContainerScrollTop","scrollContainerHeight","optionOutOfView"],"mappings":"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"}