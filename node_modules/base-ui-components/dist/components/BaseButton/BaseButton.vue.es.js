import { createId as a } from "../../utils/utils.es.js";
import i from "../BaseIcon/BaseIcon.vue.es.js";
import l from "../BaseBoxTooltip/BaseBoxTooltip.vue.es.js";
import "./BaseButton.vue.es2.js";
import r from "../../_virtual/_plugin-vue2_normalizer.es.js";
const s = {
  name: "BaseButton",
  components: {
    BaseIcon: i,
    BaseBoxTooltip: l
  },
  props: {
    /**
     * Button Text
     *
     * if button text is left empty and slot `text` is not used (so this is a button only
     *  with an icon) please set at least the prop `description` or `iconTitle` for accessibility reasons!
     */
    text: {
      type: String,
      default: ""
    },
    // TODO: need to check if it is possible to use custom icons --> if yes description!
    /**
     * icon displayed
     * see [BaseIcon](BaseIcon) for available icons
     */
    icon: {
      type: String,
      default: null
    },
    /**
     * set from outside if icon should be made invisible
     */
    hideIcon: {
      type: Boolean,
      default: !1
    },
    /**
     * specify if icon should be displayed left or right
     */
    iconPosition: {
      type: String,
      default: "left",
      validator(e) {
        return ["top", "right", "left"].includes(e);
      }
    },
    /**
     * set button active (will display a colored border on botton) (row style)
     * or keep icon colored (single style)
     */
    active: {
      type: Boolean,
      default: !1
    },
    /**
     * specify a button style
     */
    buttonStyle: {
      type: String,
      default: "single",
      validator(e) {
        return ["single", "row", "secondary", "circle"].includes(e);
      }
    },
    /**
     * display icon with app-color
     */
    iconColored: {
      type: Boolean,
      default: !1
    },
    /**
     * specify icon size
     * **Caveat**: this will have no effect on `buttonStyle`: `secondary` | `circle` - icon will always be small
     */
    iconSize: {
      type: String,
      default: "small",
      validator(e) {
        return ["small", "large"].includes(e);
      }
    },
    /**
     * set a title for the icon that is shown as a tooltip on hover
     */
    iconTitle: {
      type: String,
      default: ""
    },
    /**
     * set button inactive
     */
    disabled: {
      type: Boolean,
      default: !1
    },
    /**
     * set button type
     */
    buttonType: {
      type: String,
      default: "button"
    },
    /**
     * define alignment of button content
     * Info: has no effect, if iconPosition 'top' is set
     */
    alignText: {
      type: String,
      default: "center",
      validator(e) {
        return ["center", "left", "right"].includes(e);
      }
    },
    /**
     * background color is fixed however at least possibility to
     * display transparent instead
     */
    hasBackgroundColor: {
      type: Boolean,
      default: !0
    },
    /**
     * show tooltip
     */
    showTooltip: {
      type: Boolean,
      default: !1
    },
    /**
     * Add a button description to be used by aria-describedby
     */
    description: {
      type: String,
      default: ""
    },
    /**
     * set false if button text should not be wrapped
     */
    buttonTextWrap: {
      type: Boolean,
      default: !0
    }
  },
  data() {
    return {
      internalId: a()
    };
  },
  computed: {
    setLabelIdReference() {
      return !!this.text || !!this.$slots.text;
    }
  },
  methods: {
    clicked(e) {
      this.$emit("clicked", e);
    }
  }
};
var d = function() {
  var t = this, n = t._self._c;
  return n("button", { class: [
    "base-button",
    `base-button-${t.buttonStyle}`,
    `base-button-icon-${t.iconPosition}`,
    `base-button-align-${t.alignText}`,
    { "base-button-background": t.hasBackgroundColor },
    { "base-button-active": t.active }
  ], attrs: { disabled: t.disabled, "aria-disabled": t.disabled, "aria-labelledby": t.setLabelIdReference ? t.internalId : !1, "aria-describedby": t.description ? `${t.internalId}-description` : !1, type: t.buttonType }, on: { click: function(o) {
    return o.preventDefault(), t.clicked.apply(null, arguments);
  } } }, [t.icon ? n("base-icon", { class: [
    "base-button-icon",
    "base-button-icon-" + t.iconSize,
    { "base-button-icon-colored": t.iconColored },
    { "base-button-icon-hide": t.hideIcon }
  ], attrs: { name: t.icon, title: t.iconTitle } }) : t._e(), t._t("left-of-text"), t._t("text", function() {
    return [t.text && t.buttonStyle !== "circle" ? n("span", { class: ["base-button-text", { "base-button-text__nowrap": !t.buttonTextWrap }], attrs: { id: t.internalId } }, [t._v(" " + t._s(t.text) + " ")]) : t._e()];
  }, { labelId: t.internalId }), t._t("right-of-text"), t.showTooltip ? n("BaseBoxTooltip", { on: { clicked: t.clicked } }) : t._e(), t.description ? n("span", { staticClass: "hide", attrs: { id: `${t.internalId}-description` } }, [t._v(" " + t._s(t.description) + " ")]) : t._e()], 2);
}, c = [], u = /* @__PURE__ */ r(
  s,
  d,
  c,
  !1,
  null,
  "73d98cd7",
  null,
  null
);
const m = u.exports;
export {
  m as default
};
//# sourceMappingURL=BaseButton.vue.es.js.map
