import c from "../BaseIcon/BaseIcon.vue.es.js";
import "./BaseSwitchButton.vue.es2.js";
import u from "../../_virtual/_plugin-vue2_normalizer.es.js";
const d = {
  name: "BaseSwitchButton",
  components: { BaseIcon: c },
  model: {
    prop: "activeTab",
    event: "switch"
  },
  props: {
    /**
     * specify the tabs as array of object with `value`, `label` and (optional) `icon` properties
     */
    options: {
      type: Array,
      default: () => [{ label: "tab", value: "tab", icon: "" }],
      validator: (s) => s.every((e) => ["label", "value"].every((a) => Object.keys(e).includes(a)))
    },
    /**
     * set the currently active tab (specify the value of the object not the label)
     */
    activeTab: {
      type: String,
      required: !0,
      default: () => globalThis.options[0] ? globalThis.options[0].value : "tab"
    },
    /**
     * set a label for the switches, not visible per default (set `showLabel` to `true` if label should be shown) but required for accessibility
     */
    label: {
      type: String,
      required: !0
    },
    /**
     * set a type for the button's active state rendering style
     *  **normal**: gives the switch a more subtle, more condensed look with active item only indicated by grey border,
     *    buttons have a label per default (`showButtonsLabel` is `true`).
     *  **prominent**: larger buttons with more spacing and permanent border around each item, active item is
     *    indicated by a 2px (app-)colored bottom border, button labels are not shown per default (`showButtonsLabel` is `false`)
     *    so the property `icon` should be set for each switch item in `options`.
     */
    type: {
      type: String,
      default: "normal",
      validator: (s) => ["normal", "prominent"].includes(s)
    },
    /**
     * set if the switch label is shown
     */
    showLabel: {
      type: Boolean,
      default: !1
    },
    /**
     * define if the label of the single buttons should be shown (or just icons). This
     * property is default undefined and is determined internally individually for each type:
     *  **normal**: default is `true`
     *  **prominent**: default is `false`
     */
    showButtonsLabel: {
      type: Boolean,
      default: void 0
    },
    /**
     * specify where the icon should be rendered
     */
    iconPosition: {
      type: String,
      default: "right",
      validator: (s) => ["right", "left"].includes(s)
    },
    /**
     * specify icon size
     * this prop currently only applies to `type` 'prominent'
     */
    iconSize: {
      type: String,
      default: "medium",
      validator(s) {
        return ["small", "medium", "large"].includes(s);
      }
    },
    /**
     * set true if the buttons should be visible but disabled, so they
     * will appear greyed out and not be clickable
     */
    disabled: {
      type: Boolean,
      default: !1
    }
  },
  data() {
    return {
      selectedOption: this.activeTab
    };
  },
  computed: {
    // to ensure a unique id (made problems on field duplication)
    optionIds() {
      return this.options.map((s) => this.generateId(s.value));
    },
    defaultShowButtonsLabel() {
      return this.type === "normal";
    },
    showButtonsLabelInt() {
      return this.showButtonsLabel ?? this.defaultShowButtonsLabel;
    }
  },
  watch: {
    selectedOption(s) {
      this.$emit("switch", s);
    },
    activeTab(s) {
      s !== this.selectedOption && (this.selectedOption = s);
    }
  },
  methods: {
    generateId(s) {
      return `${s}${Math.floor(Math.random() * 1e6).toString()}`;
    }
  }
};
var r = function() {
  var e = this, a = e._self._c;
  return a("fieldset", { class: ["base-switch-buttons", { "base-switch-buttons--gap": e.type === "prominent" }] }, [a("legend", { staticClass: "hide" }, [e._v(" " + e._s(e.label) + " ")]), a("span", { class: [
    "base-switch-buttons__legend",
    { hide: !e.showLabel },
    { "base-switch-buttons__legend--disabled": e.disabled },
    { "base-switch-buttons__legend--gap": e.type === "normal" }
  ] }, [e._v(" " + e._s(e.label) + " ")]), e._l(e.options, function(t, l) {
    var i, o;
    return [a("label", { key: t.value + "label", class: [
      "base-switch-buttons__button",
      `base-switch-buttons__button--${e.type}`,
      { [`base-switch-buttons__button--${e.type}-active`]: t.value === e.selectedOption },
      { "base-switch-buttons__button--icon-only": !e.showButtonsLabel },
      { "base-switch-buttons__button--disabled": e.disabled }
    ], attrs: { for: e.optionIds[l], title: e.showButtonsLabelInt ? void 0 : t.label } }, [a("input", { directives: [{ name: "model", rawName: "v-model", value: e.selectedOption, expression: "selectedOption" }], key: t.value + "input", staticClass: "hide", attrs: { id: e.optionIds[l], tabindex: t.value === e.selectedOption ? 0 : -1, "aria-checked": t.value === e.selectedOption, name: e.label, disabled: e.disabled, type: "radio" }, domProps: { checked: t.value === e.selectedOption, value: t.value, checked: e._q(e.selectedOption, t.value) }, on: { keydown: function(n) {
      if (!n.type.indexOf("key") && e._k(n.keyCode, "enter", 13, n.key, "Enter"))
        return null;
      n.preventDefault();
    }, change: function(n) {
      e.selectedOption = t.value;
    } } }), ((i = t == null ? void 0 : t.icon) == null ? void 0 : i.length) > 0 && e.iconPosition === "left" ? a("BaseIcon", { class: [
      "base-switch-buttons__icon",
      `base-switch-buttons__icon--${e.iconSize}`
    ], attrs: { name: t.icon } }) : e._e(), e.showButtonsLabelInt ? a("span", [e._v(" " + e._s(t.label) + " ")]) : e._e(), ((o = t == null ? void 0 : t.icon) == null ? void 0 : o.length) > 0 && e.iconPosition === "right" ? a("BaseIcon", { class: [
      "base-switch-buttons__icon",
      `base-switch-buttons__icon--${e.iconSize}`
    ], attrs: { name: t.icon } }) : e._e(), e._t("right-of-content", null, { value: t.value })], 2)];
  })], 2);
}, b = [], h = /* @__PURE__ */ u(
  d,
  r,
  b,
  !1,
  null,
  "e19d0b20",
  null,
  null
);
const v = h.exports;
export {
  v as default
};
//# sourceMappingURL=BaseSwitchButton.vue.es.js.map
