{"version":3,"file":"BaseExpandListRow.vue.es.js","sources":["../../../src/components/BaseExpandList/BaseExpandListRow.vue"],"sourcesContent":["<template>\n  <component\n    :is=\"renderAs\"\n    :class=\"[{\n      'base-expand': !edit,\n      expanded: expanded,\n    }]\">\n    <template\n      v-if=\"!edit && dataInt.label\">\n      <button\n        :id=\"'base-expand-control-' + _uid\"\n        :aria-expanded=\"expanded ? 'true' : 'false'\"\n        :aria-controls=\"'base-expand-region-' + _uid\"\n        type=\"button\"\n        class=\"base-expand__head base-expand-item\"\n        @click=\"expand\">\n        <span class=\"base-expand-item__col base-expand-item__label base-text-fade-out\">\n          <span\n            class=\"base-expand__head__label\">{{ dataInt.label }}</span>\n          <span\n            class=\"base-expand__head__additional\">\n            ({{ dataInt.count !== undefined ? dataInt.count : dataInt.data.length }})\n          </span>\n        </span>\n        <base-icon\n          name=\"drop-down\"\n          class=\"base-expand-item__col base-expand__head__icon\" />\n      </button>\n\n      <transition\n        name=\"expand\"\n        @enter=\"enter\"\n        @after-enter=\"afterEnter\"\n        @leave=\"leave\"\n        @before-leave=\"beforeLeave\">\n        <ul\n          v-show=\"expanded\"\n          :id=\"'base-expand-region-' + _uid\"\n          :aria-labelledby=\"'base-expand-control-' + _uid\"\n          :aria-hidden=\"!expanded ? 'true' : 'false'\"\n          class=\"base-expand__body\">\n          <!-- Todo: limit levels (counter) -->\n          <base-expand-list-row\n            v-for=\"(items, index) in dataInt.data\"\n            ref=\"baseExpandListRow\"\n            :key=\"`${parentIndex}-${index}`\"\n            :data=\"items\"\n            :multiple=\"multiple\"\n            render-as=\"li\"\n            @expanded-state=\"emitExpandedState\">\n            <template\n              #content=\"dataNextLevel\">\n              <!-- @slot a slot to provide customized entry row in next level -->\n              <slot\n                name=\"content\"\n                :data=\"dataNextLevel.data\" />\n            </template>\n          </base-expand-list-row>\n        </ul>\n      </transition>\n    </template>\n\n    <template\n      v-if=\"!edit && dataInt.value\">\n      <div\n        :class=\"['base-expand-item',\n                 'base-expand-item--intend',\n                 {\n                   'base-text-fade-out-left': fadeOutLeft,\n                   'base-text-fade-out': fadeOutRight,\n                 }]\">\n        <span\n          ref=\"listItemScrollable\"\n          class=\"base-expand-item__col base-expand-item__label\">\n          <!-- @slot a slot to provide customized entry row -->\n          <slot\n            name=\"content\"\n            :data=\"dataInt\">\n            {{ dataInt.value }}\n          </slot>\n        </span>\n      </div>\n    </template>\n\n    <template\n      v-if=\"edit\">\n      <div\n        :class=\"['base-expand-item', { 'base-expand-item--movable': movable }]\">\n        <span\n          ref=\"baseExpandItemHandle\"\n          :title=\"dataInt.label\"\n          tabindex=\"0\"\n          class=\"base-expand-item__col base-expand-item__handle\"\n          @keydown.down.prevent.stop=\"moveItem('down')\"\n          @keydown.up.prevent.stop=\"moveItem('up')\"\n          @keydown.enter.prevent.stop=\"movable = !movable\"\n          @focus=\"assistiveText('activate')\"\n          @keyup.esc=\"cancelMovable\"\n          @blur=\"cancelMovable\">\n          <base-icon\n            name=\"drag-lines\" />\n        </span>\n        <div class=\"base-expand-item__col base-expand-item__label base-text-fade-out\">\n          <div\n            v-if=\"!itemVisible\"\n            class=\"base-expand-item__overlay\" />\n          <span\n            :class=\"[\n              'base-expand__head__label',\n              { 'base-expand__head__label--disabled': !itemVisible }]\">\n            {{ dataInt.label }}\n          </span>\n          <span\n            class=\"base-expand__head__additional\">\n            ({{ dataInt.count !== undefined ? dataInt.count : dataInt.data.length }})\n          </span>\n        </div>\n        <div class=\"base-expand-item__col base-expand-item__controls\">\n          <base-button\n            v-if=\"controlType === 'button'\"\n            :icon=\"itemVisible ? 'eye' : 'eye-hide'\"\n            :text=\"''\"\n            :has-background-color=\"false\"\n            :disabled=\"disabled\"\n            :aria-label=\"`${itemVisible ? editHideText : editShowText } ${dataInt.label}`\"\n            icon-size=\"large\"\n            icon-position=\"left\"\n            @clicked=\"setVisibility(!itemVisible)\" />\n          <BaseToggle\n            v-else-if=\"controlType === 'toggle'\"\n            v-model=\"itemVisible\"\n            :disabled=\"disabled\"\n            :hide-label=\"true\"\n            :label=\"`${editShowText} ${dataInt.label}`\"\n            class=\"base-expand-item__toggle\" />\n        </div>\n      </div>\n    </template>\n  </component>\n</template>\n\n<script>\n// eslint-disable-next-line\nimport BaseIcon from '@/components/BaseIcon/BaseIcon';\nimport i18n from '../../mixins/i18n';\n\nexport default {\n  name: 'BaseExpandListRow',\n  components: {\n    BaseToggle: () => import('../BaseToggle/BaseToggle').then(m => m.default || m),\n    BaseButton: () => import('../BaseButton/BaseButton').then(m => m.default || m),\n    // eslint-disable-next-line import/no-self-import\n    BaseExpandListRow: () => import('./BaseExpandListRow').then(m => m.default || m),\n    BaseIcon,\n  },\n  mixins: [i18n],\n  props: {\n    /**\n     * data object: { label: 'String', data: [{ value: 'String', }],\n     *  [hidden]: boolean, [count]: number }\n     * optional properties:\n     *  count: used for the number shown in brackets\n     *    (else the array length will be used)\n     *  hidden: used to set visibility and is set in edit mode to toggle item\n     * rendered variants:\n     *  expandable row: data object contains property 'label'\n     *  entry row: data object contains property 'value'\n     */\n    data: {\n      type: Object,\n      default: () => {\n      },\n    },\n    /**\n     * set edit mode\n     */\n    edit: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * expand multiple items\n     */\n    multiple: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * render component as e.g.: 'div' | 'li'\n     */\n    renderAs: {\n      type: String,\n      default: 'div',\n    },\n    /**\n     * button text to hide item\n     */\n    editHideText: {\n      type: String,\n      default: 'Hide',\n    },\n    /**\n     * button text to show item\n     */\n    editShowText: {\n      type: String,\n      default: 'Show',\n    },\n    /**\n     * specify the type of visibility switch in edit mode\n     *  **button**: a [BaseButton](BaseButton) without text\n     *  **button**: a [BaseToggle](BaseToggle) element without text\n     */\n    controlType: {\n      type: String,\n      default: 'button',\n      validator: val => ['button', 'toggle'].includes(val),\n    },\n    /**\n     * index of parent element\n     * used to expand item from outside\n     */\n    parentIndex: {\n      type: [Number, String],\n      default: 0,\n    },\n    /**\n     * option to disable the edit functionalities of the element (toggle and draggable)\n     */\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      // toggle item\n      expanded: false,\n      // referenced in BaseExpandList\n      movable: false,\n      // referenced in BaseExpandList\n      useAssistiveText: true,\n      // internal representation of data\n      dataInt: null,\n      // fade out overlays\n      fadeOutLeft: false,\n      fadeOutRight: true,\n    };\n  },\n  computed: {\n    itemVisible: {\n      set(val) {\n        this.$set(this.dataInt, 'hidden', !val);\n      },\n      get() {\n        return !this.dataInt.hidden;\n      },\n    },\n  },\n  watch: {\n    /**\n     * Set focus to active movable item\n     *\n     * @params {string}\n     */\n    movable(val) {\n      const dragHandle = this.$el.querySelector('.base-expand-item__handle');\n\n      if (val) {\n        dragHandle.focus();\n      }\n\n      // check if dragHandle has focus\n      if (document.activeElement === dragHandle) {\n        // emit assistive text for aria-live\n        this.assistiveText(this.movable ? 'activated' : 'activate');\n      }\n\n      // enable assistive text (disabled by moveItem())\n      this.useAssistiveText = true;\n    },\n    dataInt: {\n      handler(val) {\n        // check if data has values (and is not initial null) and if it differs\n        // from parent data\n        if (!!val && JSON.stringify(val) !== JSON.stringify(this.data)) {\n          // if yes update parent data\n          this.$emit('update:data', val);\n        }\n      },\n      deep: true,\n      immediate: true,\n    },\n    data: {\n      handler(val) {\n        // check if parent data differ from internal data - if yes update\n        if (JSON.stringify(val) !== JSON.stringify(this.dataInt)) {\n          this.dataInt = JSON.parse(JSON.stringify(val));\n        }\n      },\n      deep: true,\n      immediate: true,\n    },\n  },\n  mounted() {\n    if (this.$refs.listItemScrollable) {\n      const scrollable = this.$refs.listItemScrollable;\n      scrollable.addEventListener('scroll', () => this.scrollHandler(scrollable));\n    }\n  },\n  destroyed() {\n    if (this.$refs.listItemScrollable) {\n      const scrollable = this.$refs.listItemScrollable;\n      scrollable.removeEventListener('scroll', () => this.scrollHandler(scrollable));\n    }\n  },\n  methods: {\n    /**\n     * cancel movable state, stop propagation if needed\n     *   e.g. further esc key event\n     * @param {KeyboardEvent} e - event\n     */\n    cancelMovable(e) {\n      if (this.movable) {\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n        e.preventDefault();\n        e.cancelBubble = false;\n        this.movable = false;\n      }\n    },\n    /**\n     * set visibility if button was clicked\n     */\n    setVisibility(val) {\n      this.itemVisible = val;\n    },\n    /**\n     * move item\n     *\n     * @param {string} direction values: 'up' | 'down'\n     */\n    moveItem(direction = 'up ') {\n      if (this.movable) {\n        // disable assistive text to avoid message cue\n        this.useAssistiveText = false;\n        this.movable = false;\n        this.$emit('sorted', {\n          direction,\n        });\n      }\n    },\n    /**\n     * expand item\n     */\n    expand() {\n      // which element(s) are currently expanded\n      // eg: level1, first item = 0; level2, second item: 0-1\n      const currentState = this.$vnode.key.toString().split('-');\n\n      if (this.expanded) {\n        this.expanded = false;\n        // remove current level and emit expanded state\n        this.emitExpandedState(currentState.length > 1 ? currentState.slice(-1) : '');\n        return;\n      }\n\n      // close expanded rows\n      if (!this.multiple) {\n        const rows = this.$parent.$refs.baseExpandListRow;\n\n        if (rows) {\n          rows.forEach((row) => {\n            // eslint-disable-next-line\n            row.expanded = false;\n          });\n        }\n      }\n\n      this.expanded = true;\n      this.emitExpandedState(currentState);\n    },\n    /**\n     * emit expanded state of items\n     * each array element represents the index of the expanded item per level\n     * eg: [0,1]: level1 first item, level2 second item is expanded\n     *\n     * @param {Array} value - value to emit\n     */\n    emitExpandedState(value) {\n      /**\n       * event triggered when expanded state changes\n       *\n       * @event expanded-state\n       * @param {Array} - array with indices of the expanded item per level; eg: [0, 1]: level1 first item, level2 second item is expanded\n       */\n      this.$emit('expanded-state', value);\n    },\n    /**\n     * calc max height for transition\n     *\n     * @params {object} el\n     */\n    maxHeight(el) {\n      const elementHeight = this.$el.querySelector('.base-expand-item').offsetHeight;\n      const maxHeight = elementHeight + elementHeight * this.dataInt.data.length;\n\n      el.setAttribute('style', `max-height: ${maxHeight}px`);\n    },\n    /**\n     * close expanded rows\n     *\n     * @params {array} rows\n     */\n    closeRows(rows) {\n      if (rows) {\n        rows.forEach((row) => {\n          // eslint-disable-next-line\n          row.expanded = false;\n        });\n      }\n    },\n    /**\n     * event triggered on enter transition\n     *\n     * @params {object} el\n     */\n    enter(el) {\n      this.maxHeight(el);\n    },\n    /**\n     * event triggered on finished enter transition\n     *\n     * @params {object} el\n     */\n    afterEnter(el) {\n      el.style.removeProperty('max-height');\n    },\n    /**\n     * event triggered on leave transition\n     *\n     * @params {object} el\n     */\n    leave(el) {\n      const elementHeight = this.$el.offsetHeight;\n      el.setAttribute('style', `max-height: ${elementHeight}px`);\n    },\n    /**\n     * event triggered on before leave transition\n     */\n    beforeLeave() {\n      // close expanded rows of current level\n      if (!this.multiple) {\n        this.closeRows(this.$refs.baseExpandListRow);\n      }\n    },\n    /**\n     * assistive text for screen readers\n     */\n    assistiveText(type = 'activate') {\n      if (!this.useAssistiveText) {\n        return;\n      }\n      /**\n       * event emitted on dragHandle toggle\n       *\n       * @event assistive\n       * @property {string} type\n       */\n      this.$emit('assistive', type);\n    },\n    /**\n     * set fadeOut elements depending on scroll position\n     *\n     * @param {object} row\n     */\n    scrollHandler(row) {\n      this.fadeOutLeft = !!row.scrollLeft;\n      this.fadeOutRight = row.scrollWidth - row.scrollLeft !== row.offsetWidth;\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../../styles/variables\";\n\n.base-expand-item {\n  display: flex;\n  align-items: center;\n  background-color: #fff;\n  margin-bottom: $border-width;\n  padding-left: calc(#{$spacing} - #{$border-active-width});\n  padding-right: $spacing;\n  outline: 1px solid $background-color;\n  border-left: $border-active-width solid transparent;\n  transition: border-left-color 500ms ease-in-out;\n  overflow: hidden;\n\n  a {\n    color: $app-color;\n    transition: $link-transition;\n    margin-right: 5px; // Todo: find better solution for spacing\n\n    &:hover,\n    &:focus {\n      color: $app-color-secondary;\n    }\n  }\n\n  &__col {\n    display: flex;\n    align-items: center;\n    min-height: $row-height-large;\n    overflow: hidden;\n  }\n\n  &__handle {\n    margin-right: $spacing-small;\n    color: $font-color-second;\n\n    svg {\n      transition: $drop-down-arrow-animation;\n      height: $icon-medium;\n      width: $icon-medium;\n      min-width: $icon-small;\n    }\n\n    &:hover,\n    &:focus {\n      cursor: grab;\n      color: $app-color;\n      outline: none;\n    }\n  }\n\n  &__label {\n    flex-grow: 1;\n    white-space: nowrap;\n    // enable scroll and hide scrollBars\n    overflow-x: auto;\n    scrollbar-width: none; /* Firefox */\n    -ms-overflow-style: none;  /* Internet Explorer 10+ */\n\n    &::-webkit-scrollbar { /* WebKit */\n      width: 0;\n      height: 0;\n    }\n\n    & .base-expand-item__overlay {\n      position: absolute;\n      content: '';\n      height: 100%;\n      width: 100%;\n      background: rgba(255, 255, 255, 40%);\n    }\n  }\n\n  &__controls {\n    justify-self: flex-end;\n    border-left: $border-width solid $background-color;\n    margin-right: -$spacing;\n\n    .base-expand-item__toggle {\n      margin: 0 $spacing;\n    }\n  }\n\n  &.base-text-fade-out::after {\n    right: $spacing-small;\n  }\n\n  &.base-text-fade-out-left::before {\n    left: calc(#{$spacing-large} - #{$border-active-width});\n\n    @media screen and (max-width: $mobile) {\n      left: calc(#{$spacing} - #{$border-active-width});\n    }\n  }\n\n  &--intend {\n    padding-left: calc(#{$spacing-large} - #{$border-active-width});\n\n    @media screen and (max-width: $mobile) {\n      padding-left: calc(#{$spacing} - #{$border-active-width});\n    }\n  }\n\n  &--movable {\n    position: relative;\n    z-index: 1;\n    outline: 1px solid $app-color;\n  }\n\n  &:focus {\n    .base-expand-item__handle {\n      color: $app-color;\n    }\n  }\n}\n</style>\n\n<style lang=\"scss\">\n@import \"../../styles/variables\";\n\n.expand-enter-active,\n.expand-leave-active {\n  transition-duration: $base-expand-list-transition-duration;\n  transition-timing-function: ease-in-out;\n}\n\n.expand-enter-to,\n.expand-leave {\n  overflow: hidden;\n}\n\n.expand-enter,\n.expand-leave-to {\n  overflow: hidden;\n  max-height: 0 !important;\n}\n\n.expand-enter {\n  .base-expand-item {\n    border-color: transparent !important;\n  }\n}\n\n.expand-enter-to {\n  .base-expand-item {\n    border-color: $app-color-secondary !important;\n  }\n}\n</style>\n\n<style lang=\"scss\">\n@import \"../../styles/baseExpand\";\n</style>\n"],"names":["_sfc_main","m","BaseExpandListRow$1","BaseIcon","i18n","val","dragHandle","scrollable","e","direction","currentState","rows","row","value","el","elementHeight","maxHeight","type"],"mappings":"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"}