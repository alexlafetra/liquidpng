{"version":3,"file":"BaseSearch.vue.cjs.js","sources":["../../../src/components/BaseSearch/BaseSearch.vue"],"sourcesContent":["<template>\n  <!-- make this a form so that iOS recognizes it as 'search'\n  (also the action=\".\" is needed for that) -->\n  <form\n    ref=\"search\"\n    action=\".\"\n    role=\"search\"\n    class=\"base-search\"\n    @submit.prevent\n    @keydown.enter.prevent>\n    <component\n      :is=\"inputComponent\"\n      :id=\"idInt\"\n      v-model=\"inputInt\"\n      :selected-list.sync=\"selectedChipsInt\"\n      :is-active.sync=\"isActiveInt\"\n      :type=\"dateFieldType\"\n      :show-label=\"false\"\n      :use-form-field-styling=\"false\"\n      :show-input-border=\"false\"\n      :label=\"label\"\n      :placeholder=\"placeholderInt\"\n      :linked-list-option=\"linkedListOption\"\n      :drop-down-list-id=\"dropDownListId || false.toString()\"\n      :is-loading=\"isLoading\"\n      :clearable=\"clearable\"\n      :invalid=\"invalid\"\n      :show-error-icon=\"showErrorIcon\"\n      :language=\"languageInt\"\n      :allow-unknown-entries=\"type === 'chips'\"\n      :loadable=\"loadable\"\n      :chips-editable=\"type === 'chips'\"\n      :label-property-name=\"isFieldTypeChips ? labelPropertyName : false\"\n      :identifier-property-name=\"isFieldTypeChips ? identifierPropertyName : false\"\n      :set-focus-on-active=\"setFocusOnActive\"\n      :add-selected-entry-directly=\"true\"\n      :assistive-text=\"!type.includes('date') ? {\n        selectedOption: assistiveText.selectedOption,\n        loaderActive: assistiveText.loaderActive,\n      } : undefined\"\n      :is-active-delay=\"dateFieldDelay\"\n      :allow-multiple-entries=\"isFieldTypeChips ? type !== 'chipssingle' : false\"\n      :chips-removable=\"type !== 'chipssingle'\"\n      input-class=\"base-search__input-field\"\n      field-type=\"search\"\n      enterkeyhint=\"search\"\n      class=\"base-search__input\"\n      v-on=\"$listeners\"\n      @keydown.enter=\"onEnter\">\n      <template #pre-input-field>\n        <!-- @slot add elements within search but before all other elements. for an example see [BaseInput](BaseInput) -->\n        <slot name=\"pre-input-field\" />\n      </template>\n      <template #input-field-addition-before>\n        <!-- @slot add elements within search but before all other elements. for an example see [BaseInput](BaseInput) -->\n        <slot name=\"input-field-addition-before\" />\n      </template>\n      <template #input-field-inline-before>\n        <div\n          :class=\"[dateFieldType && showPreInputIcon\n            ? 'base-search__spacing-date' : 'base-search__spacing']\" />\n        <!-- @slot a slot to exchange the magnifier icon with other elements -->\n        <slot name=\"input-field-inline-before\">\n          <BaseIcon\n            v-if=\"showPreInputIcon\"\n            name=\"magnifier\"\n            :class=\"['base-search__magnifier-icon',\n                     { 'base-search__magnifier-icon__date': !!dateFieldType },\n                     { 'base-search__magnifier-icon__active': isActiveInt }]\" />\n        </slot>\n      </template>\n      <template #input-field-addition-after>\n        <!-- @slot for adding elements after input. for an example see [BaseChipsInputField](BaseChipsInputField)-->\n        <slot name=\"input-field-addition-after\" />\n      </template>\n      <template #post-input-field>\n        <!-- @slot elements after the actual input element but within the input field container. for an example see [BaseChipsInputField](BaseChipsInputField)-->\n        <slot name=\"post-input-field\" />\n        <div :class=\"{ 'base-search__spacing': dateFieldType }\" />\n      </template>\n      <template #error-icon>\n        <!-- @slot use a custom icon instead of standard error/warning icon. for an example see [BaseChipsInputField](BaseChipsInputField)-->\n        <slot name=\"error-icon\" />\n      </template>\n      <template #remove-icon>\n        <!-- @slot for adding custom input remove icon. for an example see [BaseChipsInputField](BaseChipsInputField)-->\n        <slot name=\"remove-icon\" />\n      </template>\n      <template #below-input>\n        <!-- @slot below-input slot added to e.g. add drop down -->\n        <slot name=\"below-input\" />\n      </template>\n    </component>\n  </form>\n</template>\n\n<script>\nimport { createId } from '@/utils/utils';\nimport { useAnnouncer } from '@/composables/useAnnouncer';\nimport { ref, watch } from 'vue';\n\n/**\n * A basic text search to filter entries or files\n */\nexport default {\n  name: 'BaseSearch',\n  components: {\n    BaseIcon: () => import('../BaseIcon/BaseIcon').then(m => m.default || m),\n    BaseChipsInputField: () => import('../BaseChipsInputField/BaseChipsInputField').then(m => m.default || m),\n    BaseInput: () => import('../BaseInput/BaseInput').then(m => m.default || m),\n    BaseDateInput: () => import('../BaseDateInput/BaseDateInput').then(m => m.default || m),\n  },\n  model: {\n    prop: 'input',\n    event: 'input',\n  },\n  props: {\n    /**\n     * set input value from outside\n     *   for type `daterange` this needs to be an object with\n     *   `date_from` and `date_to` properties!\n     */\n    input: {\n      type: [String, Object],\n      default: '',\n    },\n    /**\n     * if input type is `chips` this is the prop to\n     * pass selected options (chips).\n     *  you may use the `.sync` modifier on this prop\n     */\n    selectedChips: {\n      type: Array,\n      default: () => ([]),\n    },\n    /**\n     * placeholder to show for input; either just a string or an object with\n     * different text for each search type (`text`, `chips`, `date`)\n     */\n    placeholder: {\n      type: [String, Object],\n      default: 'Search your works and events',\n    },\n    /**\n     * label connected with input (will not be visible but for usability!)\n     */\n    label: {\n      type: String,\n      default: 'Search',\n    },\n    /**\n     * define if the magnifier glass (in front of input field) should be shown\n     */\n    showPreInputIcon: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * specify the id of a linked drop down list\n     */\n    dropDownListId: {\n      type: String,\n      default: '',\n    },\n    /**\n     * specify a field id for identification of the input field\n     * if none is specified an internal id will be assigned\n     */\n    id: {\n      type: String,\n      default: '',\n    },\n    /**\n     * specify the type of input field\n     * @values text, chips, controlled, date, daterange, chipssingle\n     */\n    type: {\n      type: String,\n      default: 'text',\n      validator: val => ['text', 'chips', 'chipssingle', 'controlled', 'date', 'daterange'].includes(val),\n    },\n    /**\n     * specify a linked list option (e.g. drop down)\n     *   (will be used in `aria-activedescendant` attribute)\n     */\n    linkedListOption: {\n      type: [Number, String],\n      default: null,\n    },\n    /**\n     * if `true` space is reserved for a loader that can be activated\n     * with the 'isLoading' prop\n     */\n    loadable: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * is loading indicator - showing loader if `true`\n     */\n    isLoading: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * set the language (ISO 639-1)\n     */\n    language: {\n      type: String,\n      default: 'en',\n      validator: val => !val || val.length === 2,\n    },\n    /**\n     * specify the object property that should be used as identifier (only needed\n     * for type `chips`\n     */\n    identifierPropertyName: {\n      type: String,\n      default: 'id',\n    },\n    /**\n     * specify the object property that should be used as value to be displayed (only needed\n     * for type `chips`\n     */\n    labelPropertyName: {\n      type: String,\n      default: 'label',\n    },\n    /**\n     * mark the form field as invalid and ideally also provide an error message\n     * to display below the form field.\n     * for an example see [BaseInput](BaseInput)\n     */\n    invalid: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * define if error icon should be shown\n     * for an example see [BaseInput](BaseInput)\n     */\n    showErrorIcon: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * if `true` a remove icon will be shown allowing to remove\n     * all input at once.\n     * for an example see [BaseInput](BaseInput)\n     */\n    clearable: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * set active state from outside\n     */\n    isActive: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * use this prop to deactivate automatic setting of focus as soon as input element\n     * becomes active - this might require external handling of focus setting!\n     */\n    setFocusOnActive: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * this prop gives the option to add assistive text for screen readers\n     * properties:\n     *\n     * **selectedOption**: text read when a selected option is focused (currently only\n     *  working for type chips)\n     * **loaderActive**: text that is announced when results are being fetched (prop\n     *  `isLoading` is set `true`)\n     * **results**: provide text that should be announced when the search has\n     *  yielded results (or not).\n     *\n     *  Caveat: `results` has a watcher attached to trigger the\n     *    announcement so make sure the property values are reset after filling them\n     *    by using update:assistive-text or resetting it manually (after a timeout)\n     */\n    assistiveText: {\n      type: Object,\n      default: () => ({\n        selectedOption: '',\n        loaderActive: 'loading.',\n        results: '',\n      }),\n    },\n    /**\n     * use this prop to set a delay in ms before date input calender is displayed\n     */\n    dateFieldDelay: {\n      type: Number,\n      default: 0,\n    },\n  },\n  emits: ['input', 'update:selected-chips', 'update:is-active', 'update:assistive-text'],\n  setup(props, { emit }) {\n    /**\n     * set up a reference to the element to be able to attach the announcements element\n     * @type {Ref<UnwrapRef<null|HTMLElement>>}\n     */\n    const search = ref(null);\n    /**\n     * insert an HTML element with aria-live assertive that will announce the\n     * search result\n     * @type {Ref<UnwrapRef<string>>}\n     */\n    const { announcement } = useAnnouncer(search);\n\n    // also add a watcher to the announcement variable so user can easily have assistiveText.results\n    // reset after announcement (the watcher for this variable again is only working in setup!)\n    watch(announcement, (val) => {\n      // check if values are already in sync\n      if (val !== props.assistiveText.results) {\n        // if not - emit update\n        /**\n         * event to keep assistiveText.results in sync after\n         * announcement\n         * @event update:assistive-text\n         * @type {Object}\n         */\n        emit('update:assistive-text', {\n          ...props.assistiveText,\n          results: val,\n        });\n      }\n    });\n\n    return {\n      search,\n      // need to just export the announcement text because setting it in setup function\n      // did not work in nuxt (respectively the watcher on assistiveText did not work)\n      announcement,\n    };\n  },\n  data() {\n    return {\n      /**\n       * internal handling of the input active state\n       * @type {boolean}\n       */\n      isActiveInt: false,\n      /**\n       * internal handling of text input --> for 'chips' and 'text'\n       * (separated from dateInputInt to preserve the input when switching type)\n       * @type {string}\n       */\n      textInputInt: '',\n      /**\n       * internal handling of date input (separated from textInputInt to preserve\n       * the input when switching type)\n       * @type {string|Object}\n       */\n      dateInputInt: '',\n      /**\n       * internal handling of selected chips for type 'chips'\n       * @type {Array}\n       */\n      selectedChipsInt: [],\n    };\n  },\n  computed: {\n    /**\n     * compute and import only the component necessary for the respective type selected\n     * @returns {null|(function(): Promise<HTMLElement>)|string}\n     */\n    inputComponent() {\n      if (this.type === 'text') {\n        return 'BaseInput';\n      } if (this.isFieldTypeChips) {\n        return 'BaseChipsInputField';\n      } if (this.type === 'date' || this.type === 'daterange') {\n        return 'BaseDateInput';\n      }\n      return null;\n    },\n    /**\n     * compute the inputInt used for BaseInput v-model\n     * this can either be a string or an object - also this is used to\n     * convert dates between 'daterange' and 'date'\n     */\n    inputInt: {\n      /**\n       * set either textInputInt or dateInputInt depending on the type\n       * @param {string|{date_to: string, date_from: string}} val - depending on the type\n       * this is a date string, text string or an Object for 'daterange' with the following\n       * properties:\n       * @property {string} val.date_from\n       * @property {string} val.date_to\n       */\n      set(val) {\n        if (this.type === 'date') {\n          this.dateInputInt = val;\n          /**\n           * inform parent of changed input values (v-model)\n           *\n           * @event input\n           * @param {string, Object} - the altered input values\n           */\n          this.$emit('input', this.dateInputInt);\n        } else if (this.type === 'daterange') {\n          this.dateInputInt = { ...val };\n          this.$emit('input', this.dateInputInt);\n        } else {\n          this.textInputInt = val;\n          this.$emit('input', this.textInputInt);\n        }\n      },\n      /**\n       * get inputInt according to search type\n       * @returns {string|{date_to: string, date_from: string}}\n       */\n      get() {\n        // for date or daterange use dateInputInt and use correct type\n        // this preserves the date when switching between date and daterange btw\n        if (this.type === 'date') {\n          return this.dateInputInt.date_from || this.dateInputInt;\n        }\n        if (this.type === 'daterange') {\n          return typeof this.dateInputInt === 'object' ? this.dateInputInt : {\n            date_from: this.dateInputInt,\n            date_to: '',\n          };\n        }\n        // everything else just return the textInputInt string\n        // this preserves the text switching between chips and text\n        return this.textInputInt;\n      },\n    },\n    /**\n     * to easily access the type needed for BaseDateInput in case type\n     * is 'date' or 'daterange'\n     * @returns {string|boolean}\n     */\n    dateFieldType() {\n      if (this.type === 'date') {\n        return 'single';\n      }\n      if (this.type === 'daterange') {\n        return 'daterange';\n      }\n      // if type is neither 'date' or 'daterange' set the element attribute to false\n      // so it does not show up in the rendered HTML\n      return false;\n    },\n    /**\n     * compute adaptions necessary for BaseDateInput since this component currently\n     * only has 3 languages to choose from\n     * @returns {string}\n     */\n    languageInt() {\n      // adaptions for date input since only 'de', 'en', 'fr' available atm\n      if (this.type === 'date' || this.type === 'daterange') {\n        return ['de', 'en', 'fr'].includes(this.language) ? this.language : 'en';\n      }\n      return this.language;\n    },\n    /**\n     * determine if type is 'chips'\n     * @returns {boolean}\n     */\n    isFieldTypeChips() {\n      return this.type.includes('chips') || this.type === 'controlled';\n    },\n    /**\n     * internally used id - eiter provided by props or created internally with utils function\n     * @returns {string}\n     */\n    idInt() {\n      return this.id || createId();\n    },\n    placeholderInt() {\n      if (typeof this.placeholder === 'string') {\n        return this.placeholder;\n      }\n      if (this.type.includes('date')) {\n        return this.placeholder.date;\n      }\n      if (this.type === 'controlled' || this.type === 'chipssingle') {\n        return this.placeholder.chips;\n      }\n      return this.placeholder[this.type];\n    },\n  },\n  watch: {\n    /**\n     * watch input prop to sync with inputInt\n     * @param {string|{date_from: string, date_to: string}} val\n     */\n    input: {\n      handler(val) {\n        // if value is empty clear all input (to be able to reset the component completely)\n        if (!val) {\n          this.textInputInt = '';\n          this.dateInputInt = this.type === 'daterange' ? {\n            date_from: '',\n            date_to: '',\n          } : '';\n          // else if input is not matching internal input update\n        } else if (val !== this.inputInt) {\n          this.inputInt = val;\n        }\n      },\n      immediate: true,\n    },\n    /**\n     * watch inputInt to sync with parent input\n     * @param {string|{date_from: string, date_to: string}} val\n     */\n    inputInt(val) {\n      if (val !== this.input) {\n        this.$emit('input', val);\n      }\n    },\n    /**\n     * watch selectedChips prop to sync with selectedChipsInt\n     * @param {Object[]} val\n     */\n    selectedChips: {\n      handler(val) {\n        if (JSON.stringify(val) !== JSON.stringify(this.selectedChipsInt)) {\n          this.selectedChipsInt = [...val];\n        }\n      },\n      immediate: true,\n    },\n    /**\n     * watch selectedChipsInt to sync with selectedChips prop provided by parent\n     * @param {Object[]} val\n     */\n    selectedChipsInt(val) {\n      if (JSON.stringify(val) !== JSON.stringify(this.selectedChips)) {\n        /**\n         * inform parent of changes in selected chips\n         *\n         * @event update:selected-chips\n         * @param {Array} - the updated selected options list\n         */\n        this.$emit('update:selected-chips', val);\n      }\n    },\n    /**\n     * sync internal active state with parent\n     */\n    isActive: {\n      handler(val) {\n        if (val !== this.isActiveInt) {\n          this.isActiveInt = val;\n        }\n      },\n      immediate: true,\n    },\n    isActiveInt(val) {\n      if (val !== this.isActive) {\n        /**\n         * inform parent if is active has changed internally\n         * @event update:is-active\n         * @type {boolean}\n         */\n        this.$emit('update:is-active', val);\n      }\n    },\n    /**\n     * inserting this component in Nuxt only options API watcher on prop\n     * is working (in setup this is not working)\n     */\n    assistiveText: {\n      handler(val) {\n        this.announcement = val.results;\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    onEnter(event) {\n      // if device has a virtual keyboard open we want to close it on search enter\n      // just to be safe also check if the target element (where the keydown came from) is the\n      // search input - compare ids\n      if (window.visualViewport.height < window.innerHeight && event.target.id === this.idInt) {\n        event.target.blur();\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import '../../styles/variables.scss';\n\n.base-search {\n  background: white;\n  min-height: $row-height-large;\n  width: 100%;\n\n  .base-search__input {\n    background:white;\n    width: 100%;\n    min-height: $row-height-large;\n\n    .base-search__spacing {\n      margin-left: $spacing-small;\n      content: '';\n    }\n\n    .base-search__spacing-date {\n      margin-left: $spacing;\n    }\n\n    .base-search__magnifier-icon {\n      height: $icon-large;\n      width: $icon-large;\n      margin-right: $spacing;\n      flex-shrink: 0;\n      align-self: center;\n\n      &.base-search__magnifier-icon__date {\n        margin-right: $spacing-small;\n      }\n\n      &.base-search__magnifier-icon__active {\n        color: grey;\n        fill: grey;\n      }\n    }\n  }\n}\n</style>\n\n<style lang=\"scss\">\n@import '../../styles/variables.scss';\n.base-search__input-field {\n  min-height: $row-height-large !important;\n}\n</style>\n"],"names":["_sfc_main","m","val","props","emit","search","ref","announcement","useAnnouncer","watch","createId","event"],"mappings":"qWAwGAA,EAAA,CACA,KAAA,aACA,WAAA,CACA,SAAA,IAAA,QAAA,QAAA,EAAA,KAAA,IAAA,QAAA,iCAAA,GAAA,KAAAC,GAAAA,EAAA,SAAAA,CAAA,EACA,oBAAA,IAAA,QAAA,QAAA,EAAA,KAAA,IAAA,QAAA,uDAAA,GAAA,KAAAA,GAAAA,EAAA,SAAAA,CAAA,EACA,UAAA,IAAA,QAAA,QAAA,EAAA,KAAA,IAAA,QAAA,mCAAA,GAAA,KAAAA,GAAAA,EAAA,SAAAA,CAAA,EACA,cAAA,IAAA,QAAA,QAAA,EAAA,KAAA,IAAA,QAAA,2CAAA,GAAA,KAAAA,GAAAA,EAAA,SAAAA,CAAA,CACA,EACA,MAAA,CACA,KAAA,QACA,MAAA,OACA,EACA,MAAA,CAMA,MAAA,CACA,KAAA,CAAA,OAAA,MAAA,EACA,QAAA,EACA,EAMA,cAAA,CACA,KAAA,MACA,QAAA,IAAA,CAAA,CACA,EAKA,YAAA,CACA,KAAA,CAAA,OAAA,MAAA,EACA,QAAA,8BACA,EAIA,MAAA,CACA,KAAA,OACA,QAAA,QACA,EAIA,iBAAA,CACA,KAAA,QACA,QAAA,EACA,EAIA,eAAA,CACA,KAAA,OACA,QAAA,EACA,EAKA,GAAA,CACA,KAAA,OACA,QAAA,EACA,EAKA,KAAA,CACA,KAAA,OACA,QAAA,OACA,UAAAC,GAAA,CAAA,OAAA,QAAA,cAAA,aAAA,OAAA,WAAA,EAAA,SAAAA,CAAA,CACA,EAKA,iBAAA,CACA,KAAA,CAAA,OAAA,MAAA,EACA,QAAA,IACA,EAKA,SAAA,CACA,KAAA,QACA,QAAA,EACA,EAIA,UAAA,CACA,KAAA,QACA,QAAA,EACA,EAIA,SAAA,CACA,KAAA,OACA,QAAA,KACA,UAAAA,GAAA,CAAAA,GAAAA,EAAA,SAAA,CACA,EAKA,uBAAA,CACA,KAAA,OACA,QAAA,IACA,EAKA,kBAAA,CACA,KAAA,OACA,QAAA,OACA,EAMA,QAAA,CACA,KAAA,QACA,QAAA,EACA,EAKA,cAAA,CACA,KAAA,QACA,QAAA,EACA,EAMA,UAAA,CACA,KAAA,QACA,QAAA,EACA,EAIA,SAAA,CACA,KAAA,QACA,QAAA,EACA,EAKA,iBAAA,CACA,KAAA,QACA,QAAA,EACA,EAgBA,cAAA,CACA,KAAA,OACA,QAAA,KAAA,CACA,eAAA,GACA,aAAA,WACA,QAAA,EACA,EACA,EAIA,eAAA,CACA,KAAA,OACA,QAAA,CACA,CACA,EACA,MAAA,CAAA,QAAA,wBAAA,mBAAA,uBAAA,EACA,MAAAC,EAAA,CAAA,KAAAC,GAAA,CAKA,MAAAC,EAAAC,MAAA,IAAA,EAMA,CAAA,aAAAC,CAAA,EAAAC,EAAA,aAAAH,CAAA,EAIAI,OAAAA,QAAAF,EAAAL,GAAA,CAEAA,IAAAC,EAAA,cAAA,SAQAC,EAAA,wBAAA,CACA,GAAAD,EAAA,cACA,QAAAD,CACA,CAAA,CAEA,CAAA,EAEA,CACA,OAAAG,EAGA,aAAAE,CACA,CACA,EACA,MAAA,CACA,MAAA,CAKA,YAAA,GAMA,aAAA,GAMA,aAAA,GAKA,iBAAA,CAAA,CACA,CACA,EACA,SAAA,CAKA,gBAAA,CACA,OAAA,KAAA,OAAA,OACA,YACA,KAAA,iBACA,sBACA,KAAA,OAAA,QAAA,KAAA,OAAA,YACA,gBAEA,IACA,EAMA,SAAA,CASA,IAAAL,EAAA,CACA,KAAA,OAAA,QACA,KAAA,aAAAA,EAOA,KAAA,MAAA,QAAA,KAAA,YAAA,GACA,KAAA,OAAA,aACA,KAAA,aAAA,CAAA,GAAAA,GACA,KAAA,MAAA,QAAA,KAAA,YAAA,IAEA,KAAA,aAAAA,EACA,KAAA,MAAA,QAAA,KAAA,YAAA,EAEA,EAKA,KAAA,CAGA,OAAA,KAAA,OAAA,OACA,KAAA,aAAA,WAAA,KAAA,aAEA,KAAA,OAAA,YACA,OAAA,KAAA,cAAA,SAAA,KAAA,aAAA,CACA,UAAA,KAAA,aACA,QAAA,EACA,EAIA,KAAA,YACA,CACA,EAMA,eAAA,CACA,OAAA,KAAA,OAAA,OACA,SAEA,KAAA,OAAA,YACA,YAIA,EACA,EAMA,aAAA,CAEA,OAAA,KAAA,OAAA,QAAA,KAAA,OAAA,YACA,CAAA,KAAA,KAAA,IAAA,EAAA,SAAA,KAAA,QAAA,EAAA,KAAA,SAAA,KAEA,KAAA,QACA,EAKA,kBAAA,CACA,OAAA,KAAA,KAAA,SAAA,OAAA,GAAA,KAAA,OAAA,YACA,EAKA,OAAA,CACA,OAAA,KAAA,IAAAQ,EAAAA,UACA,EACA,gBAAA,CACA,OAAA,OAAA,KAAA,aAAA,SACA,KAAA,YAEA,KAAA,KAAA,SAAA,MAAA,EACA,KAAA,YAAA,KAEA,KAAA,OAAA,cAAA,KAAA,OAAA,cACA,KAAA,YAAA,MAEA,KAAA,YAAA,KAAA,IAAA,CACA,CACA,EACA,MAAA,CAKA,MAAA,CACA,QAAAR,EAAA,CAEAA,EAOAA,IAAA,KAAA,WACA,KAAA,SAAAA,IAPA,KAAA,aAAA,GACA,KAAA,aAAA,KAAA,OAAA,YAAA,CACA,UAAA,GACA,QAAA,EACA,EAAA,GAKA,EACA,UAAA,EACA,EAKA,SAAAA,EAAA,CACAA,IAAA,KAAA,OACA,KAAA,MAAA,QAAAA,CAAA,CAEA,EAKA,cAAA,CACA,QAAAA,EAAA,CACA,KAAA,UAAAA,CAAA,IAAA,KAAA,UAAA,KAAA,gBAAA,IACA,KAAA,iBAAA,CAAA,GAAAA,CAAA,EAEA,EACA,UAAA,EACA,EAKA,iBAAAA,EAAA,CACA,KAAA,UAAAA,CAAA,IAAA,KAAA,UAAA,KAAA,aAAA,GAOA,KAAA,MAAA,wBAAAA,CAAA,CAEA,EAIA,SAAA,CACA,QAAAA,EAAA,CACAA,IAAA,KAAA,cACA,KAAA,YAAAA,EAEA,EACA,UAAA,EACA,EACA,YAAAA,EAAA,CACAA,IAAA,KAAA,UAMA,KAAA,MAAA,mBAAAA,CAAA,CAEA,EAKA,cAAA,CACA,QAAAA,EAAA,CACA,KAAA,aAAAA,EAAA,OACA,EACA,KAAA,EACA,CACA,EACA,QAAA,CACA,QAAAS,EAAA,CAIA,OAAA,eAAA,OAAA,OAAA,aAAAA,EAAA,OAAA,KAAA,KAAA,OACAA,EAAA,OAAA,MAEA,CACA,CACA"}