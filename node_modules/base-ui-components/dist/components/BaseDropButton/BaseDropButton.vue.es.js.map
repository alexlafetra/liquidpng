{"version":3,"file":"BaseDropButton.vue.es.js","sources":["../../../src/components/BaseDropButton/BaseDropButton.vue"],"sourcesContent":["<template>\n  <div\n    v-click-outside=\"() => showOptions = false\"\n    class=\"base-drop-button\">\n    <BaseButton\n      :text=\"primaryButtonInt[labelPropertyName]\"\n      :icon=\"primaryButtonInt.icon || null\"\n      icon-size=\"large\"\n      :class=\"{ 'base-drop-button__button__multi': buttonsInt && buttonsInt.length }\"\n      @clicked=\"fireAction(primaryButtonInt[identifierPropertyName])\">\n      <template #left-of-text>\n        <!-- @slot create custom content (e.g. icon) left of text -->\n        <slot name=\"left-of-text\" />\n      </template>\n      <template #right-of-text>\n        <!-- @slot create custom content (e.g. icon) right of text -->\n        <slot name=\"right-of-text\" />\n      </template>\n    </BaseButton>\n    <div\n      v-if=\"buttonsInt && buttonsInt.length\"\n      ref=\"dropArea\"\n      class=\"base-drop-button__options-area\">\n      <button\n        :aria-expanded=\"showOptions.toString()\"\n        :aria-label=\"expandButtonLabel\"\n        :class=\"['base-drop-button__toggle-button',\n                 { 'base-drop-button__toggle-button__active': showOptions }]\"\n        type=\"button\"\n        aria-haspopup=\"listbox\"\n        @click.prevent=\"showOptions = !showOptions\"\n        @keydown.enter.prevent=\"dropDownEnterAction\"\n        @keydown.tab=\"activeOption = null\"\n        @keydown.up.down.prevent=\"navigateOptions\">\n        <BaseIcon\n          name=\"drop-down\"\n          :class=\"['base-drop-button__drop-icon',\n                   { 'base-drop-button__drop-icon__rotated': showOptions }]\" />\n      </button>\n      <BaseDropDownList\n        v-if=\"showOptions\"\n        ref=\"dropDown\"\n        :drop-down-options=\"buttonsInt\"\n        :active-option=\"activeOption\"\n        :active-styled=\"false\"\n        :style=\"dropDownTransformation\"\n        :aria-activedescendant=\"activeOption ? `button-${activeOption.action}` : false\"\n        :identifier-property-name=\"identifierPropertyName\"\n        :label-property-name=\"labelPropertyName\"\n        :class=\"[\n          'base-drop-button__drop-down',\n          `base-drop-button__drop-down__${dropDownPosition.horizontal}`,\n          `base-drop-button__drop-down__${dropDownPosition.vertical}`,\n        ]\">\n        <template #option=\"{ option }\">\n          <button\n            :id=\"`button-${option[identifierPropertyName]}`\"\n            :class=\"[\n              'base-drop-button__action',\n              {\n                'base-drop-button__action__active': activeOption\n                  && option[identifierPropertyName] === activeOption[identifierPropertyName],\n              }]\"\n            type=\"button\"\n            @keydown.up.down.prevent=\"\"\n            @click.prevent=\"fireAction(option[identifierPropertyName])\">\n            <BaseIcon\n              v-if=\"option.icon\"\n              :name=\"option.icon\"\n              class=\"base-drop-button__action-icon\" />\n            <span>{{ option[labelPropertyName] }}</span>\n          </button>\n        </template>\n      </BaseDropDownList>\n    </div>\n  </div>\n</template>\n\n<script>\nimport ClickOutside from 'vue-click-outside';\nimport BaseButton from '@/components/BaseButton/BaseButton';\nimport BaseDropDownList from '@/components/BaseDropDownList/BaseDropDownList';\nimport BaseIcon from '@/components/BaseIcon/BaseIcon';\nimport navigateList from '../../mixins/navigateList';\n\n/**\n * An Element to have the functionality of several buttons in one element\n */\nexport default {\n  name: 'BaseDropButton',\n  components: {\n    BaseDropDownList,\n    BaseButton,\n    BaseIcon,\n  },\n  directives: {\n    ClickOutside,\n  },\n  mixins: [navigateList],\n  props: {\n    /**\n     * array of button options\n     * specify an array of strings naming the action (in case label and icon are handled via slot)\n     * or objects with `action`, `label` and `icon` (`action` and `label` may be customized\n     * via `identifierPropertyName` and `labelPropertyName` respectively)\n     */\n    buttons: {\n      type: Array,\n      default: () => [],\n    },\n    /**\n     * specify either a button object or the identifier value of one of the items in\n     * the buttons array that should be shown as primary button - always visible.\n     * in case a string is provided an object with that identifier should be present in the buttons\n     * array!\n     */\n    primaryButton: {\n      type: [Object, String],\n      default: null,\n    },\n    /**\n     * add a description for the expand button - purely for accessibility\n     * functionalities\n     */\n    expandButtonLabel: {\n      type: String,\n      default: 'Show more Options',\n    },\n    /**\n     * specify a custom buttons array object property that should be used as\n     * identifier\n     */\n    identifierPropertyName: {\n      type: String,\n      default: 'action',\n    },\n    /**\n     * specify a custom buttons array object property that should be used as\n     * label\n     */\n    labelPropertyName: {\n      type: String,\n      default: 'label',\n    },\n  },\n  data() {\n    return {\n      /**\n       * handle hiding and showing of drop down options\n       * @type {boolean}\n       */\n      showOptions: false,\n      /**\n       * the currently active option when navigating via keys\n       * @type {?Object}\n       */\n      activeOption: null,\n      /**\n       * a variable to steer the css classes for drop down positioning (this way\n       * scss variables can still be used)\n       * @type {Object}\n       * @property {string} dropDownPosition.horizontal - to position drop down 'left' or 'right'\n       * @property {string} dropDownPosition.vertical - to position drop down 'top' or 'bottom'\n       */\n      dropDownPosition: {\n        horizontal: 'right',\n        vertical: 'bottom',\n      },\n      /**\n       * a variable to add additional styling to the drop-down in case there is not enough space\n       * to handle positioning with css classes - since used for HTML attribute 'style' either an\n       * object with 'transform' property or 'false' so that attribute is not shown\n       * @type {boolean|Object}\n       */\n      dropDownTransformation: false,\n    };\n  },\n  computed: {\n    /**\n     * get the primary button - since prop 'primaryButton' can be either a string with the\n     * identifier or the complete object - it is handled here to have the complete object\n     * available for primary button\n     * @returns {Object}\n     */\n    primaryButtonInt() {\n      // check if a primary button was specififed\n      if (this.primaryButton) {\n        // if yes - check if it is an object that can be returned readily or\n        // alternatively search the buttons array for an object with the specified identifier\n        // TODO: what happens if no button with that identifier is found\n        return typeof this.primaryButton === 'object'\n          ? this.primaryButton : this.buttons\n            .find(button => this.primaryButton === button[this.identifierPropertyName]);\n      }\n      // if none was specififed just return the first object of the buttons array\n      return this.buttons[0];\n    },\n    /**\n     * filter the buttons for the primary button to not have it shown double\n     * @returns {Object[]}\n     */\n    buttonsInt() {\n      return this.buttons.filter(button => button[this.identifierPropertyName]\n        !== this.primaryButtonInt[this.identifierPropertyName]);\n    },\n  },\n  watch: {\n    buttonsInt() {\n      // if buttons changed the drop-down size might have as well - recalculate\n      // the position of the drop-down\n      // this might be obsolete now due to the v-click-outside but still leaving it here in case\n      // there might be any other scenario where drop-down size changes\n      this.calculateDropDownPosition();\n    },\n    showOptions(val) {\n      if (val) {\n        // wait until element is rendered\n        this.$nextTick(() => {\n          // calculate correct drop down position on drop down opening\n          this.calculateDropDownPosition();\n        });\n      } else {\n        // reset activeOption on drop down close\n        this.activeOption = null;\n      }\n    },\n  },\n  mounted() {\n    if (window) {\n      // add an event listener to adjust drop down position to window size\n      window.addEventListener('resize', this.calculateDropDownPosition);\n    }\n  },\n  destroyed() {\n    window.removeEventListener('resize', this.calculateDropDownPosition);\n  },\n  methods: {\n    /**\n     * function triggered on enter key event\n     */\n    dropDownEnterAction() {\n      // in case there is an active option - inform parent that action\n      // should be triggered\n      if (this.activeOption) {\n        this.fireAction(this.activeOption[this.identifierPropertyName]);\n      } else {\n        // else close drop down\n        this.showOptions = !this.showOptions;\n      }\n    },\n    /**\n     * function triggered on key up or down and tab key\n     * @param {KeyboardEvent} event\n     */\n    navigateOptions(event) {\n      // check if key was up or down or tab back or forth\n      const isArrowDown = event.key === 'ArrowDown'\n        || (event.key === 'Tab' && !event.shiftKey);\n      // get the current index needed for navigate function\n      const currentIndex = this.buttonsInt.indexOf(this.activeOption);\n      // call mixin navigate function that returns the new active option\n      this.activeOption = this.navigate(\n        this.buttonsInt,\n        isArrowDown,\n        currentIndex,\n        true,\n      );\n    },\n    /**\n     * function to inform parent that action was triggered (by click or enter)\n     * @param {string} actionType\n     */\n    fireAction(actionType) {\n      // close drop down and reset everything\n      this.showOptions = false;\n      /**\n       * fired upon any button click\n       *\n       * @event clicked\n       * @param {string} - the action (string) that was provided for that button\n       */\n      this.$emit('clicked', actionType);\n    },\n    /**\n     * function to calculate correct drop down position within window limits\n     */\n    calculateDropDownPosition() {\n      // check if elements are renderend\n      if (this.$refs.dropDown) {\n        // use viewport width instead of window width so element is always in view\n        // even if window is wider than visible frame\n        const windowWidth = window.visualViewport.width;\n        // get drop down position\n        const dropElement = this.$refs.dropDown.$el.getBoundingClientRect();\n        // get parent element position\n        const dropAreaPosition = this.$refs.dropArea.getBoundingClientRect();\n        // get top, bottom, left, and right position for parent element\n        const dropAreaStart = dropAreaPosition.x;\n        const dropAreaEnd = dropAreaStart + dropAreaPosition.width;\n        const dropAreaTop = dropAreaPosition.y;\n        const dropAreaBottom = dropAreaTop + dropAreaPosition.height;\n\n        // check for left/right position\n        // check if element has space on the right side\n        if (dropAreaStart + dropElement.width >= windowWidth) {\n          // if not check if there is enough space on the left side\n          if (dropAreaEnd - dropElement.width >= 0) {\n            // if yes - position it on the left side\n            this.dropDownTransformation = false;\n            this.dropDownPosition.horizontal = 'left';\n            // if not - try to shift gradually until space used up\n          } else {\n            const moveToLeft = windowWidth - dropAreaStart - dropElement.width;\n            // check if move would put box above window threshold\n            if (dropAreaStart + moveToLeft >= 0) {\n              // if not move the calculated px\n              this.dropDownTransformation = {\n                transform: `translate(${moveToLeft}px, 0px)`,\n              };\n              this.dropDownPosition.horizontal = 'right';\n              // if yes - only move to window border\n            } else {\n              this.dropDownTransformation = {\n                transform: `translate(-${dropAreaStart}px, 0px)`,\n              };\n              this.dropDownPosition.horizontal = 'right';\n            }\n          }\n        } else {\n          // just set element in standard position\n          this.dropDownTransformation = false;\n          this.dropDownPosition.horizontal = 'right';\n        }\n\n        // check for top/bottom position\n        // check if element has enough space on the bottom\n        if (dropAreaBottom + dropElement.height >= window.visualViewport.height) {\n          // if not check if there is enough space on the top\n          if (dropAreaTop - dropElement.height >= 0) {\n            // if yes - position it on the top\n            this.dropDownPosition.vertical = 'top';\n          }\n        } else {\n          // just set element in standard position\n          this.dropDownPosition.vertical = 'bottom';\n        }\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../../styles/variables\";\n\n.base-drop-button {\n  position: relative;\n  display: flex;\n  flex-direction: row;\n\n  .base-drop-button__button__multi {\n    box-shadow: inset -1.5px 0 0 0 #{$font-color-second};\n\n    &:hover {\n      --button-header-color: white;\n    }\n  }\n\n  .base-drop-button__options-area {\n    position: relative;\n\n    .base-drop-button__toggle-button {\n      height: 100%;\n      padding: $spacing-small $spacing;\n      background: $background-color;\n      color: inherit;\n\n      &.base-drop-button__toggle-button__active,\n      &:hover {\n        background: white;\n      }\n\n      &:hover .base-drop-button__drop-icon,\n      &:focus .base-drop-button__drop-icon,\n      &:active .base-drop-button__drop-icon {\n        color: $app-color;\n        fill: $app-color;\n      }\n\n      .base-drop-button__drop-icon {\n        height: $icon-small;\n        width: $icon-small;\n        transition: $drop-down-arrow-animation;\n\n        &.base-drop-button__drop-icon__rotated {\n          transform: rotate(180deg);\n        }\n      }\n    }\n\n    .base-drop-button__drop-down {\n      background: white;\n\n      .base-drop-button__action {\n        display: flex;\n        align-items: center;\n        min-height: $row-height-small - $spacing-small-half;\n        width: 100%;\n        color: inherit;\n        white-space: nowrap;\n\n        &.base-drop-button__action__active, &:hover, &:focus, &:active {\n          color: $app-color;\n        }\n\n        .base-drop-button__action-icon {\n          height: $icon-medium;\n          width: $icon-medium;\n          max-width: $icon-medium;\n          flex: 0 0 auto;\n          margin-right: $spacing;\n        }\n      }\n\n      &.base-drop-button__drop-down__top {\n        bottom: $row-height-small;\n        box-shadow: 0 -10px 10px 0 rgba(0, 0, 0, 25%);\n      }\n\n      &.base-drop-button__drop-down__bottom {\n        bottom: auto;\n        box-shadow: $drop-shadow;\n      }\n\n      &.base-drop-button__drop-down__left {\n        right: 0;\n      }\n\n      &.base-drop-button__drop-down__right {\n        right: auto;\n      }\n    }\n  }\n}\n</style>\n"],"names":["_sfc_main","BaseDropDownList","BaseButton","BaseIcon","ClickOutside","navigateList","button","val","event","isArrowDown","currentIndex","actionType","windowWidth","dropElement","dropAreaPosition","dropAreaStart","dropAreaEnd","dropAreaTop","dropAreaBottom","moveToLeft"],"mappings":"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"}