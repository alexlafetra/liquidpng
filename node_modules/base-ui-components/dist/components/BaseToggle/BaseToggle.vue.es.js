import { createId as d } from "../../utils/utils.es.js";
import r from "../BaseIcon/BaseIcon.vue.es.js";
import "./BaseToggle.vue.es2.js";
import h from "../../_virtual/_plugin-vue2_normalizer.es.js";
const f = {
  name: "BaseToggle",
  components: {
    BaseIcon: r
  },
  model: {
    prop: "checked",
    event: "clicked"
  },
  props: {
    /**
     * specify a descriptive name
     * this will not be displayed but is only there for usability purposes
     */
    name: {
      type: String,
      default: "baseToggle"
    },
    /**
     * specify label
     */
    label: {
      type: String,
      default: "baseToggle"
    },
    /**
     * disable the toggle button
     */
    disabled: {
      type: Boolean,
      default: !1
    },
    /**
     * is toggle checked
     */
    checked: {
      type: Boolean,
      default: !1
    },
    /**
     * specify visibility of the label
     */
    hideLabel: {
      type: Boolean,
      default: !1
    },
    /**
     * bind visibility of slot content to components checked state
     */
    bindSlotToState: {
      type: Boolean,
      default: !1
    },
    /**
     * if field is occurring more than once - set an id
     */
    id: {
      type: String,
      default: ""
    }
  },
  data() {
    return {
      checkedInt: !1,
      animate: !1
    };
  },
  computed: {
    /**
     * check if an id was provided (to handle label input connection), if not create one
     * @returns {String|string}
     */
    idInt() {
      return this.id || d();
    }
  },
  watch: {
    checked: {
      handler(c) {
        c !== this.checkedInt && (this.checkedInt = c);
      },
      immediate: !0
    },
    checkedInt(c) {
      this.$emit("clicked", c);
    }
  }
};
var u = function() {
  var e = this, t = e._self._c;
  return t("div", { class: [
    "base-toggle",
    { "base-toggle--checked": e.checkedInt },
    { "base-toggle--disabled": e.disabled }
  ], on: { focusin: function(a) {
    e.animate = !0;
  }, mouseover: function(a) {
    e.animate = !0;
  }, focusout: function(a) {
    e.animate = !1;
  }, mouseleave: function(a) {
    e.animate = !1;
  } } }, [t("label", { staticClass: "base-toggle__container", attrs: { for: `toggle-input-${e.idInt}` } }, [t("input", { directives: [{ name: "model", rawName: "v-model", value: e.checkedInt, expression: "checkedInt" }], staticClass: "base-toggle__input", attrs: { id: `toggle-input-${e.idInt}`, name: e.name, disabled: e.disabled, "aria-checked": e.checkedInt, "aria-disabled": e.disabled, value: "", type: "checkbox" }, domProps: { checked: e.checkedInt, checked: Array.isArray(e.checkedInt) ? e._i(e.checkedInt, "") > -1 : e.checkedInt }, on: { click: function(a) {
    a.stopPropagation();
  }, change: function(a) {
    var n = e.checkedInt, l = a.target, i = !!l.checked;
    if (Array.isArray(n)) {
      var o = "", s = e._i(n, o);
      l.checked ? s < 0 && (e.checkedInt = n.concat([o])) : s > -1 && (e.checkedInt = n.slice(0, s).concat(n.slice(s + 1)));
    } else
      e.checkedInt = i;
  } } }), t("div", { staticClass: "base-switch" }, [t("span", { class: ["base-switch__control", { "base-switch__control--animate": e.animate }] }, [e.checkedInt ? t("BaseIcon", { attrs: { title: e.hideLabel ? e.label : "", name: "check-mark" } }) : e._e(), e.checkedInt ? e._e() : t("BaseIcon", { attrs: { title: e.hideLabel ? e.label : "", name: "remove" } })], 1)]), e.hideLabel ? e._e() : t("span", { staticClass: "base-toggle__label" }, [e._v(" " + e._s(e.label) + " ")])]), e.$slots.default && e.checked && e.bindSlotToState || e.$slots.default && !e.bindSlotToState ? t("span", { staticClass: "base-toggle__subtext" }, [e._t("default")], 2) : e._e()]);
}, m = [], b = /* @__PURE__ */ h(
  f,
  u,
  m,
  !1,
  null,
  "b616c74d",
  null,
  null
);
const I = b.exports;
export {
  I as default
};
//# sourceMappingURL=BaseToggle.vue.es.js.map
