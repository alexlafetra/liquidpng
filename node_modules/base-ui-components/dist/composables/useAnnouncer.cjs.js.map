{"version":3,"file":"useAnnouncer.cjs.js","sources":["../../src/composables/useAnnouncer.js"],"sourcesContent":["import { ref, watch } from 'vue';\n\n/**\n * composable to add an HTML element to a component that uses aria-live 'assertive'\n *  to announce provided text\n *\n * @param {Ref<UnwrapRef<null|HTMLElement>>} target - a reference to an element where the announcer should\n *  be appended to\n * @param {number} timeout - time (in ms) to wait until announcement text is deleted again\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function useAnnouncer(target, timeout = 300) {\n  /**\n   * variable to save the assertive element to be able to update / delete the\n   * innerText from it\n   * @type {Ref<UnwrapRef<null|HTMLElement>>}\n   */\n  const assertiveElement = ref(null);\n  /**\n   * variable to control the text to be read\n   * @type {Ref<UnwrapRef<string>>}\n   */\n  const announcement = ref('');\n\n  // automatically delete the text again after a timeout, so the\n  // same text could be read again at a later point in time\n  function clearText() {\n    setTimeout(() => {\n      // reset HTML element inner text\n      assertiveElement.value.innerText = '';\n      // and announcement string (so changes to it can be detected)\n      announcement.value = '';\n    }, timeout);\n  }\n\n  // watch the provided announcement value for changes and update\n  // the element inner text if necessary\n  watch(announcement, (val) => {\n    // first check if the target element exists, so assertive element could be set\n    if (!target.value) {\n      // eslint-disable-next-line no-console\n      console.warn('Announcement element could not be set because the target reference is undefined!');\n      return;\n    }\n    // if a string was set assign it to the HTML element created earlier\n    if (val) {\n      assertiveElement.value.innerText = val;\n      // afterward trigger the text clearance\n      clearText();\n    }\n  });\n\n  /**\n   * unfortunately it is currently not possible to use onMounted with the nuxt frontend\n   * (warning: nuxt [Vue warn]: onMounted is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup().)\n   * therefore we use a watcher on the element reference and add the assertive\n   * element once this is there\n   */\n  watch(target, () => {\n    if (target.value) {\n      // create a HTML element\n      assertiveElement.value = document.createElement('div');\n      // use the 'hide' class to hide it from the screen\n      assertiveElement.value.classList.add('hide');\n      // set the aria-live attribute to 'assertive' so it is announced as soon as it\n      // is filled with text\n      assertiveElement.value.setAttribute('aria-live', 'assertive');\n      // append the element to the component\n      target.value.appendChild(assertiveElement.value);\n    }\n  });\n\n  return {\n    // export announcement variable so it can be modified in the component\n    announcement,\n  };\n}\n"],"names":["useAnnouncer","target","timeout","arguments","length","undefined","assertiveElement","ref","announcement","clearText","setTimeout","value","innerText","watch","val","console","warn","document","createElement","classList","add","setAttribute","appendChild"],"mappings":"uGAWO,SAASA,EAAaC,EAAuB,CAAA,IAAfC,EAAOC,UAAAC,OAAA,GAAAD,UAAA,CAAA,IAAAE,OAAAF,UAAA,CAAA,EAAG,IAMvCG,EAAmBC,MAAI,IAAI,EAK3BC,EAAeD,MAAI,EAAE,EAI3B,SAASE,GAAY,CACnBC,WAAW,UAAM,CAEfJ,EAAiBK,MAAMC,UAAY,GAEnCJ,EAAaG,MAAQ,EACtB,EAAET,CAAO,CACZ,CAIAW,OAAAA,QAAML,EAAc,SAACM,EAAQ,CAE3B,GAAI,CAACb,EAAOU,MAAO,CAEjBI,QAAQC,KAAK,kFAAkF,EAC/F,MACF,CAEIF,IACFR,EAAiBK,MAAMC,UAAYE,EAEnCL,IAEJ,CAAC,EAQDI,EAAK,MAACZ,EAAQ,UAAM,CACdA,EAAOU,QAETL,EAAiBK,MAAQM,SAASC,cAAc,KAAK,EAErDZ,EAAiBK,MAAMQ,UAAUC,IAAI,MAAM,EAG3Cd,EAAiBK,MAAMU,aAAa,YAAa,WAAW,EAE5DpB,EAAOU,MAAMW,YAAYhB,EAAiBK,KAAK,EAEnD,CAAC,EAEM,CAELH,aAAAA,EAEJ"}