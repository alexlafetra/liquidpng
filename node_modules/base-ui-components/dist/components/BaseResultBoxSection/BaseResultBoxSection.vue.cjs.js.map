{"version":3,"file":"BaseResultBoxSection.vue.cjs.js","sources":["../../../src/components/BaseResultBoxSection/BaseResultBoxSection.vue"],"sourcesContent":["<template>\n  <div class=\"base-result-box-section\">\n    <!-- LOADER -->\n    <div\n      v-if=\"isLoading\"\n      class=\"base-result-box-section__loading\">\n      <BaseLoader\n        :text-on-loader-show=\"assistiveText.loaderActive\"\n        class=\"base-result-box-section__loader\" />\n    </div>\n\n    <!-- RESULT BOX SECTION AREA -->\n    <div\n      class=\"base-result-box-section__container\">\n      <!-- HEADER ROW -->\n      <div\n        v-if=\"showHeader\"\n        class=\"base-result-box-section__header-row\">\n        <!-- HEADER WITH OPTIONS -->\n        <BaseOptions\n          v-if=\"showOptions\"\n          :show-options=\"editModeActive\"\n          :options-button-icon=\"optionsButtonIcon\"\n          :options-button-text=\"optionsButtonText\"\n          use-options-button-on=\"always\"\n          @update:show-options=\"optionsToggle\">\n          <template #beforeOptions>\n            <!-- @slot add a custom header instead of headerText -->\n            <slot name=\"header\">\n              <h3\n                v-if=\"headerText\"\n                class=\"base-result-box-section__header\">\n                {{ headerText }}\n              </h3>\n            </slot>\n          </template>\n\n          <!-- ACTIONS FOR BOXES -->\n          <template\n            #options>\n            <!-- @slot add custom option/action elements in the header row\n              @binding {Function} submit-action - the method that should be called after the action button was clicked\n            -->\n            <slot\n              name=\"optionButtons\"\n              :submit-action=\"submitAction\">\n              <!-- default iterate through optionsConfig array -->\n              <template v-for=\"action of actionButtonsConfig\">\n                <BaseButton\n                  v-if=\"action.display === 'top' || action.display === 'all' || !action.display\"\n                  :key=\"action.text\"\n                  :text=\"getI18nString(action.text)\"\n                  :icon=\"action.icon\"\n                  :has-background-color=\"false\"\n                  :disabled=\"action.disabled\"\n                  icon-size=\"large\"\n                  button-style=\"single\"\n                  @clicked=\"submitAction(action.value)\" />\n              </template>\n            </slot>\n          </template>\n        </BaseOptions>\n\n        <!-- HEADER ONLY -->\n        <template v-else>\n          <slot name=\"header\">\n            <h3\n              v-if=\"headerText\"\n              class=\"base-result-box-section__header\">\n              {{ headerText }}\n            </h3>\n          </slot>\n        </template>\n      </div>\n\n      <div\n        :class=\"['base-result-box-section__background',\n                 {\n                   'base-result-box-section__background--white':\n                     editModeWhiteBackground && editModeActive,\n                 }]\">\n        <!-- MESSAGE AND FOLLOW UP ACTION AREA FOR EDIT MODE -->\n        <!-- MESSAGE AREA -->\n        <div\n          v-if=\"editModeActive\"\n          :key=\"headerText + '_messageArea'\"\n          class=\"base-result-box-section__message-area\">\n          <div class=\"base-result-box-section__message-area-text\">\n            {{ messageText }}\n          </div>\n          <span class=\"base-result-box-section__message-area-subtext\">{{ messageSubtext }}</span>\n          <!-- @slot add a custom element after the message area -->\n          <slot name=\"optionsMessageAreaAfter\" />\n        </div>\n\n        <!-- SELECT OPTIONS (NUMBER OF SELECTED AND SELECT ALL) -->\n\n        <!-- adding a indicator of how many items are selected and 'select all' button\n        only shown in select mode -->\n        <BaseSelectOptions\n          v-if=\"editModeActive\"\n          :key=\"headerText + '_selectOptions'\"\n          :selected-number-text=\"getI18nString(selectOptionsText.entriesSelected)\"\n          :select-text=\"getI18nString(selectOptionsText.selectAll)\"\n          :deselect-text=\"getI18nString(selectOptionsText.selectNone)\"\n          :list=\"visibleBoxes\"\n          :selected-list=\"selectedListInt\"\n          @selected=\"selectAllTriggered\" />\n        <span\n          aria-live=\"assertive\"\n          class=\"assistive-text\">\n          {{ currentAssistiveText }}\n        </span>\n        <!-- BOXES AREA -->\n        <template v-if=\"entryListInt.length\">\n          <component\n            :is=\"draggableComponent\"\n            ref=\"resultBoxesArea\"\n            v-model=\"visibleBoxes\"\n            :animation=\"draggable ? 150 : false\"\n            :tag=\"draggable ? 'ul' : false\"\n            :draggable=\"editModeActive ? '.base-result-box-section__result-box-item' : false\"\n            :aria-label=\"headerText\"\n            tabindex=\"0\"\n            handle=\".base-result-box-section__result-box-item__draggable .base-image-box\"\n            force-fallback=\"true\"\n            role=\"list\"\n            class=\"base-result-box-section__boxes-container\">\n            <li\n              v-for=\"(entry, index) of visibleBoxes\"\n              :id=\"`li-${entry.id}`\"\n              :key=\"getPropValue(identifierPropertyName, entry)\"\n              ref=\"resultBoxItem\"\n              :tabindex=\"editModeActive || !disableListElementFocus ? 0 : -1\"\n              :aria-label=\"getPropValue(titlePropertyName, entry)\"\n              :aria-grabbed=\"(movableElementId === entry.id).toString()\"\n              :aria-selected=\"editModeActive ? (isEntrySelected(entry)).toString() : false\"\n              :class=\"['base-result-box-section__box-item',\n                       'base-result-box-section__result-box-item',\n                       { 'base-result-box-section__box-item__hidden': !initialBoxCalcDone },\n                       `base-result-box-section__box-item-${elementId}`,\n                       {\n                         'base-result-box-section__result-box-item__draggable':\n                           draggable && editModeActive,\n                       },\n                       {\n                         'base-result-box-section__result-box-item__dragging':\n                           movableElementId === entry.id,\n                       }]\"\n              @keydown.enter=\"onEnterKey($event, entry, index)\"\n              @keydown.up.down.left.right.prevent=\"editModeActive && draggable && movableElementId\n                ? moveEntry($event, index) : false\"\n              @keydown.space.prevent=\"editModeActive ? entrySelected(\n                getPropValue(identifierPropertyName, entry), !isEntrySelected(entry)) : false\"\n              @keydown.tab=\"cancelDragMode\">\n              <!-- @slot result-box - for custom result boxes\n                @binding {Object} item - one list item of boxes to be displayed\n                @binding {number} index - the index of the item\n                @binding {boolean} select-active - are items in select mode\n                @binding {boolean} is-entry-selected - is the particular item currently selected\n                @binding {Function} entry-selected - method that should be called when an entry was selected\n              -->\n              <slot\n                :item=\"entry\"\n                :index=\"index\"\n                :select-active=\"editModeActive\"\n                :is-entry-selected=\"isEntrySelected\"\n                :entry-selected=\"entrySelected\"\n                name=\"resultBox\">\n                <BaseImageBox\n                  :key=\"getPropValue(identifierPropertyName, entry)\"\n                  :selectable=\"imageBoxesSelectable\"\n                  :draggable=\"editModeActive && draggable\"\n                  :selected=\"isEntrySelected(entry)\"\n                  :box-size=\"{ width: 'auto' }\"\n                  :box-ratio=\"100\"\n                  :title=\"getPropValue(titlePropertyName, entry)\"\n                  :subtext=\"entry.subtext\"\n                  :description=\"entry.description\"\n                  :image-url=\"entry.imageUrl\"\n                  :box-text=\"entry.text\"\n                  :lazyload=\"true\"\n                  @select-triggered=\"entrySelected(\n                    getPropValue(identifierPropertyName, entry), $event)\"\n                  @clicked=\"entryClicked(getPropValue(identifierPropertyName, entry))\" />\n              </slot>\n            </li>\n\n            <!-- ACTION BUTTONS -->\n            <!-- @slot add custom elements after result elements list use scoped slot prop `itemsPerRow` or dynamically adjusted css variable `--items-per-row` to adjust element width in accordance with other boxes\n              @binding {number} items-per-row - items per row calculated from container or page width\n              @binding {string} element-id - add a class `base-result-box-section__box-item-${elementId}` to action button element to include it in box size and styling calculations\n            -->\n            <slot\n              v-if=\"showActionButtonBoxes && editModeActive\"\n              :items-per-row=\"itemsPerRow\"\n              :element-id=\"elementId\"\n              name=\"actionButtons\">\n              <!-- default button -->\n              <template\n                v-for=\"action of actionButtonsConfig\">\n                <BaseBoxButton\n                  v-if=\"action.display === 'bottom' || action.display === 'all' || !action.display\"\n                  :key=\"action.value\"\n                  :text=\"getI18nString(action.text)\"\n                  :box-size=\"{ width: 'calc(25% - 8rem/19 - (8rem/19/2))', height: '100%' }\"\n                  :icon=\"action.icon\"\n                  box-style=\"small\"\n                  box-type=\"button\"\n                  :class=\"['base-result-box-section__box-item',\n                           `base-result-box-section__box-item-${elementId}`]\"\n                  @clicked=\"submitAction(action.value)\" />\n              </template>\n            </slot>\n            <!-- EXPAND BUTTON -->\n            <BaseBoxButton\n              v-else-if=\"useExpandMode && !editModeActive && expandNeeded && initialBoxCalcDone\"\n              :box-size=\"{ width: 'calc(25% - 8rem/19 - (8rem/19/2))', height: '100%' }\"\n              icon=\"\"\n              text=\"\"\n              box-type=\"button\"\n              :class=\"['base-result-box-section__box-item',\n                       `base-result-box-section__box-item-${elementId}`]\"\n              @clicked=\"expandedInt = !expandedInt\">\n              <template #default>\n                <!-- needed to add v-if here again - otherwise strange side effects -->\n                <div\n                  v-if=\"!editModeActive\"\n                  class=\"base-result-box-section__expand-button__content\">\n                  <span\n                    v-if=\"!expandedInt\"\n                    class=\"base-result-box-section__expand-button__content-number\">\n                    {{ `+${(total || entryList.length) - visibleBoxes.length}` }}\n                  </span>\n                  <span\n                    :class=\"[expandedInt\n                      ? 'base-result-box-section__expand-button__content-text-expanded'\n                      : 'base-result-box-section__expand-button__content-text-collapsed']\">\n                    {{ expandedInt ? expandText.collapse : expandText.expand }}\n                  </span>\n                </div>\n              </template>\n            </BaseBoxButton>\n          </component>\n          <!-- PAGINATION -->\n          <!-- only shown if\n          * usePagination is true\n          * it is actually needed because there is more than one page\n          * edit mode is active and draggable functionality is not used\n          * edit mode is not active and rows are expanded (always true if\n            useExpandMode is set false) -->\n          <BasePagination\n            v-if=\"usePagination && showPagination && pages > 1\n              && ((editModeActive && !draggable)\n                || (!editModeActive && expandedInt))\"\n            :key=\"'pagination-' + elementId\"\n            :total=\"pages\"\n            :current=\"currentPageNumberInt\"\n            :use-link-element=\"usePaginationLinkElement\"\n            @set-page=\"setPage\" />\n        </template>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { extractNestedPropertyValue } from '@/utils/utils';\nimport navigateList from '../../mixins/navigateList';\nimport BaseImageBox from '../BaseImageBox/BaseImageBox';\nimport i18n from '../../mixins/i18n';\n\n/**\n * A component to display rows of boxes with or without pagination\n */\nexport default {\n  name: 'BaseResultBoxSection',\n  components: {\n    BaseImageBox,\n    BaseLoader: () => import('../BaseLoader/BaseLoader').then(m => m.default || m),\n    BaseOptions: () => import('../BaseOptions/BaseOptions').then(m => m.default || m),\n    BaseButton: () => import('../BaseButton/BaseButton').then(m => m.default || m),\n    BasePagination: () => import('../BasePagination/BasePagination').then(m => m.default || m),\n    BaseBoxButton: () => import('../BaseBoxButton/BaseBoxButton').then(m => m.default || m),\n    BaseSelectOptions: () => import('../BaseSelectOptions/BaseSelectOptions').then(m => m.default || m),\n  },\n  mixins: [i18n, navigateList],\n  model: {\n    prop: 'entryList',\n    event: 'entries-changed',\n  },\n  props: {\n    /**\n     * actual entries list - if slot `result-box` is not used to use custom elements this\n     * object array should have the following properties to be displayed\n     * in a [BaseImageBox](BaseImageBox):\n     *\n     *    **id** `string` - a unique identifier\n     *    **title** `?string` - the title of the box\n     *    **subtext** `?string` - a subtitle\n     *    **description** `?string` - text displayed at the bottom of the box\n     *    **imageUrl** `?string` - url to display an image\n     *    **text** `?string[]` - an array with strings that will be\n     *    displayed if no image is provided\n     *\n     *    if a different schema is used please use the slot 'result-box' to create your own\n     *    elements - only id and title should still be provided but can also\n     *    be customized via `identifierPropertyName` and `titlePropertyName`\n     */\n    entryList: {\n      type: Array,\n      default: () => [],\n    },\n    /**\n     * if `false` the header row (title and options) will not be available\n     *   **Caveat**: for draggable functionality this needs to be true\n     */\n    showHeader: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * title of section\n     * it is recommended to also set the `headerText` even if slot `header` is used for header\n     * for accessibility reasons\n     */\n    headerText: {\n      type: String,\n      default: '',\n    },\n    /**\n     * define if options should be shown\n     */\n    showOptions: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * set text for the options button if `showOptions` is `true`\n     *   this needs to be an object with `show` (displayed when options are hidden)\n     *   and `hide` (displayed when options are visible) attributes\n     */\n    optionsButtonText: {\n      type: Object,\n      default: () => ({\n        show: 'edit',\n        hide: 'editReturn',\n      }),\n      validator: val => ['show', 'hide'].every(requiredProp => Object.keys(val).includes(requiredProp)),\n    },\n    /**\n     * set the icon for the options button.\n     * if `showOptions` is `true` this needs to be an object with `show`\n     *  (displayed when options are hidden) and `hide` (displayed when\n     *  options are visible) attributes\n     */\n    optionsButtonIcon: {\n      type: Object,\n      default: () => ({\n        show: 'edit',\n        hide: 'remove',\n      }),\n      validator: val => ['show', 'hide'].every(requiredProp => Object.keys(val).includes(requiredProp)),\n    },\n    /**\n     * specify how many boxes should be displayed in a row in an array\n     * with \"tupples\" (array with min-size and number of boxes).\n     * depending on the size of the container (not screen width - unless\n     * `calcBoxNumberRelativeToWindow` is set to `true`)\n     * like the following:\n     *   `[[0, [number of boxes]], [[min px size for this number of boxes], [number of boxes]], ...]`\n     */\n    boxBreakpoints: {\n      type: Array,\n      default: () => ([\n        [0, 2],\n        [640, 4],\n        [1024, 6],\n      ]),\n      validator: val => val\n        .every(point => typeof point === 'object' && point.length === 2\n          && point.every(pointValue => typeof pointValue === 'number')),\n    },\n    /**\n     * set component loader active\n     */\n    isLoading: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * flag if component should be in edit mode (dragging, deleting,\n     * other custom options visible)\n     *   the [`.sync` modifier](https://vuejs.org/v2/guide/components-custom-events.html#sync-Modifier) may be used on this prop\n     */\n    editMode: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * set this variable `true` if `background-color` should be white in edit mode\n     */\n    editModeWhiteBackground: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * provide a list of selected entries for select options (can\n     * be entry objects or entry ids).\n     *  the [`.sync` modifier](https://vuejs.org/v2/guide/components-custom-events.html#sync-Modifier) may be used on this prop\n\n     */\n    selectedList: {\n      type: Array,\n      default: () => [],\n    },\n    /**\n     * set a text for '[x] entries selected' and 'select all / none'\n     */\n    selectOptionsText: {\n      type: Object,\n      default: () => ({\n        selectAll: 'select all',\n        selectNone: 'select none',\n        entriesSelected: 'entries selected',\n      }),\n    },\n    /**\n     * if slot `options-message-area` is not used this variable\n     * can be used to customize message text.\n     *   this should be a string or an object with the actions needed (default: `delete`,\n     *   if `draggable` is `true` than also a `drag` property with suiting text is needed).\n     *     in case of a string the same text is used for all actions\n     */\n    messageText: {\n      type: String,\n      default: 'Drag or Select',\n    },\n    /**\n     * if slot `options-message-area` is not used this variable\n     * can be used to customize message subtext.\n     *   this should be a string or an object with the actions needed (default: `delete`,\n     *   if `draggable` is `true` than also a `drag` property with suiting text is needed).\n     *     in case of a string the same text is used for all actions\n     */\n    messageSubtext: {\n      type: String,\n      default: 'Drag\\'n Drop to reorder or select the relevant items and choose an action',\n    },\n    /**\n     * determine if boxes can be dragged\n     *   (only applicable if `showHeader` and `showOptions` is set to `true`)\n     */\n    draggable: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * set `true` if pagination should be used\n     */\n    usePagination: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * if `usePagination` is set `true` this will determine the number of\n     * rows shown on one page\n     *   (only applicable if `usePagination` is set `true`)\n     */\n    maxRows: {\n      type: Number,\n      default: 5,\n    },\n    /**\n     * set this `true` if only a limited number of boxes should be shown\n     * and rest can be displayed by clicking a \"show more\" button\n     */\n    useExpandMode: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * if `useExpandMode` is `true` set the state of 'show more' from outside\n     *   the [`.sync` modifier](https://vuejs.org/v2/guide/components-custom-events.html#sync-Modifier) may be used on this prop\n     */\n    expanded: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * Provide text that should be shown within the button with the\n     * expand / collapse functionality.\n     *   should be an object with props `expand` for text to expand\n     *   and `collapse` for text to collapse\n     */\n    expandText: {\n      type: Object,\n      default: () => ({\n        expand: 'more objects',\n        collapse: 'collapse',\n      }),\n    },\n    /**\n     * add a number of total elements (needed for `useExpandMode` and\n     * `usePagination`)\n     */\n    total: {\n      type: Number,\n      default: null,\n    },\n    /**\n     * set the current page number from outside if `usePagination` is `true`.\n     *   the [`.sync` modifier](https://vuejs.org/v2/guide/components-custom-events.html#sync-Modifier) may be used on this prop\n     */\n    currentPageNumber: {\n      type: Number,\n      default: null,\n    },\n    /**\n     * how many rows should be shown with show more button (expandMode)\n     *   (only applicable with `useExpandMode true`)\n     */\n    maxShowMoreRows: {\n      type: Number,\n      default: 1,\n    },\n    /**\n     * define if the section should scroll to top on page change\n     *   (only applicable with `usePagination true`)\n     */\n    jumpToTop: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * define if the big button box at the end of all attached items should be shown\n     */\n    showActionButtonBoxes: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * set some config for each action used - needs to be an array of objects with the\n     *  following properties:\n     *\n     *   **text** `string` - the text displayed in the button\n     *   **icon** `string` - the icon name to display\n     *    (for available icons see [BaseIcon](BaseIcon) )\n     *   **value** `string` - the value emitted on button click\n     *   **[display='all']** `?string` - define where the action should be displayed:\n     *     *top*: only in top row\n     *     *bottom*: only in action button box at bottom of list\n     *     *all*: on top as well as bottom\n     *   **disabled** `?boolean` - disable button\n     */\n    actionButtonsConfig: {\n      type: Array,\n      default: () => [{\n        text: 'delete',\n        icon: 'waste-bin',\n        value: 'delete',\n        display: 'all',\n        disabled: false,\n      }],\n      validator: val => val.every((action) => {\n        const requiredProps = ['text', 'icon', 'value'];\n        const actionProps = Object.keys(action);\n        return requiredProps.every(prop => actionProps.includes(prop))\n          && (['all', 'top', 'bottom'].includes(action.display) || !action.display);\n      }),\n    },\n    /**\n     * define a custom identifier property name for objects in your\n     * `entryList` array.\n     *   if relevant property is contained in a nested object the string can\n     *   be in dot notation. e.g. `nestedObject.id`\n     */\n    identifierPropertyName: {\n      type: String,\n      default: 'id',\n    },\n    /**\n     * define a custom title property name for objects in your\n     * `entryList` array.\n     *   if relevant property is contained in a nested object the string can\n     *   be in dot notation. e.g. `nestedObject.title`\n     */\n    titlePropertyName: {\n      type: String,\n      default: 'title',\n    },\n    /**\n     * specify if pagination elements should be a link element - if pagination element should\n     * be a link element - please specify the kind of element (currently only Vue components (e.g.\n     * [`RouterLink`](https://router.vuejs.org/guide/#router-link),\n     * [`NuxtLink`](https://nuxtjs.org/docs/features/nuxt-components/#the-nuxtlink-component)) are supported)\n     */\n    usePaginationLinkElement: {\n      type: [String, Boolean],\n      default: false,\n      validator: val => (typeof val === 'boolean' && !val) || (typeof val === 'string' && val),\n    },\n    /**\n     * set this variable `true` if pagination is used and data fetching is done per page\n     */\n    fetchDataExternally: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * specify an additional number of px for the position the page\n     * should jump to on page change\n     */\n    scrollToOffset: {\n      type: Number,\n      default: 0,\n    },\n    /**\n     * specify an initial number of items per row that should be assumed before\n     * rendering the page\n     */\n    // this is necessary because otherwise in SSR serverside and client side DOM tree\n    // might not match\n    initialItemsPerRow: {\n      type: Number,\n      default: 6,\n    },\n    /**\n     * add text for screen reader users that helps them navigate list and use edit mode\n     * functionalities.\n     * object should have the following properties:\n     *\n     *   **description**: Text read on edit mode activation\n     *   **activated**: Text read after item was activated for reordering\n     *    (selected by enter key)\n     *    property moved can contain variable `{pos}` which will be filled with current\n     *    position\n     *   **moved**: Text read after item was moved\n     *    property moved can contain variables `{pos}` (new position) and `{total}` (total number\n     *    of list items)\n     */\n    assistiveText: {\n      type: Object,\n      default: () => ({\n        description: 'Select items via space bar to carry out actions or use enter '\n          + 'key to select an item for reordering. Use Tab key to navigate between items.',\n        activated: 'Item at position {pos} selected for reordering. Use arrow keys to order item.',\n        moved: 'Item moved to position {pos} of {total}',\n        loaderActive: 'loading.',\n      }),\n    },\n    /**\n     * `BaseResultBoxSection` is for example used to display search results - which contain a link\n     * to the entry - in this case the focus should be on the link element so that navigation to\n     * route link triggers on enter and focus on the list element itself is disabled (if not edit\n     * mode!)\n     */\n    disableListElementFocus: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      // internal representation of entry list to be able to\n      // modify list via draggable\n      entryListInt: [],\n      // flag for edit mode activated\n      editModeActive: false,\n      // current page number\n      currentPageNumberInt: 1,\n      // store the expand state internally\n      expandedInt: false,\n      // store collapsed state on action start\n      wasExpanded: false,\n      // how many items do fit in one row\n      itemsPerRow: null,\n      // try to only do initial box size calculation once\n      initialBoxCalcDone: false,\n      // to manipulate selectedList internally\n      selectedListInt: [],\n      imageBoxesSelectable: false,\n      // unique id to assign javascript calculated styles to\n      elementId: null,\n      // store state if component is mounted and window is present\n      initialized: false,\n      /**\n       * variable for keyboard sorting - is element currently selected for moving\n       * @type {?string}\n       */\n      movableElementId: null,\n      /**\n       * add assistive text especially to ease use of drag mode accessibly\n       * @type {string}\n       */\n      currentAssistiveText: '',\n      /**\n       * control pagination display with this variable and only render after\n       *  entryListInt was initialized from outside\n       *  @type {boolean}\n       */\n      showPagination: false,\n    };\n  },\n  computed: {\n    /**\n     * to lazy load vuedraggable only if draggable mode is set true\n     *\n     * @returns {string|(function(): Promise<U>)}\n     */\n    draggableComponent() {\n      if (this.draggable) {\n        return () => import('vuedraggable').then(m => (m.default || m));\n      }\n      return 'ul';\n    },\n    /**\n     * get the entries that should be displayed in the section -\n     * taking into consideration pagination and 'show more' functionality\n     * @returns {Object[]}\n     */\n    visibleBoxes: {\n      get() {\n        if (this.editModeActive && (this.draggable || !this.usePagination)) {\n          return [...this.entryListInt];\n        }\n        // if expand mode is used and status is collapsed and there\n        // are more items than can be displayed in the rows specified by 'show more'\n        // slice first few\n        if (!this.editModeActive && this.useExpandMode && !this.expandedInt && this.expandNeeded) {\n          // slice from 0 to number of rows * items per row - 1 so that the button\n          // take the last box\n          return this.entryListInt.slice(0, (this.itemsPerRow * this.maxShowMoreRows) - 1);\n        }\n        // else if pagination is active and items are not fetched from outside\n        // slice items fitting one page\n        if (this.usePagination && !this.fetchDataExternally) {\n          // slice taking into account current pagination and the total number of\n          // visible items\n          return this.entryListInt\n            .slice(\n              (this.currentPageNumberInt - 1) * this.visibleNumberOfItems,\n              this.currentPageNumberInt * this.visibleNumberOfItems,\n            );\n        }\n        if (this.fetchDataExternally) {\n          return this.entryList.slice(0, this.visibleNumberOfItems);\n        }\n        // else return complete list\n        return this.entryListInt;\n      },\n      set(val) {\n        this.entryListInt = [...val];\n      },\n    },\n    /** PAGINATION AND EXPAND MODE */\n    /**\n     * the number of items that should be visible on one page\n     * (if pagination is active)\n     * @returns {number}\n     */\n    visibleNumberOfItems() {\n      const availableSpaces = this.itemsPerRow * this.maxRows;\n      if (this.editModeActive && this.showActionButtonBoxes) {\n        return availableSpaces - this.actionButtonsConfig.length;\n      }\n      if (!this.editModeActive && this.useExpandMode) {\n        // subtract 1 for the Expand Box Button or Action Button\n        return availableSpaces - 1;\n      }\n      return availableSpaces;\n    },\n    /**\n     * number of pages (if pagination is active)\n     * @returns {number}\n     */\n    pages() {\n      return (this.total || this.entryListInt.length) && this.visibleNumberOfItems >= 0\n        ? Math.ceil((this.total || this.entryListInt.length) / this.visibleNumberOfItems) : 1;\n    },\n    /**\n     * determines if the total number of entries exceeds the number of entries that\n     * can be displayed and thus if an expand button is needed\n     */\n    expandNeeded() {\n      return (this.itemsPerRow * this.maxShowMoreRows) < this.entryList.length;\n    },\n  },\n  watch: {\n    entryList: {\n      handler(val) {\n        if (JSON.stringify(val) !== JSON.stringify(this.entryListInt)) {\n          this.entryListInt = [...val];\n          // check if showPagination was already set true otherwise do it after\n          // entryListInt was set for the first time\n          if (!this.showPagination) {\n            // make sure this is one last (and boxes are already rendered)\n            setTimeout(() => {\n              this.showPagination = true;\n            }, 0);\n          }\n        }\n      },\n      immediate: true,\n      deep: true,\n    },\n    entryListInt: {\n      handler(val) {\n        if (JSON.stringify(val) !== JSON.stringify(this.entryList)) {\n          /**\n           * event emitted when the list of entries changed internally\n           * (relevant if `draggable` is set `true`)\n           *\n           * @event entries-changed\n           * @param {Object[]} - the updated list of entries\n           */\n          this.$emit('entries-changed', val);\n        }\n      },\n      deep: true,\n    },\n    // watch selectedList prop and assign to internal value if changes occur\n    selectedList: {\n      handler(val) {\n        if (JSON.stringify(val) !== JSON.stringify(this.selectedListInt)) {\n          this.selectedListInt = JSON.parse(JSON.stringify(val));\n        }\n      },\n      immediate: true,\n    },\n    // watch selectedList prop and assign to internal value if changes occur\n    selectedListInt(val) {\n      if (JSON.stringify(val) !== JSON.stringify(this.selectedList)) {\n        /**\n         * inform the parent of the changes in `selectedList` and provide\n         * the ids of all selected.\n         *   the [`.sync` modifier](https://vuejs.org/v2/guide/components-custom-events.html#sync-Modifier) may be used on the corresponding prop\n         *\n         * @event update:selected-list\n         * @param {Array} - the list of selected entry ids\n         */\n        this.$emit('update:selected-list', val);\n      }\n    },\n    // watch pages in case of deletion of items and take care\n    // current page is not higher than total page number\n    pages: {\n      handler(val) {\n        if (this.currentPageNumberInt > val) {\n          // if the current page number exceeds the total number of pages\n          // set the value to the last existing page\n          this.currentPageNumberInt = val;\n        }\n      },\n      immediate: true,\n    },\n    // update internal page number if changed from outside\n    currentPageNumber: {\n      handler(val) {\n        if (val !== this.currentPageNumberInt) {\n          // check if number is larger than max number of pages currently available and\n          // set to max possible value if yes instead\n          // TODO: changed this to internal handling for now because it makes problems with\n          // externally provided data but maybe it would make sense to get rid of it all together\n          this.currentPageNumberInt = val > this.pages && !this.fetchDataExternally\n            ? this.pages : val;\n        }\n      },\n      immediate: true,\n    },\n    /**\n     * watch internal page number to inform parent about changes\n     * @param {number} val\n     */\n    currentPageNumberInt: {\n      handler(val) {\n        if (val !== this.currentPageNumber) {\n          /** emitted when pagination is used and page number was changed\n           *\n           * @event update:current-page-number\n           * @param {number} - the new page number\n          */\n          this.$emit('update:current-page-number', this.currentPageNumberInt);\n        }\n      },\n      immediate: true,\n    },\n    // if expanded variable is set from outside change\n    // internal variable accordingly\n    expanded: {\n      handler(val) {\n        if (val !== this.expandedInt) {\n          this.expandedInt = val;\n        }\n      },\n      immediate: true,\n    },\n    // if internal value changes, reset page number and inform parent\n    expandedInt(val) {\n      // reset current page number on collapse\n      if (!val) {\n        this.currentPageNumberInt = 1;\n      }\n      // inform parent of internal change\n      if (val !== this.expanded) {\n        /**\n         * event emitted on expand toggle.\n         *   the [`.sync` modifier](https://vuejs.org/v2/guide/components-custom-events.html#sync-Modifier) may be used on the corresponding prop\n         * @event update:expanded\n         * @param { Boolean } - true if list is expanded\n         */\n        this.$emit('update:expanded', val);\n      }\n    },\n    editModeActive(val) {\n      // have setting true of selectable delayed for animation\n      setTimeout(() => {\n        this.imageBoxesSelectable = val;\n      }, 50);\n      setTimeout(() => {\n        if (val) {\n          this.$nextTick(() => {\n            if (this.$refs.resultBoxItem && this.$refs.resultBoxItem.length) {\n              this.$refs.resultBoxItem.forEach((element) => {\n                const inputElement = element.getElementsByTagName('input');\n                inputElement[0].setAttribute('tabindex', '-1');\n              });\n              // it appears refs are not reactive and do not reflect reordering so we need\n              // to look for the actual current first element in the visibleBoxes array\n              const firstElement = this.$refs.resultBoxItem\n                .find(element => element.id.includes(this.visibleBoxes[0].id));\n              firstElement.focus({ preventScroll: true });\n            }\n          });\n        }\n      }, 500);\n      if (val) {\n        this.currentAssistiveText = this.assistiveText.description;\n      } else {\n        this.movableElementId = null;\n        this.currentAssistiveText = '';\n      }\n      if (val !== this.editMode) {\n        /**\n         * emitted on edit mode toggle (options toggle).\n         *   the [`.sync` modifier](https://vuejs.org/v2/guide/components-custom-events.html#sync-Modifier) may be used on the corresponding prop\n         *\n         * @event update:edit-mode\n         * @param {Boolean} - flag for edit mode active\n         */\n        this.$emit('update:edit-mode', val);\n      }\n\n      // add listener to esc key event (toggle edit mode)\n      if (!this.initialized) return;\n      if (val) {\n        window.addEventListener('keyup', this.escEventHandler);\n      } else {\n        window.removeEventListener('keyup', this.escEventHandler);\n      }\n    },\n    editMode: {\n      handler(val) {\n        if (val !== this.editModeActive) {\n          this.editModeActive = val && this.showOptions && this.showHeader;\n        }\n      },\n      immediate: true,\n    },\n    showOptions(val) {\n      if (!val) {\n        this.editModeActive = false;\n      }\n    },\n    showHeader(val) {\n      if (!val) {\n        this.editModeActive = false;\n      }\n    },\n  },\n  created() {\n    if (!this.useExpandMode) {\n      this.expandedInt = true;\n    }\n    this.itemsPerRow = this.initialItemsPerRow;\n  },\n  mounted() {\n    // create an element id to have an unique id to assign javascript calculated styles to\n    // note: done here, cause of mismatching ids (entries, class definition) in ssr-mode\n    // eslint-disable-next-line no-underscore-dangle\n    this.elementId = this._uid;\n\n    if (!this.initialBoxCalcDone && this.$refs.resultBoxesArea) {\n      this.calcBoxNumber();\n    }\n    // need to get the correct number of boxes per row to calculate the visible\n    // number of items correctly\n    window.addEventListener('resize', this.resizeBoxes);\n    this.initialized = true;\n  },\n  updated() {\n    if (!this.initialBoxCalcDone && this.$refs.resultBoxesArea) {\n      this.calcBoxNumber();\n    }\n  },\n  methods: {\n    /** EDIT MODE FUNCTIONALITIES */\n    /**\n     * toggling of options when options are behind a 'options' button\n     *\n     * @param {Boolean} actionsVisible true for open, false for close\n     */\n    optionsToggle(actionsVisible) {\n      this.editModeActive = actionsVisible;\n      if (!actionsVisible) {\n        // on close return to original collapsed state\n        this.expandedInt = this.wasExpanded;\n        // clear selected boxes\n        this.selectedListInt = [];\n        // on open - store the original collapsed state\n      } else {\n        this.wasExpanded = this.expandedInt;\n      }\n    },\n    /**\n     * function triggered when selecteAll was clicked in select mode\n     *\n     * @param {boolean} selectAll - true if everything was selected,\n     * false if everything was deselected\n     */\n    selectAllTriggered(selectAll) {\n      if (selectAll) {\n        // select all entries that are currently visible\n        // deduplicate by creating Set and converting back to array\n        this.selectedListInt = [...new Set([...this.selectedListInt,\n          ...this.visibleBoxes.map(entry => this\n            .getPropValue(this.identifierPropertyName, entry))])];\n      } else {\n        const visibleEntryIds = this.visibleBoxes\n          .map(visibleEntry => this.getPropValue(this.identifierPropertyName, visibleEntry));\n        this.selectedListInt = this.selectedListInt\n          .filter(entry => !visibleEntryIds\n            .includes(this.getPropValue(this.identifierPropertyName, entry) || entry));\n      }\n    },\n    /**\n     * triggered when an entry is selected or is clicked upon\n     *\n     * @param {string} entryId - the entry id of the selected entry\n     * @param {boolean} [selected=undefined] - not provided and thus undefined\n     * if entry was clicked\n     */\n    entrySelected(entryId, selected) {\n      // if entry was selected in edit mode and list does not contain entry\n      // already - add it to the list\n      if (selected && !this.selectedListInt.includes(entryId)) {\n        this.selectedListInt.push(entryId);\n      } else if (!selected) {\n        this.selectedListInt = this.selectedListInt.filter(boxId => boxId !== entryId);\n      }\n    },\n    /**\n     * function to calc if image box is currently selected\n     *\n     * @param {Object} entry - the entry in question\n     * @returns {Boolean}\n     */\n    isEntrySelected(entry) {\n      return this.selectedListInt\n        .map(selectedEntry => this.getPropValue(this.identifierPropertyName, selectedEntry)\n        || selectedEntry).includes(this.getPropValue(this.identifierPropertyName, entry));\n    },\n    /**\n     * function triggered when user has\n     * clicked action button to go through with the action\n     */\n    submitAction(action) {\n      /**\n       * event triggered when an action is triggered (after selecting boxes)\n       *\n       * @event submit-action\n       * @param {string} - the action type\n       */\n      this.$emit('submit-action', action);\n    },\n    /**\n     * intercept escape key event and reset edit mode\n     */\n    escEventHandler(e) {\n      if (e.key === 'Escape') {\n        // first use escape key to leave drag mode\n        if (this.movableElementId) {\n          this.cancelDragMode();\n          // else use it to leave edit mode\n        } else {\n          this.editModeActive = false;\n          this.currentAssistiveText = '';\n        }\n      }\n    },\n    /**\n     * event handler on keydown 'Enter'\n     * @param {KeyboardEvent} event - the keydown event\n     * @param {Object} entry - the entry the event was triggered on\n     * @param {number} index - the index of the entry in the visibleBoxes array\n     */\n    onEnterKey(event, entry, index) {\n      if (this.editModeActive && this.draggable) {\n        event.preventDefault();\n        // check if movableElementId is null\n        if (!this.movableElementId) {\n          // if yes activate drag mode by assigning the entry id as movableElementId\n          this.movableElementId = entry.id;\n          // add assistive text for the screen reader\n          this.currentAssistiveText = this.assistiveText.activated\n            .replace('{pos}', (index + 1).toString());\n        } else {\n          // if drag mode was active before - cancel it\n          this.cancelDragMode();\n        }\n      } else {\n        this.entryClicked(this.getPropValue(this.identifierPropertyName, entry));\n      }\n    },\n    /**\n     * event handler on keydown with arrow keys\n     * @param {KeyboardEvent} event - the keydown event\n     * @param {number} index - the index of the entry on which the event was triggered\n     *  in the visibleBoxes array\n     */\n    moveEntry(event, index) {\n      // reset assistive text\n      this.currentAssistiveText = '';\n      // get key that was pressed\n      const { key } = event;\n      // determine if element should be moved up or down in the list\n      const shiftDown = ['ArrowRight', 'ArrowDown'].includes(key);\n      // get the corresponding number to add to the array index\n      const shiftIndex = shiftDown ? 1 : -1;\n      // get new Index\n      const newIndex = index + shiftIndex;\n      // check if move is possible or if item is first or last respectively already\n      if (this.isWithinArrayLimit(this.visibleBoxes, shiftDown, newIndex)) {\n        // assign box list to variable so the set() of visibleBoxes is actually triggered\n        // when it is assigned again later on (doing it directly on visibleBoxes or entryListInt\n        // has no effect)\n        const newArray = this.visibleBoxes;\n        // do swapping with array destructuring\n        [newArray[index], newArray[newIndex]] = [newArray[newIndex], newArray[index]];\n        // assign it again to visibleBoxes variable\n        this.visibleBoxes = newArray;\n        // next tick so there is time to repaint and get new order\n        this.$nextTick(() => {\n          // get all box elements\n          const movedElement = document.getElementById(`li-${this.movableElementId}`);\n          // element is loosing focus in the process of swapping so refocus here\n          movedElement.focus();\n        });\n        // add matching assistive text informing the user of the move and the new position\n        this.currentAssistiveText = this.assistiveText.moved\n          .replace('{pos}', newIndex + 1)\n          .replace('{total}', this.visibleBoxes.length);\n      }\n    },\n    /**\n     * reset drag related variable and assistive text\n     */\n    cancelDragMode() {\n      this.movableElementId = null;\n      this.currentAssistiveText = '';\n    },\n\n    /** BOX DISPLAY FUNCTIONALITIES */\n    /**\n     * timeout function for resize event to limit the number of times\n     * box number is recalculated\n     */\n    resizeBoxes() {\n      // check if there is a timeout already set and clear it if yes\n      if (this.resizeTimeout) {\n        clearTimeout(this.resizeTimeout);\n        this.resizeTimeout = null;\n      }\n      // if yes set timeout to recalculate box number after\n      this.resizeTimeout = setTimeout(() => {\n        this.calcBoxNumber();\n      }, 300);\n    },\n    /**\n     * calculate the box number according to available space and breaking points set\n     */\n    calcBoxNumber() {\n      // get the result boxes parent - in case of draggable active this is a vue component\n      // and $el needs to be addressed - otherwise native HTML element can be used directly\n      const resultBoxesElement = this.$refs.resultBoxesArea && this.$refs.resultBoxesArea.$el\n        ? this.$refs.resultBoxesArea.$el : this.$refs.resultBoxesArea;\n      // if such an element was found and element has children (= boxes are rendered)\n      if (resultBoxesElement) {\n        // get the element width\n        const totalWidth = resultBoxesElement.clientWidth;\n        // create a copy of the prop to avoid direct prop mutation\n        const boxBreakpointsCopy = [...this.boxBreakpoints];\n        // calculate how many items should be displayed according to\n        // breakpoints set\n        this.itemsPerRow = boxBreakpointsCopy\n          // then also sorting should not be necessary anymore (maybe keep to\n          // be on the save side?\n          .sort((a, b) => a[0] > b[0])\n          // get the correct box number\n          .reduce((prev, [size, number]) => {\n            if (totalWidth > size) {\n              return number;\n            }\n            return prev;\n          }, 0);\n        // set the styles\n        // set a css variable that is responsible for the number of items\n        this.$el.style.setProperty('--items-per-row', this.itemsPerRow);\n        // set the correct margins for the boxes\n        const nodeId = `base-result-box-section__box-style-${this.elementId}`;\n        let style = document.getElementById(nodeId);\n        // check if element already exists to only create it once\n        if (!style) {\n          // if not - create the style element\n          style = document.createElement('style');\n          // set an id\n          style.id = nodeId;\n          // append the style element\n          this.$el.appendChild(style);\n        }\n        // set the actually css in the style element\n        style.innerHTML = `\n          .base-result-box-section__box-item-${this.elementId}:nth-child(n + ${this.itemsPerRow + 1}) {\n            margin-top: var(--spacing-regular);\n          }\n          .base-result-box-section__box-item-${this.elementId}:not(:nth-child(${this.itemsPerRow}n)) {\n            margin-right: var(--spacing-regular);\n          }`;\n        this.initialBoxCalcDone = true;\n        /**\n         * communicate to parent when items per row changed, either after initial\n         * render space calculations or when window was resized\n         * @event items-per-row-changed\n         * @param {number} - the new number of items that fit in a row\n         */\n        this.$emit('items-per-row-changed', this.itemsPerRow);\n      }\n    },\n    /** PAGINATION */\n    /**\n     * function triggered when page in pagination component is selected\n     *\n     * @param {number} number - the selected page number\n     */\n    setPage(number) {\n      // set internal page number - this will also trigger an event to parent\n      this.currentPageNumberInt = number;\n      // if variable is set true jump to top of element\n      if (this.jumpToTop) {\n        window.scrollTo(0, this.$el.offsetTop - this.scrollToOffset);\n      }\n    },\n\n    /** GENERAL FUNCTIONALITIES */\n    /**\n     * triggered when an entry is clicked upon (edit mode not acive)\n     *\n     * @param {string} entryId - the entry id of the selected entry\n     */\n    entryClicked(entryId) {\n      /**\n       * event emitted from default image box when clicked\n       * @event entry-clicked\n       * @property {string} entryId - the id of the clicked entry\n       * the select mode was not active but the box was clicked\n       */\n      this.$emit('entry-clicked', { entryId });\n    },\n    /**\n     * get an internationalized string\n     *\n     * @param {string|Object} localizationArguments - string or object to look\n     * up in localization files\n     *   if it is an object it should have the following properties:\n     * @property {string} string - string to look up in a Locale messages file\n     * @property {number} count - for pluralization\n     * @property {Object} variables - locale string variables object\n     * @returns {string}\n     */\n    getI18nString(localizationArguments) {\n      // check if a string was provided\n      if (typeof localizationArguments === 'string') {\n        return this.getI18nTerm(localizationArguments);\n      }\n      // if not - assume an object with the relevant properties\n      const { string, count, variables } = { ...localizationArguments };\n      return this.getI18nTerm(string, count, variables);\n    },\n    /**\n     * to get a nested object property value from a string in dot notation\n     *\n     * @param {string} string - the nested object property path in dot notation\n     * @param {Object} object - the object from which the property value should be extracted\n     * @returns {*}\n     */\n    getPropValue(string, object) {\n      return extractNestedPropertyValue(string, object);\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../../styles/variables\";\n\n.base-result-box-section {\n  position: relative;\n  --items-per-row: 0;\n  --spacing-regular: #{$spacing};\n\n  .base-result-box-section__loading {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    z-index: map-get($zindex, loader);\n    background-color: $loading-background;\n\n    .base-result-box-section__loader {\n      top: 50%;\n    }\n  }\n\n  .base-result-box-section__container {\n    .base-result-box-section__header-row {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-between;\n      align-items: center;\n      margin: $spacing-small 0;\n\n      .base-result-box-section__header {\n        font-size: $font-size-regular;\n        color: $font-color-second;\n        font-weight: normal;\n        margin: 0 0 0 $spacing;\n      }\n    }\n\n    .base-result-box-section__boxes-container {\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n\n      .base-result-box-section__box-item {\n        position: relative;\n        // subtracted 0.01rem for edge\n        flex: 0 0 calc(((100% - ((var(--items-per-row) - 1) * #{$spacing}))\n        / var(--items-per-row)) - 0.01rem);\n        height: 100%;\n\n        &__hidden {\n          visibility: hidden;\n        }\n\n        &:focus-within:after {\n          content: '';\n          width: 100%;\n          height: 100%;\n          position: absolute;\n          top: 0;\n          right: 0;\n          border: 1px solid $app-color-secondary;\n          pointer-events: none;\n        }\n\n        &:focus:not(:focus-visible) {\n          outline: none;\n        }\n      }\n\n      .base-result-box-section__result-box-item {\n        box-shadow: $box-shadow-reg;\n        cursor: pointer;\n\n        &__draggable {\n          box-shadow: 0 0 12px 2px rgba(0, 0, 0, 0.25);\n          cursor: move;\n        }\n\n        &__dragging {\n          &:focus-within:after {\n            border: 1px solid $app-color;\n          }\n        }\n      }\n\n      .base-result-box-section__expand-button__content {\n        display: flex;\n        width: 100%;\n        height: 100%;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n\n        .base-result-box-section__expand-button__content-number {\n          color: $app-color;\n          font-size: $font-size-large;\n          font-weight: bold;\n        }\n\n        .base-result-box-section__expand-button__content-text-collapsed,\n        .base-result-box-section__expand-button__content-text-expanded:hover{\n          color: $app-color;\n        }\n      }\n    }\n\n    .base-result-box-section__message-area {\n      margin-bottom: $spacing-large;\n      text-align: center;\n      color: $font-color-second;\n      backface-visibility: hidden;\n      z-index: map-get($zindex, boxcontent);\n      position: relative;\n\n      .base-result-box-section__message-area-text {\n        font-size: $font-size-large;\n        margin-bottom: $spacing-small;\n      }\n\n      .base-result-box-section__message-area-subtext {\n        font-size: $font-size-small;\n        white-space: pre-line;\n      }\n    }\n\n    .base-result-box-section__background {\n\n      &--white {\n        position: relative;\n        z-index: 1;\n        padding: $spacing;\n        background-color: #fff;\n        box-shadow: $box-shadow-edit;\n\n        .base-result-box-section__message-area {\n          margin-bottom: $spacing-small;\n        }\n\n        .base-result-box-section__result-box-item__draggable {\n          box-shadow: $box-shadow-reg;\n        }\n      }\n\n      &::v-deep .base-button.base-button-secondary.base-button-background {\n        background-color: transparent;\n      }\n    }\n  }\n}\n</style>\n"],"names":["_sfc_main","BaseImageBox","m","i18n","navigateList","val","requiredProp","point","pointValue","action","requiredProps","actionProps","prop","availableSpaces","element","actionsVisible","selectAll","entry","visibleEntryIds","visibleEntry","entryId","selected","boxId","selectedEntry","e","event","index","key","shiftDown","newIndex","newArray","resultBoxesElement","totalWidth","boxBreakpointsCopy","a","b","prev","size","number","nodeId","style","localizationArguments","string","count","variables","object","extractNestedPropertyValue"],"mappings":"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"}