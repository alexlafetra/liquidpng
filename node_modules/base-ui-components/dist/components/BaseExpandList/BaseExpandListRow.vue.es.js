import l from "../BaseIcon/BaseIcon.vue.es.js";
import d from "../../mixins/i18n.es.js";
import "./BaseExpandListRow.vue.es2.js";
import "./BaseExpandListRow.vue.es3.js";
import "./BaseExpandListRow.vue.es4.js";
import o from "../../_virtual/_plugin-vue2_normalizer.es.js";
const r = {
  name: "BaseExpandListRow",
  components: {
    BaseToggle: () => import("../BaseToggle/BaseToggle.vue.es.js").then((t) => t.default || t),
    BaseButton: () => import("../BaseButton/BaseButton.vue.es.js").then((t) => t.default || t),
    // eslint-disable-next-line import/no-self-import
    BaseExpandListRow: () => Promise.resolve().then(() => b).then((t) => t.default || t),
    BaseIcon: l
  },
  mixins: [d],
  props: {
    /**
     * data object: { label: 'String', data: [{ value: 'String', }],
     *  [hidden]: boolean, [count]: number }
     * optional properties:
     *  count: used for the number shown in brackets
     *    (else the array length will be used)
     *  hidden: used to set visibility and is set in edit mode to toggle item
     * rendered variants:
     *  expandable row: data object contains property 'label'
     *  entry row: data object contains property 'value'
     */
    data: {
      type: Object,
      default: () => {
      }
    },
    /**
     * set edit mode
     */
    edit: {
      type: Boolean,
      default: !1
    },
    /**
     * expand multiple items
     */
    multiple: {
      type: Boolean,
      default: !1
    },
    /**
     * render component as e.g.: 'div' | 'li'
     */
    renderAs: {
      type: String,
      default: "div"
    },
    /**
     * button text to hide item
     */
    editHideText: {
      type: String,
      default: "Hide"
    },
    /**
     * button text to show item
     */
    editShowText: {
      type: String,
      default: "Show"
    },
    /**
     * specify the type of visibility switch in edit mode
     *  **button**: a [BaseButton](BaseButton) without text
     *  **button**: a [BaseToggle](BaseToggle) element without text
     */
    controlType: {
      type: String,
      default: "button",
      validator: (t) => ["button", "toggle"].includes(t)
    },
    /**
     * index of parent element
     * used to expand item from outside
     */
    parentIndex: {
      type: [Number, String],
      default: 0
    },
    /**
     * option to disable the edit functionalities of the element (toggle and draggable)
     */
    disabled: {
      type: Boolean,
      default: !1
    }
  },
  data() {
    return {
      // toggle item
      expanded: !1,
      // referenced in BaseExpandList
      movable: !1,
      // referenced in BaseExpandList
      useAssistiveText: !0,
      // internal representation of data
      dataInt: null,
      // fade out overlays
      fadeOutLeft: !1,
      fadeOutRight: !0
    };
  },
  computed: {
    itemVisible: {
      set(t) {
        this.$set(this.dataInt, "hidden", !t);
      },
      get() {
        return !this.dataInt.hidden;
      }
    }
  },
  watch: {
    /**
     * Set focus to active movable item
     *
     * @params {string}
     */
    movable(t) {
      const e = this.$el.querySelector(".base-expand-item__handle");
      t && e.focus(), document.activeElement === e && this.assistiveText(this.movable ? "activated" : "activate"), this.useAssistiveText = !0;
    },
    dataInt: {
      handler(t) {
        t && JSON.stringify(t) !== JSON.stringify(this.data) && this.$emit("update:data", t);
      },
      deep: !0,
      immediate: !0
    },
    data: {
      handler(t) {
        JSON.stringify(t) !== JSON.stringify(this.dataInt) && (this.dataInt = JSON.parse(JSON.stringify(t)));
      },
      deep: !0,
      immediate: !0
    }
  },
  mounted() {
    if (this.$refs.listItemScrollable) {
      const t = this.$refs.listItemScrollable;
      t.addEventListener("scroll", () => this.scrollHandler(t));
    }
  },
  destroyed() {
    if (this.$refs.listItemScrollable) {
      const t = this.$refs.listItemScrollable;
      t.removeEventListener("scroll", () => this.scrollHandler(t));
    }
  },
  methods: {
    /**
     * cancel movable state, stop propagation if needed
     *   e.g. further esc key event
     * @param {KeyboardEvent} e - event
     */
    cancelMovable(t) {
      this.movable && (t.stopPropagation(), t.stopImmediatePropagation(), t.preventDefault(), t.cancelBubble = !1, this.movable = !1);
    },
    /**
     * set visibility if button was clicked
     */
    setVisibility(t) {
      this.itemVisible = t;
    },
    /**
     * move item
     *
     * @param {string} direction values: 'up' | 'down'
     */
    moveItem(t = "up ") {
      this.movable && (this.useAssistiveText = !1, this.movable = !1, this.$emit("sorted", {
        direction: t
      }));
    },
    /**
     * expand item
     */
    expand() {
      const t = this.$vnode.key.toString().split("-");
      if (this.expanded) {
        this.expanded = !1, this.emitExpandedState(t.length > 1 ? t.slice(-1) : "");
        return;
      }
      if (!this.multiple) {
        const e = this.$parent.$refs.baseExpandListRow;
        e && e.forEach((s) => {
          s.expanded = !1;
        });
      }
      this.expanded = !0, this.emitExpandedState(t);
    },
    /**
     * emit expanded state of items
     * each array element represents the index of the expanded item per level
     * eg: [0,1]: level1 first item, level2 second item is expanded
     *
     * @param {Array} value - value to emit
     */
    emitExpandedState(t) {
      this.$emit("expanded-state", t);
    },
    /**
     * calc max height for transition
     *
     * @params {object} el
     */
    maxHeight(t) {
      const e = this.$el.querySelector(".base-expand-item").offsetHeight, s = e + e * this.dataInt.data.length;
      t.setAttribute("style", `max-height: ${s}px`);
    },
    /**
     * close expanded rows
     *
     * @params {array} rows
     */
    closeRows(t) {
      t && t.forEach((e) => {
        e.expanded = !1;
      });
    },
    /**
     * event triggered on enter transition
     *
     * @params {object} el
     */
    enter(t) {
      this.maxHeight(t);
    },
    /**
     * event triggered on finished enter transition
     *
     * @params {object} el
     */
    afterEnter(t) {
      t.style.removeProperty("max-height");
    },
    /**
     * event triggered on leave transition
     *
     * @params {object} el
     */
    leave(t) {
      const e = this.$el.offsetHeight;
      t.setAttribute("style", `max-height: ${e}px`);
    },
    /**
     * event triggered on before leave transition
     */
    beforeLeave() {
      this.multiple || this.closeRows(this.$refs.baseExpandListRow);
    },
    /**
     * assistive text for screen readers
     */
    assistiveText(t = "activate") {
      this.useAssistiveText && this.$emit("assistive", t);
    },
    /**
     * set fadeOut elements depending on scroll position
     *
     * @param {object} row
     */
    scrollHandler(t) {
      this.fadeOutLeft = !!t.scrollLeft, this.fadeOutRight = t.scrollWidth - t.scrollLeft !== t.offsetWidth;
    }
  }
};
var p = function() {
  var e = this, s = e._self._c;
  return s(e.renderAs, { tag: "component", class: [{
    "base-expand": !e.edit,
    expanded: e.expanded
  }] }, [!e.edit && e.dataInt.label ? [s("button", { staticClass: "base-expand__head base-expand-item", attrs: { id: "base-expand-control-" + e._uid, "aria-expanded": e.expanded ? "true" : "false", "aria-controls": "base-expand-region-" + e._uid, type: "button" }, on: { click: e.expand } }, [s("span", { staticClass: "base-expand-item__col base-expand-item__label base-text-fade-out" }, [s("span", { staticClass: "base-expand__head__label" }, [e._v(e._s(e.dataInt.label))]), s("span", { staticClass: "base-expand__head__additional" }, [e._v(" (" + e._s(e.dataInt.count !== void 0 ? e.dataInt.count : e.dataInt.data.length) + ") ")])]), s("base-icon", { staticClass: "base-expand-item__col base-expand__head__icon", attrs: { name: "drop-down" } })], 1), s("transition", { attrs: { name: "expand" }, on: { enter: e.enter, "after-enter": e.afterEnter, leave: e.leave, "before-leave": e.beforeLeave } }, [s("ul", { directives: [{ name: "show", rawName: "v-show", value: e.expanded, expression: "expanded" }], staticClass: "base-expand__body", attrs: { id: "base-expand-region-" + e._uid, "aria-labelledby": "base-expand-control-" + e._uid, "aria-hidden": e.expanded ? "false" : "true" } }, e._l(e.dataInt.data, function(a, i) {
    return s("base-expand-list-row", { key: `${e.parentIndex}-${i}`, ref: "baseExpandListRow", refInFor: !0, attrs: { data: a, multiple: e.multiple, "render-as": "li" }, on: { "expanded-state": e.emitExpandedState }, scopedSlots: e._u([{ key: "content", fn: function(n) {
      return [e._t("content", null, { data: n.data })];
    } }], null, !0) });
  }), 1)])] : e._e(), !e.edit && e.dataInt.value ? [s("div", { class: [
    "base-expand-item",
    "base-expand-item--intend",
    {
      "base-text-fade-out-left": e.fadeOutLeft,
      "base-text-fade-out": e.fadeOutRight
    }
  ] }, [s("span", { ref: "listItemScrollable", staticClass: "base-expand-item__col base-expand-item__label" }, [e._t("content", function() {
    return [e._v(" " + e._s(e.dataInt.value) + " ")];
  }, { data: e.dataInt })], 2)])] : e._e(), e.edit ? [s("div", { class: ["base-expand-item", { "base-expand-item--movable": e.movable }] }, [s("span", { ref: "baseExpandItemHandle", staticClass: "base-expand-item__col base-expand-item__handle", attrs: { title: e.dataInt.label, tabindex: "0" }, on: { keydown: [function(a) {
    return !a.type.indexOf("key") && e._k(a.keyCode, "down", 40, a.key, ["Down", "ArrowDown"]) ? null : (a.preventDefault(), a.stopPropagation(), e.moveItem("down"));
  }, function(a) {
    return !a.type.indexOf("key") && e._k(a.keyCode, "up", 38, a.key, ["Up", "ArrowUp"]) ? null : (a.preventDefault(), a.stopPropagation(), e.moveItem("up"));
  }, function(a) {
    if (!a.type.indexOf("key") && e._k(a.keyCode, "enter", 13, a.key, "Enter"))
      return null;
    a.preventDefault(), a.stopPropagation(), e.movable = !e.movable;
  }], focus: function(a) {
    return e.assistiveText("activate");
  }, keyup: function(a) {
    return !a.type.indexOf("key") && e._k(a.keyCode, "esc", 27, a.key, ["Esc", "Escape"]) ? null : e.cancelMovable.apply(null, arguments);
  }, blur: e.cancelMovable } }, [s("base-icon", { attrs: { name: "drag-lines" } })], 1), s("div", { staticClass: "base-expand-item__col base-expand-item__label base-text-fade-out" }, [e.itemVisible ? e._e() : s("div", { staticClass: "base-expand-item__overlay" }), s("span", { class: [
    "base-expand__head__label",
    { "base-expand__head__label--disabled": !e.itemVisible }
  ] }, [e._v(" " + e._s(e.dataInt.label) + " ")]), s("span", { staticClass: "base-expand__head__additional" }, [e._v(" (" + e._s(e.dataInt.count !== void 0 ? e.dataInt.count : e.dataInt.data.length) + ") ")])]), s("div", { staticClass: "base-expand-item__col base-expand-item__controls" }, [e.controlType === "button" ? s("base-button", { attrs: { icon: e.itemVisible ? "eye" : "eye-hide", text: "", "has-background-color": !1, disabled: e.disabled, "aria-label": `${e.itemVisible ? e.editHideText : e.editShowText} ${e.dataInt.label}`, "icon-size": "large", "icon-position": "left" }, on: { clicked: function(a) {
    return e.setVisibility(!e.itemVisible);
  } } }) : e.controlType === "toggle" ? s("BaseToggle", { staticClass: "base-expand-item__toggle", attrs: { disabled: e.disabled, "hide-label": !0, label: `${e.editShowText} ${e.dataInt.label}` }, model: { value: e.itemVisible, callback: function(a) {
    e.itemVisible = a;
  }, expression: "itemVisible" } }) : e._e()], 1)])] : e._e()], 2);
}, u = [], c = /* @__PURE__ */ o(
  r,
  p,
  u,
  !1,
  null,
  "499ec24d",
  null,
  null
);
const f = c.exports, b = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: f
}, Symbol.toStringTag, { value: "Module" }));
export {
  f as default
};
//# sourceMappingURL=BaseExpandListRow.vue.es.js.map
