import { ref as n, watchEffect as i } from "vue";
import { useTabKeyHandler as s } from "../../composables/useTabKeyHandler.es.js";
import l from "../BaseIcon/BaseIcon.vue.es.js";
import u from "../BaseButton/BaseButton.vue.es.js";
import r from "../../mixins/popUpLock.es.js";
import "./BasePopUp.vue.es2.js";
import p from "../../_virtual/_plugin-vue2_normalizer.es.js";
const c = {
  name: "BasePopUp",
  components: {
    BaseIcon: l,
    BaseButton: u,
    BaseLoader: () => import("../BaseLoader/BaseLoader.vue.es.js").then((o) => o.default || o)
  },
  mixins: [r],
  props: {
    /**
     * pop up header text
     */
    title: {
      type: String,
      default: "Pop Up"
    },
    /**
     * customize the popup header id.
     *  if you are using the `header-title` slot this should also be set as id on your custom title element
     */
    headerId: {
      type: [String, Number],
      default: "popup-title"
    },
    /**
     * specify the id of the element containing a description - for accessibility only
     */
    descriptionElementId: {
      type: String,
      default: ""
    },
    /**
     * text shown in left button
     */
    buttonLeftText: {
      type: String,
      default: "Cancel"
    },
    /**
     * text shown in right button
     */
    buttonRightText: {
      type: String,
      default: "Submit"
    },
    /**
     * icon shown in left button
     */
    buttonLeftIcon: {
      type: String,
      default: "remove"
    },
    /**
     * icon shown in right button
     */
    buttonRightIcon: {
      type: String,
      default: "check-mark"
    },
    /**
     * disable right button
     */
    buttonRightDisabled: {
      type: Boolean,
      default: !1
    },
    /**
     * disable close button
     */
    closeButtonDisabled: {
      type: Boolean,
      default: !1
    },
    /**
     * if true button loader will be shown
     */
    isLoading: {
      type: Boolean,
      default: !1
    },
    /**
     * HTMLElement to focus after opening the popup
     * **Note:** If empty, the header title will be focused by default.
     *           If using the slot for a custom header, be sure to
     *           define an id attribute with the value `popup-title`
     *           The value should be a valid CSS selector.
     * **useful IDs:**
     * - left-button: `popup-left-button`
     * - right-button: `popup-right-button`
     */
    initialFocusElement: {
      type: String,
      default: ""
    },
    /**
     * specify to render component with max height and width
     */
    fullscreenOnMobile: {
      type: Boolean,
      default: !1
    },
    /**
     * list of focusable HTML elements using tab key navigation
     */
    focusableElements: {
      type: Array,
      // also add all elements in general that have a tabindex, except the ones with value -1
      default: () => ["a[href]", "button:enabled", "input:enabled", '*[tabindex]:not([tabindex="-1"])']
    },
    /**
     * specify to disable the tab key handler within the component
     */
    disableTabKeyHandler: {
      type: Boolean,
      default: !1
    },
    /**
     * button row visibility
     */
    showButtonRow: {
      type: Boolean,
      default: !0
    },
    /**
     * define if the overlay background should be visible
     * (semitransparent black)
     */
    overlayBackgroundVisible: {
      type: Boolean,
      default: !1
    }
  },
  setup(o) {
    const e = n(null), { focusableHTMLTags: t, disableHandler: a } = s(e, o.focusableElements.join(", "), o.disableTabKeyHandler);
    return i(() => {
      t.value = o.focusableElements, a.value = o.disableTabKeyHandler;
    }), {
      popUpBody: e
    };
  },
  data() {
    return {
      // this is needed for popUpLock mixin!
      targetName: "popUpBody",
      // HTML element that should be focused when the component is closed
      prevActiveElement: void 0
    };
  },
  mounted() {
    document.onkeyup = (o) => {
      document.querySelector(".popup-box") && !this.closeButtonDisabled && o.key === "Escape" && document.querySelector(".popup-box .base-popup__close-button").dispatchEvent(new Event("click"));
    }, this.prevActiveElement = document.activeElement, this.$nextTick(() => {
      this.determineFocus();
    });
  },
  beforeDestroy() {
    this.prevActiveElement && (this.prevActiveElement.focus(), this.prevActiveElement = !1);
  },
  methods: {
    close() {
      this.$emit("close");
    },
    buttonRight() {
      this.$emit("button-right");
    },
    buttonLeft() {
      this.$emit("button-left");
    },
    /** INITIAL FOCUS */
    determineFocus() {
      var o, e;
      this.initialFocusElement && ((o = this.$el) != null && o.querySelector(this.initialFocusElement)) ? this.$el.querySelector(this.initialFocusElement).focus() : (e = this.$el) != null && e.querySelector(`#${this.headerId}`) && this.$el.querySelector(`#${this.headerId}`).focus();
    }
  }
};
var d = function() {
  var e = this, t = e._self._c;
  return t("div", { class: [
    "base-pop-up",
    { "base-pop-up--fullscreen-on-mobile": e.fullscreenOnMobile }
  ] }, [t("div", { class: [
    "base-pop-up__background",
    { "base-pop-up__background--visible": e.overlayBackgroundVisible }
  ] }), t("div", { ref: "popUpBody", staticClass: "popup-box", attrs: { "aria-labelledby": e.headerId, "aria-describedby": e.descriptionElementId, role: "alertdialog", "aria-modal": "true" } }, [t("div", { staticClass: "popup-header" }, [e._t("header-title", function() {
    return [t("div", { staticClass: "popup-title", attrs: { id: e.headerId, tabindex: "-1" } }, [e._v(" " + e._s(e.title) + " ")])];
  }, { headerId: e.headerId }), e.closeButtonDisabled ? e._e() : t("button", { staticClass: "base-popup__close-button", attrs: { type: "button", "aria-label": "close pop up" }, on: { click: e.close } }, [t("base-icon", { staticClass: "popup-remove", attrs: { name: "remove" } })], 1)], 2), t("div", { staticClass: "popup-content" }, [e._t("default"), e.showButtonRow ? t("div", { staticClass: "popup-button-row" }, [e._t("button-row", function() {
    return [t("BaseButton", { staticClass: "base-popup-button", attrs: { id: "popup-left-button", text: e.buttonLeftText, icon: e.buttonLeftIcon, "icon-position": "right", "icon-size": "small" }, on: { clicked: e.buttonLeft } }), t("BaseButton", { staticClass: "base-popup-button", attrs: { id: "popup-right-button", text: e.buttonRightText, icon: e.isLoading ? "" : e.buttonRightIcon, "icon-position": "right", "icon-size": "small", disabled: e.buttonRightDisabled }, on: { clicked: e.buttonRight }, scopedSlots: e._u([{ key: "right-of-text", fn: function() {
      return [t("span", { directives: [{ name: "show", rawName: "v-show", value: e.isLoading, expression: "isLoading" }], staticClass: "base-popup-button-loader" }, [t("BaseLoader")], 1)];
    }, proxy: !0 }], null, !1, 288902964) })];
  })], 2) : e._e()], 2)])]);
}, b = [], f = /* @__PURE__ */ p(
  c,
  d,
  b,
  !1,
  null,
  "af969576",
  null,
  null
);
const x = f.exports;
export {
  x as default
};
//# sourceMappingURL=BasePopUp.vue.es.js.map
