{"version":3,"file":"BaseOptions.vue.cjs.js","sources":["../../../src/components/BaseOptions/BaseOptions.vue"],"sourcesContent":["<template>\n  <div class=\"base-options\">\n    <div\n      ref=\"optionsRow\"\n      :class=\"[\n        'base-options__row',\n        `base-options__row-${alignOptions}`,\n        {\n          'base-options__row-wrap': !showOptionsInline\n            || (!useOptionsButton && remainingActionsWidth < actionButtonsWidth),\n        },\n      ]\">\n      <div\n        v-if=\"beforeSlotHasData\"\n        ref=\"beforeOptions\"\n        class=\"base-options__before\">\n        <!-- @slot add an element before the options e.g. a header -->\n        <slot\n          name=\"beforeOptions\" />\n      </div>\n      <div\n        v-if=\"alignOptions === 'right'\"\n        class=\"base-options__spacer\" />\n      <div\n        v-if=\"!optionsHidden && showOptionsInline && showOptionsInt\"\n        ref=\"actions\"\n        :class=\"['base-options__options-inline',\n                 { 'base-options__options-inline-wrap': wrapActions },\n                 { 'base-options__options-inline-left': alignOptions === 'left' }]\">\n        <!-- @slot add the actual options -->\n        <slot name=\"options\">\n          <template v-if=\"optionsConfig.length\">\n            <BaseButton\n              v-for=\"({ text, icon, disabled, value }, index) of optionsConfig\"\n              :key=\"text + '_' + index\"\n              :text=\"text\"\n              :icon=\"icon\"\n              :disabled=\"disabled || disableOptions.includes(value)\"\n              :has-background-color=\"false\"\n              icon-size=\"large\"\n              button-style=\"single\"\n              @clicked=\"optionTriggered(value)\" />\n          </template>\n        </slot>\n      </div>\n      <BaseButton\n        v-if=\"!optionsHidden && useOptionsButton\"\n        ref=\"optionsButton\"\n        :text=\"showOptionsInt ? getI18nTerm(optionsButtonText.hide)\n          : getI18nTerm(optionsButtonText.show)\"\n        :icon=\"showOptionsInt ? optionsButtonIcon.hide : optionsButtonIcon.show\"\n        :disabled=\"optionsButtonDisabled\"\n        :class=\"[{ 'base-options__options-button-left': alignOptions === 'left' }]\"\n        @clicked=\"showOptionsInt = !showOptionsInt\" />\n      <div\n        v-if=\"alignOptions === 'left'\"\n        class=\"base-options__spacer base-options__spacer-left\" />\n      <div\n        v-if=\"showAfterOptionsInline && afterSlotHasData\"\n        ref=\"afterOptions\"\n        class=\"base-options__after-inline\">\n        <!-- @slot add elements after the options element -->\n        <slot name=\"afterOptions\" />\n      </div>\n    </div>\n    <transition name=\"slide-fade-options\">\n      <div\n        v-if=\"!optionsHidden && showOptionsInt && !showOptionsInline\"\n        class=\"base-options__below\">\n        <!-- @slot add the actual options -->\n        <slot name=\"options\">\n          <template v-if=\"optionsConfig.length\">\n            <BaseButton\n              v-for=\"(config, index) of optionsConfig\"\n              :key=\"config.text + '_' + index\"\n              :text=\"config.text\"\n              :icon=\"config.icon\"\n              :has-background-color=\"false\"\n              icon-size=\"large\"\n              button-style=\"single\"\n              @clicked=\"optionTriggered(config.value)\" />\n          </template>\n        </slot>\n      </div>\n    </transition>\n    <div\n      v-if=\"!showAfterOptionsInline && afterSlotHasData\"\n      class=\"base-options__after\">\n      <!-- @slot add elements after the options element -->\n      <slot name=\"afterOptions\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { debounce } from '@/utils/utils';\nimport BaseButton from '../BaseButton/BaseButton';\nimport i18n from '../../mixins/i18n';\n\n/**\n * a row that can display options responsively either hidden behind an options button\n * or directly\n */\n\nexport default {\n  name: 'BaseOptions',\n  components: {\n    BaseButton,\n  },\n  mixins: [i18n],\n  props: {\n    /**\n     * set showing of option buttons from outside.\n     *   the [`.sync` modifier](https://vuejs.org/v2/guide/components-custom-events.html#sync-Modifier) may be used on this prop\n     */\n    showOptions: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * hide options completely (necessary if only before or after slot elements should remain)\n     */\n    optionsHidden: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * define alignment of options button and options\n     */\n    alignOptions: {\n      type: String,\n      default: 'right',\n      validator: val => ['left', 'right'].includes(val),\n    },\n    /**\n     * define in which scenario an options button should be shown:\n     *\n     *   **always**: always show the options button\n     *   **mobile**: only show options button when window size < 640px\n     *   **never**: never show the options button - just show the available options directly\n     *   **fitted**: use options button whenever the actions (incl. before and after slot) do\n     *    not fit the row anymore\n     */\n    useOptionsButtonOn: {\n      type: String,\n      default: 'always',\n      validator: val => ['always', 'mobile', 'never', 'fitted'].includes(val),\n    },\n    /**\n     * define the options button text as an object with `show` (=text that should be\n     * shown with options hidden) and `hide` (=text that should be shown with options visible)\n     *   values can be either plain strings or a string leading to a localization file.\n     *   (only relevant if `useOptionsButtonOn` is different from 'never')\n     */\n    optionsButtonText: {\n      type: Object,\n      default: () => ({\n        show: 'options',\n        hide: 'return',\n      }),\n      validator: val => 'show' in val && 'hide' in val,\n    },\n    /**\n     * define the icon for the options button as an object with `show` (=icon that should be\n     * shown with options hidden) and `hide` (=icon that should be shown with options visible)\n     *   see [BaseIcon](BaseIcon) for available icons.\n     *   (only relevant if `useOptionsButtonOn` is different from 'never')\n     */\n    optionsButtonIcon: {\n      type: Object,\n      default: () => ({\n        show: 'options-menu',\n        hide: 'remove',\n      }),\n      validator: val => 'show' in val && 'hide' in val,\n    },\n    /**\n     * define if slot after-options should be shown before or after options.\n     * if row wraps because of space issues\n     *   (only relevant with use of options button)\n     */\n    showAfterOptionsBelow: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * in order to display options one can either use the slot `options` or specify a\n     * config via `optionsConfig` prop. If the latter option is used the following properties\n     * need to be provided:\n     *\n     *   **text** `string` - the text displayed in the button\n     *   **icon** `string` - the icon name to display\n     *    (for available icons see [BaseIcon](BaseIcon) )\n     *   **value** `string` - the value emitted on button click\n     *   **disabled** `boolean?` - should button be shown as disabled\n     */\n    optionsConfig: {\n      type: Array,\n      default: () => [{\n        text: 'delete',\n        icon: 'waste-bin',\n        value: 'delete',\n        disabled: false,\n      }],\n      validator: val => val.every((action) => {\n        const requiredProps = ['text', 'icon', 'value'];\n        const actionProps = Object.keys(action);\n        return requiredProps.every(prop => actionProps.includes(prop));\n      }),\n    },\n    /**\n     * specify an array of values set in `optionsConfig` property `value`\n     *  for options that should appear disabled.\n     *  This is equivalent to and just a more convenient way than to\n     *  set the `optionsConfig` property `disabled`\n     */\n    disableOptions: {\n      type: Array,\n      default: () => ([]),\n    },\n    /**\n     * set true if options button should be disabled\n     *  not relevant for `useOptionsButtonOn` with value `never`\n     */\n    optionsButtonDisabled: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      /**\n       * internal variable for options toggle\n       * @type {boolean}\n       */\n      showOptionsInt: false,\n      /**\n       * is window size < 640px\n       * @type {boolean}\n       */\n      isMobile: true,\n      /**\n       * total row width needed to calc if options and after options\n       * should be shown inline\n       * @type {number}\n       */\n      rowWidth: 4000,\n      /**\n       * beforeOptions element width needed to calc if options\n       * should be shown inline\n       * @type {number}\n       */\n      beforeOptionsWidth: 0,\n      /**\n       * afterOptions element width needed to calc if options\n       * should be shown inline\n       * @type {number}\n       */\n      afterOptionsWidth: 0,\n      /**\n       * options button element width needed to calc if options\n       * should be shown inline\n       * @type {number}\n       */\n      optionsButtonWidth: 0,\n      /**\n       * width remaining inline for the actual action buttons to be rendered\n       * @type {number}\n       */\n      remainingActionsWidth: 4000,\n      /**\n       * beforeOptions element width needed to calc if options\n       * should be shown inline\n       * @type {number}\n       */\n      actionButtonsWidth: 0,\n      /**\n       * for removing chips via backspace, to get delay after\n       * keydown event\n       * @type {?number}\n       */\n      timeout: null,\n      /**\n       * resize observer for specific element (instead of window)\n       */\n      resizeObserver: null,\n      /**\n       * mutation observer for specific element\n       */\n      mutationObserver: null,\n    };\n  },\n  computed: {\n    /**\n     * translate prop into boolean value to see if options\n     * button should be shown\n     * @returns {Boolean}\n     */\n    useOptionsButton() {\n      return this.useOptionsButtonOn === 'always'\n        || (this.useOptionsButtonOn === 'mobile' && this.isMobile)\n        || (this.useOptionsButtonOn === 'fitted' && !this.optionsFittingRowWidth);\n    },\n    /**\n     * determine if options should be shown inline or below options row\n     * @returns {Boolean}\n     */\n    showOptionsInline() {\n      return this.remainingActionsWidth - this.actionButtonsWidth > 0 || !this.useOptionsButton;\n    },\n    /**\n     * determine if afterOptions slot should be shown above or below options in a\n     * wrapping situation\n     */\n    showAfterOptionsInline() {\n      // show options inline if\n      // a) the slot was actually used and\n      return this.afterSlotHasData\n        // b) options button is not used and there is enough space for them or\n        && ((!this.useOptionsButton && this.remainingActionsWidth > this.actionButtonsWidth)\n        // c) options button is used and there is enough space left inline or\n        // showAfterOptionsBelow is false\n        || (this.useOptionsButton && (!this.showAfterOptionsBelow\n            || this.remainingActionsWidth > 0)));\n    },\n    optionsFittingRowWidth() {\n      return this.rowWidth - this.actionButtonsWidth - this.beforeOptionsWidth - this.afterOptionsWidth > 0;\n    },\n    /**\n     * determine if action buttons need to be flex-wrapped\n     */\n    wrapActions() {\n      return this.rowWidth <= this.actionButtonsWidth;\n    },\n    wrapHeaderActions() {\n      return this.rowWidth - this.beforeOptionsWidth < this.actionButtonsWidth;\n    },\n    /**\n     * determine if before slot has data\n     * @returns {Boolean}\n     */\n    beforeSlotHasData() {\n      return !!this.$slots.beforeOptions;\n    },\n    /**\n     * determine if after slot has data\n     * @returns {Boolean}\n     */\n    afterSlotHasData() {\n      return !!this.$slots.afterOptions;\n    },\n  },\n  watch: {\n    // watch options toggle to recalculate the remaining size\n    // for options (= should they be shown inline or below)\n    showOptionsInt(val) {\n      if (this.showOptions !== val) {\n        /**\n         * emitted when options button is toggled (not relevant if `useOptionsButtonOn` prop\n         * is set to 'never')\n         *   the `.sync` modifier can be used on `showOptions` prop here\n         * @event update:show-options\n         * @param {boolean} - was show value set true or false\n         */\n        this.$emit('update:show-options', val);\n      }\n    },\n    // update show options internal value if different from parent\n    showOptions: {\n      handler(val) {\n        if (this.showOptionsInt !== val && this.useOptionsButton) {\n          this.showOptionsInt = val;\n        }\n      },\n      immediate: true,\n    },\n    /**\n     * watch use options button variable which changes if options button\n     * is only used on mobile\n     * @param {boolean} val\n     */\n    useOptionsButton: {\n      handler(val) {\n        // make sure options are shown when options button is disabled and\n        // hidden behind the options button as soon as it is used\n        this.showOptionsInt = !val;\n      },\n      immediate: true,\n    },\n    /**\n     * watch isMobile to have the options transform into options button when\n     * useOptionsButtonOn is 'mobile'\n     *\n     * @param {boolean} val\n     */\n    isMobile(val) {\n      if (this.useOptionsButtonOn === 'mobile' && val) {\n        this.showOptionsInt = false;\n      }\n    },\n    optionsButtonDisabled(val) {\n      if (val) {\n        this.showOptionsInt = false;\n      }\n    },\n  },\n  mounted() {\n    // to listen to element with instead of window width create an observer!\n    this.initObserver();\n  },\n  updated() {\n    // calc the width of all fixed width elements (beforeOptions,\n    // options button, after Options)\n    this.calcFixedElementWidth();\n    if (this.showOptionsInt && this.$refs.actions) {\n      this.calcOptionsWidth();\n    }\n  },\n  beforeDestroy() {\n    if (this.resizeObserver) this.resizeObserver.unobserve(this.$refs.optionsRow);\n    if (this.mutationObserver && this.afterSlotHasData) this.mutationObserver.disconnect();\n  },\n  methods: {\n    initObserver() {\n      const resizeObserver = new ResizeObserver(debounce(50, this.resizeActions));\n      resizeObserver.observe(this.$refs.optionsRow);\n      this.resizeObserver = resizeObserver;\n\n      if (this.afterSlotHasData) {\n        const mutationObserver = new MutationObserver(this.calcOptionsWidth);\n        mutationObserver.observe(this.$refs.afterOptions, {\n          childList: true,\n          subtree: true,\n        });\n        this.mutationObserver = mutationObserver;\n      }\n    },\n    optionTriggered(value) {\n      /**\n       * emitted if prop `optionsConfig` is used when an options button is clicked\n       *\n       * @event option-triggered\n       * @param {string} - the value provided in `optionsConfig` object\n       */\n      this.$emit('option-triggered', value);\n    },\n    /**\n     * method for all resize actions with setTimeout function to prevent\n     * triggering to often\n     */\n    resizeActions() {\n      // check if time out was set\n      if (this.timeout) {\n        // if yes clear old one\n        clearTimeout(this.timeout);\n        this.timeout = null;\n      }\n      // now set new time out\n      this.timeout = setTimeout(() => {\n        // calc if window size is now mobile\n        this.calcIsMobile();\n      }, 200);\n      // no timeout for options positioning for smoother experience\n      // calc if options should be shown inline (= enough space left)\n      this.calcOptionsWidth();\n    },\n    /**\n     * calculate if size is mobile size after initial render and\n     * window resize events\n     */\n    calcIsMobile() {\n      this.isMobile = window.innerWidth < 640;\n    },\n    /**\n     * calculate the variable width elements width after initial render, options toggle\n     * or window resize events\n     */\n    calcOptionsWidth() {\n      // get the complete options row element\n      const { optionsRow } = this.$refs;\n      if (optionsRow) {\n        this.rowWidth = optionsRow.clientWidth;\n      }\n      // check if it is defined - if yes - calculate the width remaining for the action buttons\n      this.remainingActionsWidth = optionsRow ? this.rowWidth\n        - this.beforeOptionsWidth - this.afterOptionsWidth\n        // only subtract options button if it is shown\n        - (this.useOptionsButton ? this.optionsButtonWidth : 0)\n        : 0;\n      // get the action button elements\n      const actionsElement = this.$refs.actions;\n      // check if it is defined\n      if (actionsElement) {\n        // if yes - get the width they all together actually take up\n        this.actionButtonsWidth = actionsElement.clientWidth;\n      }\n    },\n    /**\n     * function for elements width that only has to be calculated once\n     */\n    calcFixedElementWidth() {\n      // check if the slot beforeOptions has elements\n      if (this.beforeSlotHasData && this.$refs.beforeOptions) {\n        // if yes set the variable with the width of the element\n        this.beforeOptionsWidth = this.$refs.beforeOptions.clientWidth;\n      }\n      // check if the slot afterOptions has data\n      if (this.afterSlotHasData && this.$refs.afterOptions) {\n        // if yes set the variable with the width of the element\n        this.afterOptionsWidth = this.$refs.afterOptions.clientWidth;\n      }\n      // get the options button element\n      const optionsButtonElement = this.$refs.optionsButton;\n      // check if it is used and rendered\n      if (this.useOptionsButton && optionsButtonElement) {\n        // if yes - set the variable to store the button width\n        this.optionsButtonWidth = optionsButtonElement.$el.clientWidth;\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../../styles/variables\";\n\n.base-options {\n  width: 100%;\n\n  .base-options__row {\n    position: relative;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    min-height: $row-height-small;\n    width: 100%;\n    background-color: inherit;\n    z-index: map-get($zindex, slidein);\n\n    &-left {\n      justify-content: flex-start;\n    }\n\n    &-right {\n      justify-content: flex-end;\n    }\n\n    &-wrap {\n      flex-wrap: wrap;\n    }\n\n    .base-options__options-button-left {\n      order: 0;\n    }\n\n    .base-options__before {\n      flex: 0 1 auto;\n    }\n\n    .base-options__spacer {\n      flex: 1 1 auto;\n\n      &-left {\n        order: 2;\n      }\n    }\n\n    .base-options__options-inline {\n      flex: 0 0 auto;\n      display: flex;\n      justify-content: flex-end;\n\n      &-left {\n        order: 1;\n        justify-content: flex-start;\n      }\n\n      &-wrap {\n        flex: 0 1 auto;\n        flex-wrap: wrap;\n        justify-content: center;\n      }\n    }\n\n    .base-options__after-inline {\n      flex: 0 1 auto;\n      order: 5;\n      display: flex;\n      justify-content: flex-end;\n      background-color: inherit;\n    }\n  }\n\n  .base-options__below {\n    display: flex;\n    flex-wrap: wrap;\n    height: auto;\n    justify-content: center;\n  }\n\n  .base-options__after {\n    display: flex;\n    justify-content: flex-end;\n  }\n}\n\n.slide-fade-options-enter-active, .slide-fade-options-move {\n  transition: all 0.5s ease;\n}\n\n.slide-fade-options-enter {\n  opacity: 0;\n  transform: translateY(-#{2*$spacing});\n}\n</style>\n"],"names":["_sfc_main","BaseButton","i18n","val","action","requiredProps","actionProps","prop","resizeObserver","debounce","mutationObserver","value","optionsRow","actionsElement","optionsButtonElement"],"mappings":"qVAwGAA,EAAA,CACA,KAAA,cACA,WAAA,CACA,WAAAC,EAAA,OACA,EACA,OAAA,CAAAC,EAAAA,OAAA,EACA,MAAA,CAKA,YAAA,CACA,KAAA,QACA,QAAA,EACA,EAIA,cAAA,CACA,KAAA,QACA,QAAA,EACA,EAIA,aAAA,CACA,KAAA,OACA,QAAA,QACA,UAAAC,GAAA,CAAA,OAAA,OAAA,EAAA,SAAAA,CAAA,CACA,EAUA,mBAAA,CACA,KAAA,OACA,QAAA,SACA,UAAAA,GAAA,CAAA,SAAA,SAAA,QAAA,QAAA,EAAA,SAAAA,CAAA,CACA,EAOA,kBAAA,CACA,KAAA,OACA,QAAA,KAAA,CACA,KAAA,UACA,KAAA,QACA,GACA,UAAAA,GAAA,SAAAA,GAAA,SAAAA,CACA,EAOA,kBAAA,CACA,KAAA,OACA,QAAA,KAAA,CACA,KAAA,eACA,KAAA,QACA,GACA,UAAAA,GAAA,SAAAA,GAAA,SAAAA,CACA,EAMA,sBAAA,CACA,KAAA,QACA,QAAA,EACA,EAYA,cAAA,CACA,KAAA,MACA,QAAA,IAAA,CAAA,CACA,KAAA,SACA,KAAA,YACA,MAAA,SACA,SAAA,EACA,CAAA,EACA,UAAAA,GAAAA,EAAA,MAAAC,GAAA,CACA,MAAAC,EAAA,CAAA,OAAA,OAAA,OAAA,EACAC,EAAA,OAAA,KAAAF,CAAA,EACA,OAAAC,EAAA,MAAAE,GAAAD,EAAA,SAAAC,CAAA,CAAA,CACA,CAAA,CACA,EAOA,eAAA,CACA,KAAA,MACA,QAAA,IAAA,CAAA,CACA,EAKA,sBAAA,CACA,KAAA,QACA,QAAA,EACA,CACA,EACA,MAAA,CACA,MAAA,CAKA,eAAA,GAKA,SAAA,GAMA,SAAA,IAMA,mBAAA,EAMA,kBAAA,EAMA,mBAAA,EAKA,sBAAA,IAMA,mBAAA,EAMA,QAAA,KAIA,eAAA,KAIA,iBAAA,IACA,CACA,EACA,SAAA,CAMA,kBAAA,CACA,OAAA,KAAA,qBAAA,UACA,KAAA,qBAAA,UAAA,KAAA,UACA,KAAA,qBAAA,UAAA,CAAA,KAAA,sBACA,EAKA,mBAAA,CACA,OAAA,KAAA,sBAAA,KAAA,mBAAA,GAAA,CAAA,KAAA,gBACA,EAKA,wBAAA,CAGA,OAAA,KAAA,mBAEA,CAAA,KAAA,kBAAA,KAAA,sBAAA,KAAA,oBAGA,KAAA,mBAAA,CAAA,KAAA,uBACA,KAAA,sBAAA,GACA,EACA,wBAAA,CACA,OAAA,KAAA,SAAA,KAAA,mBAAA,KAAA,mBAAA,KAAA,kBAAA,CACA,EAIA,aAAA,CACA,OAAA,KAAA,UAAA,KAAA,kBACA,EACA,mBAAA,CACA,OAAA,KAAA,SAAA,KAAA,mBAAA,KAAA,kBACA,EAKA,mBAAA,CACA,MAAA,CAAA,CAAA,KAAA,OAAA,aACA,EAKA,kBAAA,CACA,MAAA,CAAA,CAAA,KAAA,OAAA,YACA,CACA,EACA,MAAA,CAGA,eAAAJ,EAAA,CACA,KAAA,cAAAA,GAQA,KAAA,MAAA,sBAAAA,CAAA,CAEA,EAEA,YAAA,CACA,QAAAA,EAAA,CACA,KAAA,iBAAAA,GAAA,KAAA,mBACA,KAAA,eAAAA,EAEA,EACA,UAAA,EACA,EAMA,iBAAA,CACA,QAAAA,EAAA,CAGA,KAAA,eAAA,CAAAA,CACA,EACA,UAAA,EACA,EAOA,SAAAA,EAAA,CACA,KAAA,qBAAA,UAAAA,IACA,KAAA,eAAA,GAEA,EACA,sBAAAA,EAAA,CACAA,IACA,KAAA,eAAA,GAEA,CACA,EACA,SAAA,CAEA,KAAA,aAAA,CACA,EACA,SAAA,CAGA,KAAA,sBAAA,EACA,KAAA,gBAAA,KAAA,MAAA,SACA,KAAA,iBAAA,CAEA,EACA,eAAA,CACA,KAAA,gBAAA,KAAA,eAAA,UAAA,KAAA,MAAA,UAAA,EACA,KAAA,kBAAA,KAAA,kBAAA,KAAA,iBAAA,YACA,EACA,QAAA,CACA,cAAA,CACA,MAAAK,EAAA,IAAA,eAAAC,EAAAA,SAAA,GAAA,KAAA,aAAA,CAAA,EAIA,GAHAD,EAAA,QAAA,KAAA,MAAA,UAAA,EACA,KAAA,eAAAA,EAEA,KAAA,iBAAA,CACA,MAAAE,EAAA,IAAA,iBAAA,KAAA,gBAAA,EACAA,EAAA,QAAA,KAAA,MAAA,aAAA,CACA,UAAA,GACA,QAAA,EACA,CAAA,EACA,KAAA,iBAAAA,CACA,CACA,EACA,gBAAAC,EAAA,CAOA,KAAA,MAAA,mBAAAA,CAAA,CACA,EAKA,eAAA,CAEA,KAAA,UAEA,aAAA,KAAA,OAAA,EACA,KAAA,QAAA,MAGA,KAAA,QAAA,WAAA,IAAA,CAEA,KAAA,aAAA,CACA,EAAA,GAAA,EAGA,KAAA,iBAAA,CACA,EAKA,cAAA,CACA,KAAA,SAAA,OAAA,WAAA,GACA,EAKA,kBAAA,CAEA,KAAA,CAAA,WAAAC,CAAA,EAAA,KAAA,MACAA,IACA,KAAA,SAAAA,EAAA,aAGA,KAAA,sBAAAA,EAAA,KAAA,SACA,KAAA,mBAAA,KAAA,mBAEA,KAAA,iBAAA,KAAA,mBAAA,GACA,EAEA,MAAAC,EAAA,KAAA,MAAA,QAEAA,IAEA,KAAA,mBAAAA,EAAA,YAEA,EAIA,uBAAA,CAEA,KAAA,mBAAA,KAAA,MAAA,gBAEA,KAAA,mBAAA,KAAA,MAAA,cAAA,aAGA,KAAA,kBAAA,KAAA,MAAA,eAEA,KAAA,kBAAA,KAAA,MAAA,aAAA,aAGA,MAAAC,EAAA,KAAA,MAAA,cAEA,KAAA,kBAAAA,IAEA,KAAA,mBAAAA,EAAA,IAAA,YAEA,CACA,CACA"}