{
  "version": 3,
  "sources": ["../../p5.asciify/dist/p5.asciify.esm.js"],
  "sourcesContent": ["var SA = Object.defineProperty;\nvar MA = (n, A, e) => A in n ? SA(n, A, { enumerable: !0, configurable: !0, writable: !0, value: e }) : n[A] = e;\nvar o = (n, A, e) => MA(n, typeof A != \"symbol\" ? A + \"\" : A, e);\nimport P from \"p5\";\nclass VA {\n  /**\n   * Create a new grid instance.\n   * @param _texture The framebuffer for the asciifier, used to determine the grid dimensions.\n   * @param _cellWidth The width of each cell in the grid.\n   * @param _cellHeight The height of each cell in the grid.\n   * @ignore\n   */\n  constructor(A, e, r) {\n    /** The number of columns in the grid. */\n    o(this, \"_cols\");\n    /** The number of rows in the grid. */\n    o(this, \"_rows\");\n    /** The total width of the grid in pixels. */\n    o(this, \"_width\");\n    /** The total height of the grid in pixels. */\n    o(this, \"_height\");\n    /** The offset to the outer canvas on the x-axis when centering the grid. */\n    o(this, \"_offsetX\");\n    /** The offset to the outer canvas on the y-axis when centering the grid. */\n    o(this, \"_offsetY\");\n    /** Whether the grid dimensions are fixed, or responsive based on the canvas dimensions. */\n    o(this, \"_fixedDimensions\", !1);\n    this._texture = A, this._cellWidth = e, this._cellHeight = r, this.reset();\n  }\n  /**\n   * Reset the grid to the default number of columns and rows based on the current canvas dimensions, and the grid cell dimensions.\n   * @ignore\n   */\n  reset() {\n    this._fixedDimensions || ([this._cols, this._rows] = [Math.floor(this._texture.width / this._cellWidth), Math.floor(this._texture.height / this._cellHeight)]), this._resizeGrid();\n  }\n  /**\n   * Reset the total grid width & height, and the offset to the outer canvas.\n   */\n  _resizeGrid() {\n    this._width = this._cols * this._cellWidth, this._height = this._rows * this._cellHeight, this._offsetX = Math.floor((this._texture.width - this._width) / 2), this._offsetY = Math.floor((this._texture.height - this._height) / 2);\n  }\n  /**\n   * Re-assign the grid cell dimensions and `reset()` the grid.\n   * @param newCellWidth The new cell width.\n   * @param newCellHeight The new cell height.\n   * @ignore\n   */\n  resizeCellPixelDimensions(A, e) {\n    [this._cellWidth, this._cellHeight] = [A, e], this.reset();\n  }\n  /**\n   * Re-assign the grid dimensions and resize the grid. \n   * \n   * Calling this method makes the grid dimensions fixed, meaning they will not automatically resize based on the canvas dimensions.\n   * @param newCols The new number of columns.\n   * @param newRows The new number of rows.\n   * @ignore\n   */\n  resizeGridDimensions(A, e) {\n    this._fixedDimensions = !0, [this._cols, this._rows] = [A, e], this._resizeGrid();\n  }\n  /**\n   * Make the grid dimensions flexible again, and `reset()` the grid.\n   * @ignore\n   */\n  resetGridDimensions() {\n    this._fixedDimensions = !1, this.reset();\n  }\n  /**\n   * Update the texture used by the grid, and reset the grid dimensions.\n   * @param texture The new framebuffer texture to use for the grid.\n   * @ignore\n   */\n  updateTexture(A) {\n    this._texture = A, this._fixedDimensions ? this._resizeGrid() : this.reset();\n  }\n  /**\n   * Returns the width of each cell in the grid.\n   */\n  get cellWidth() {\n    return this._cellWidth;\n  }\n  /**\n   * Returns the height of each cell in the grid.\n   */\n  get cellHeight() {\n    return this._cellHeight;\n  }\n  /**\n   * Returns the number of columns in the grid.\n   */\n  get cols() {\n    return this._cols;\n  }\n  /**\n   * Returns the number of rows in the grid.\n   */\n  get rows() {\n    return this._rows;\n  }\n  /**\n   * Returns the total width of the grid.\n   */\n  get width() {\n    return this._width;\n  }\n  /**\n   * Returns the total height of the grid.\n   */\n  get height() {\n    return this._height;\n  }\n  /**\n   * Returns the offset to the outer canvas borders on the x-axis when centering the grid.\n   */\n  get offsetX() {\n    return this._offsetX;\n  }\n  /**\n   * Returns the offset to the outer canvas borders on the y-axis when centering the grid.\n   */\n  get offsetY() {\n    return this._offsetY;\n  }\n  /** \n   * Returns `true` if the grid dimensions *(columns and rows)* are fixed, or `false` if they are responsive based on the canvas dimensions.\n   */\n  get fixedDimensions() {\n    return this._fixedDimensions;\n  }\n  /**\n   * Sets whether the grid dimensions *(columns and rows)* are fixed or responsive based on the canvas dimensions.\n   * @param value `true` to make the grid dimensions fixed, or `false` to make them responsive.\n   * @ignore\n   */\n  set fixedDimensions(A) {\n    this._fixedDimensions = A;\n  }\n}\nconst j = (n) => {\n  const A = [\n    // Instance version (most common in standard setups)\n    () => n == null ? void 0 : n.VERSION,\n    // Global p5 version (works in many environments)\n    () => typeof P < \"u\" && P.VERSION ? P.VERSION : void 0,\n    // Window global version (P5LIVE style environments)\n    () => {\n      var e;\n      return typeof window < \"u\" && ((e = window.p5) != null && e.VERSION) ? window.p5.VERSION : void 0;\n    },\n    // Constructor version (some bundled environments)\n    () => {\n      var e;\n      return (e = n == null ? void 0 : n.constructor) == null ? void 0 : e.VERSION;\n    },\n    // Prototype chain version (edge cases)\n    () => {\n      var e, r;\n      return (r = (e = Object.getPrototypeOf(n)) == null ? void 0 : e.constructor) == null ? void 0 : r.VERSION;\n    }\n  ];\n  for (const e of A)\n    try {\n      const r = e();\n      if (r && typeof r == \"string\" && /^\\d+\\.\\d+/.test(r))\n        return r;\n    } catch {\n      continue;\n    }\n  return \"1.0.0\";\n}, R = (n) => O(n, \"2.0.0\") >= 0, J = (n, A) => {\n  var e;\n  return A ? !!((e = n == null ? void 0 : n.constructor) != null && e.Color && A instanceof n.constructor.Color || typeof P < \"u\" && P.Color && A instanceof P.Color) : !1;\n}, pA = (n, A) => {\n  var e;\n  return A ? !!((e = n == null ? void 0 : n.constructor) != null && e.Font && A instanceof n.constructor.Font || typeof P < \"u\" && P.Font && A instanceof P.Font) : !1;\n}, O = (n, A) => {\n  const [e, r] = [n, A].map((t) => t.split(\".\").map(Number));\n  for (let t = 0; t < Math.max(e.length, r.length); t++) {\n    const i = e[t] ?? 0, s = r[t] ?? 0;\n    if (i !== s) return i > s ? 1 : -1;\n  }\n  return 0;\n};\nclass BA {\n  /**\n   * Creates a new SVG exporter.\n   * @param p The p5.js instance\n   */\n  constructor(A) {\n    /**\n     * The p5.js instance.\n     */\n    o(this, \"_p\");\n    this._p = A;\n  }\n  /**\n   * Generates the current ASCII output as an SVG string without downloading.\n   * @param rendererManager The renderer manager containing framebuffers with ASCII data\n   * @param grid The grid information for dimensions and cell sizes\n   * @param fontManager The font manager with character data\n   * @param backgroundColor The background color for the SVG\n   * @param options Options for SVG generation (excludes filename)\n   * @returns SVG string representation of the ASCII output\n   */\n  generateSVG(A, e, r, t, i = {}) {\n    const s = {\n      includeBackgroundRectangles: !0,\n      drawMode: \"fill\",\n      strokeWidth: 1,\n      ...i\n    }, a = A.characterFramebuffer, E = A.primaryColorFramebuffer, Q = A.secondaryColorFramebuffer, h = A.transformFramebuffer, c = A.rotationFramebuffer;\n    a.loadPixels(), E.loadPixels(), Q.loadPixels(), h.loadPixels(), c.loadPixels();\n    const p = a.pixels, d = E.pixels, l = Q.pixels, _ = h.pixels, B = c.pixels, C = e.cols, f = e.rows, b = e.cellWidth, D = e.cellHeight, I = e.width, G = e.height, y = r.characters;\n    let F = this.generateSVGHeader(I, G);\n    if (s.includeBackgroundRectangles) {\n      const M = t, w = this._p.color(M), m = `rgba(${w._array[0] * 255},${w._array[1] * 255},${w._array[2] * 255},${w._array[3]})`;\n      F += `\n<rect width=\"${I}\" height=\"${G}\" fill=\"${m}\" />`;\n    }\n    F += `\n<g id=\"ascii-cells\">`;\n    let u = 0;\n    for (let M = 0; M < f; M++)\n      for (let w = 0; w < C; w++) {\n        const m = u * 4, H = p[m], V = p[m + 1];\n        let x = H + (V << 8);\n        x >= y.length && (x = y.length - 1);\n        let N = {\n          r: d[m],\n          g: d[m + 1],\n          b: d[m + 2],\n          a: d[m + 3]\n        }, $ = {\n          r: l[m],\n          g: l[m + 1],\n          b: l[m + 2],\n          a: l[m + 3]\n        };\n        const q = _[m], W = _[m + 1], AA = _[m + 2], eA = q === 255, rA = W === 255, tA = AA === 255;\n        if (eA) {\n          const FA = N;\n          N = $, $ = FA;\n        }\n        const iA = B[m], sA = B[m + 1], oA = iA + sA / 255, nA = Math.round(oA * 360 / 255 * 100) / 100, aA = w * b, yA = M * D;\n        F += this.generateSVGCellContent(\n          x,\n          N,\n          $,\n          aA,\n          yA,\n          b,\n          D,\n          nA,\n          rA,\n          tA,\n          r,\n          y[x],\n          s\n        ), u++;\n      }\n    return F += `\n</g>\n</svg>`, F;\n  }\n  /**\n   * Exports the current ASCII output as an SVG file.\n   * @param rendererManager The renderer manager containing framebuffers with ASCII data\n   * @param grid The grid information for dimensions and cell sizes\n   * @param fontManager The font manager with character data\n   * @param options Options for SVG export or just the filename as a string for backward compatibility\n   */\n  saveSVG(A, e, r, t, i) {\n    if (!i.filename) {\n      const a = /* @__PURE__ */ new Date(), E = a.toISOString().split(\"T\")[0], Q = a.toTimeString().split(\" \")[0].replace(/:/g, \"-\");\n      i.filename = `asciify_output_${E}_${Q}`;\n    }\n    const s = this.generateSVG(A, e, r, t, i);\n    this.downloadSVG(s, i.filename);\n  }\n  /**\n   * Generates the SVG header content\n   * @param width The width of the SVG\n   * @param height The height of the SVG\n   * @returns The SVG header content\n   */\n  generateSVGHeader(A, e) {\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"${A}\" height=\"${e}\" viewBox=\"0 0 ${A} ${e}\" \n     xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n<title>ascii art generated via p5.asciify</title>\n<desc>ascii art visualization of a p5.js sketch</desc>`;\n  }\n  /**\n   * Generates the SVG content for a single cell\n   * @param charIndex The index of the character in the font atlas\n   * @param primaryColor The foreground color for the cell\n   * @param secondaryColor The background color for the cell\n   * @param cellX The x position of the cell\n   * @param cellY The y position of the cell\n   * @param cellWidth The width of the cell\n   * @param cellHeight The height of the cell\n   * @param rotation The rotation angle for the character\n   * @param fontManager The font manager\n   * @param char The characters object array\n   * @param options The SVG export options\n   * @returns The SVG content for the cell\n   */\n  generateSVGCellContent(A, e, r, t, i, s, a, E, Q, h, c, p, d) {\n    let l = \"\";\n    if (d.includeBackgroundRectangles && r.a > 0) {\n      const D = `rgba(${r.r},${r.g},${r.b},${r.a / 255})`;\n      d.drawMode === \"stroke\" ? l += `\n  <rect x=\"${t}\" y=\"${i}\" width=\"${s}\" height=\"${a}\" stroke=\"${D}\" fill=\"none\" stroke-width=\"${d.strokeWidth || 1}\" />` : l += `\n  <rect x=\"${t}\" y=\"${i}\" width=\"${s}\" height=\"${a}\" fill=\"${D}\" />`;\n    }\n    const _ = t + s / 2, B = i + a / 2, C = `rgba(${e.r},${e.g},${e.b},${e.a / 255})`, f = [];\n    if (Q || h) {\n      const D = Q ? -1 : 1, I = h ? -1 : 1;\n      f.push(`translate(${_} ${B})`), f.push(`scale(${D} ${I})`), f.push(`translate(${-_} ${-B})`);\n    }\n    E && f.push(`rotate(${E} ${_} ${B})`);\n    const b = f.length ? ` transform=\"${f.join(\" \")}\"` : \"\";\n    if (d.drawMode === \"text\") {\n      const D = Math.min(s, a) * 0.8;\n      l += `\n  <text x=\"${_}\" y=\"${B}\" font-family=\"monospace\" font-size=\"${D}px\" fill=\"${C}\" text-anchor=\"middle\" dominant-baseline=\"middle\"${b}>${this.escapeXml(p.character)}</text>`;\n    } else {\n      let D = 1;\n      R(j(this._p)) ? D = c.fontSize / c.font.data.head.unitsPerEm : D = c.fontSize / c.font.font.unitsPerEm;\n      const I = t + (s - p.advanceWidth * D) / 2, G = i + (a + c.fontSize * 0.7) / 2, u = p.getPath(I, G, c.fontSize).toSVG().match(/d=\"([^\"]+)\"/);\n      if (u && u[1]) {\n        if (b && (l += `\n  <g${b}>`), d.drawMode === \"stroke\") {\n          const M = d.strokeWidth || 1, w = `path-${A}-${t}-${i}`.replace(/\\./g, \"-\");\n          l += `\n    <path id=\"${w}\" d=\"${u[1]}\" stroke=\"${C}\" stroke-width=\"${M}\" fill=\"none\" />`;\n        } else\n          l += `\n    <path d=\"${u[1]}\" fill=\"${C}\" />`;\n        b && (l += `\n  </g>`);\n      }\n    }\n    return l;\n  }\n  /**\n   * Escapes special XML characters in a string\n   * @param str The string to escape\n   * @returns The escaped string\n   */\n  escapeXml(A) {\n    return A.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&apos;\");\n  }\n  /**\n   * Creates a downloadable SVG file and initiates the download\n   * @param svgContent The SVG content to download\n   * @param filename The filename for the SVG file\n   */\n  downloadSVG(A, e) {\n    const r = new Blob([A], { type: \"image/svg+xml\" }), t = URL.createObjectURL(r), i = document.createElement(\"a\");\n    i.href = t, i.download = `${e}.svg`, document.body.appendChild(i), i.click(), document.body.removeChild(i), URL.revokeObjectURL(t);\n  }\n}\nclass QA {\n  /**\n   * Creates a new JSON exporter.\n   * @param p The p5.js instance\n   */\n  constructor(A) {\n    /**\n     * The p5.js instance.\n     */\n    o(this, \"p\");\n    this.p = A;\n  }\n  /**\n   * Generates the current ASCII output as a JSON string without downloading.\n   * @param rendererManager The renderer manager containing framebuffers with ASCII data\n   * @param grid The grid information for dimensions and cell sizes\n   * @param fontManager The font manager with character data\n   * @param options Options for JSON generation (excludes filename)\n   * @returns JSON string representation of the ASCII output\n   */\n  generateJSON(A, e, r, t = {}) {\n    const i = {\n      includeEmptyCells: !0,\n      prettyPrint: !0,\n      ...t\n    }, s = A.characterFramebuffer, a = A.primaryColorFramebuffer, E = A.secondaryColorFramebuffer, Q = A.transformFramebuffer, h = A.rotationFramebuffer;\n    s.loadPixels(), a.loadPixels(), E.loadPixels(), Q.loadPixels(), h.loadPixels();\n    const c = s.pixels, p = a.pixels, d = E.pixels, l = Q.pixels, _ = h.pixels, B = e.cols, C = e.rows, f = r.characters, b = {\n      version: \"1.0\",\n      created: (/* @__PURE__ */ new Date()).toISOString(),\n      gridSize: {\n        cols: B,\n        rows: C,\n        cellWidth: e.cellWidth,\n        cellHeight: e.cellHeight,\n        width: e.width,\n        height: e.height\n      }\n    }, D = [];\n    let I = 0;\n    for (let y = 0; y < C; y++)\n      for (let F = 0; F < B; F++) {\n        const u = I * 4, M = c[u], w = c[u + 1];\n        let m = M + (w << 8);\n        m >= f.length && (m = f.length - 1);\n        const H = f[m];\n        if (!i.includeEmptyCells && (H.character === \" \" || H.character === \"\")) {\n          I++;\n          continue;\n        }\n        let V = {\n          r: p[u],\n          g: p[u + 1],\n          b: p[u + 2],\n          a: p[u + 3]\n        }, x = {\n          r: d[u],\n          g: d[u + 1],\n          b: d[u + 2],\n          a: d[u + 3]\n        };\n        const N = l[u], $ = l[u + 1], q = l[u + 2], W = N === 255, AA = $ === 255, eA = q === 255;\n        if (W) {\n          const aA = V;\n          V = x, x = aA;\n        }\n        const rA = _[u], tA = _[u + 1], iA = rA + tA / 255, sA = Math.round(iA * 360 / 255 * 100) / 100, oA = this.rgbaToHex(\n          V.r,\n          V.g,\n          V.b,\n          V.a\n        ), nA = this.rgbaToHex(\n          x.r,\n          x.g,\n          x.b,\n          x.a\n        );\n        D.push({\n          x: F,\n          y,\n          character: H.character,\n          unicode: H.unicode,\n          color: oA,\n          backgroundColor: nA,\n          rotation: sA,\n          inverted: W,\n          flipHorizontal: AA,\n          flipVertical: eA\n        }), I++;\n      }\n    return JSON.stringify(\n      {\n        metadata: b,\n        cells: D\n      },\n      null,\n      i.prettyPrint ? 2 : 0\n    );\n  }\n  /**\n   * Exports the current ASCII output as a JSON file.\n   * @param rendererManager The renderer manager containing framebuffers with ASCII data\n   * @param grid The grid information for dimensions and cell sizes\n   * @param fontManager The font manager with character data\n   * @param options Options for JSON export\n   */\n  saveJSON(A, e, r, t = {}) {\n    if (!t.filename) {\n      const s = /* @__PURE__ */ new Date(), a = s.toISOString().split(\"T\")[0], E = s.toTimeString().split(\" \")[0].replace(/:/g, \"-\");\n      t.filename = `asciify_output_${a}_${E}`;\n    }\n    const i = this.generateJSON(A, e, r, t);\n    this.downloadJSON(i, t.filename);\n  }\n  /**\n   * Converts RGBA values to a hex color string\n   * @param r Red channel (0-255)\n   * @param g Green channel (0-255)\n   * @param b Blue channel (0-255)\n   * @param a Alpha channel (0-255)\n   * @returns Hex color string (e.g., \"#RRGGBBAA\")\n   */\n  rgbaToHex(A, e, r, t) {\n    const i = (s) => {\n      const a = Math.round(s).toString(16);\n      return a.length === 1 ? \"0\" + a : a;\n    };\n    return `#${i(A)}${i(e)}${i(r)}${i(t)}`;\n  }\n  /**\n   * Creates a downloadable JSON file and initiates the download\n   * @param jsonContent The JSON content to download\n   * @param filename The filename for the JSON file\n   */\n  downloadJSON(A, e) {\n    const r = new Blob([A], { type: \"application/json\" }), t = URL.createObjectURL(r), i = document.createElement(\"a\");\n    i.href = t, i.download = `${e}.json`, document.body.appendChild(i), i.click(), document.body.removeChild(i), URL.revokeObjectURL(t);\n  }\n}\nfunction PA(n, A) {\n  const e = n.data.cmap;\n  if (!e || !e.tables) return 0;\n  for (const r of e.tables)\n    if (r.format === 4) {\n      for (let t = 0; t < r.startCount.length; t++)\n        if (A >= r.startCount[t] && A <= r.endCount[t]) {\n          if (r.idRangeOffset[t] === 0)\n            return A + r.idDelta[t] & 65535;\n          {\n            const i = r.idRangeOffset[t] / 2 + (A - r.startCount[t]) - (r.startCount.length - t);\n            if (i >= 0 && i < r.glyphIdArray.length) {\n              const s = r.glyphIdArray[i];\n              if (s !== 0)\n                return s + r.idDelta[t] & 65535;\n            }\n          }\n        }\n    }\n  return 0;\n}\nfunction X() {\n  return {\n    getBoundingBox: () => ({ x1: 0, y1: 0, x2: 0, y2: 0 }),\n    toSVG: () => \"\"\n  };\n}\nfunction IA(n, A, e, r, t) {\n  if (!A || !A.xs || A.xs.length === 0)\n    return X();\n  const i = t / n.data.head.unitsPerEm;\n  return {\n    getBoundingBox: () => ({\n      x1: e + A.xMin * i,\n      y1: r + -A.yMax * i,\n      // Flip Y coordinates (TTF uses Y-up)\n      x2: e + A.xMax * i,\n      y2: r + -A.yMin * i\n      // Flip Y coordinates\n    }),\n    toSVG: () => bA(A, e, r, i)\n  };\n}\nfunction bA(n, A, e, r) {\n  if (!n || !n.xs) return \"\";\n  const { xs: t, ys: i, endPts: s, flags: a } = n;\n  if (!t || !i || !s || !a) return \"\";\n  let E = \"\", Q = 0;\n  for (let h = 0; h < s.length; h++) {\n    const c = s[h];\n    if (!(c < Q)) {\n      if (c >= Q) {\n        const p = A + t[Q] * r, d = e - i[Q] * r;\n        E += `M${p.toFixed(2)},${d.toFixed(2)}`;\n        let l = Q + 1;\n        for (; l <= c; )\n          if ((a[l] & 1) !== 0) {\n            const B = A + t[l] * r, C = e - i[l] * r;\n            E += `L${B.toFixed(2)},${C.toFixed(2)}`, l++;\n          } else {\n            const B = A + t[l] * r, C = e - i[l] * r;\n            let f = l + 1 > c ? Q : l + 1;\n            if ((a[f] & 1) !== 0) {\n              const D = A + t[f] * r, I = e - i[f] * r;\n              E += `Q${B.toFixed(2)},${C.toFixed(2)} ${D.toFixed(2)},${I.toFixed(2)}`, l = f + 1;\n            } else {\n              const D = A + t[f] * r, I = e - i[f] * r, G = (B + D) / 2, y = (C + I) / 2;\n              E += `Q${B.toFixed(2)},${C.toFixed(2)} ${G.toFixed(2)},${y.toFixed(2)}`, l = f;\n            }\n          }\n        E += \"Z\";\n      }\n      Q = c + 1;\n    }\n  }\n  return `<path d=\"${E}\" />`;\n}\nconst WA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  P5AsciifyJSONExporter: QA,\n  P5AsciifySVGExporter: BA,\n  compareVersions: O,\n  createEmptyPath: X,\n  createGlyphPath: IA,\n  detectP5Version: j,\n  getGlyphIndex: PA,\n  glyphToSVGPath: bA,\n  isP5AsyncCapable: R,\n  isValidP5Color: J,\n  isValidP5Font: pA\n}, Symbol.toStringTag, { value: \"Module\" }));\nclass Y extends Error {\n  constructor(e, r) {\n    super(e);\n    o(this, \"originalError\");\n    this.name = \"P5AsciifyError\", this.originalError = r;\n  }\n}\nvar fA = /* @__PURE__ */ ((n) => (n[n.SILENT = 0] = \"SILENT\", n[n.WARNING = 1] = \"WARNING\", n[n.ERROR = 2] = \"ERROR\", n[n.THROW = 3] = \"THROW\", n))(fA || {});\nconst T = class T {\n  constructor() {\n    o(this, \"_options\", {\n      globalLevel: 3,\n      consolePrefix: \"[p5.asciify]\"\n    });\n  }\n  static getInstance() {\n    return T._instance || (T._instance = new T()), T._instance;\n  }\n  /**\n   * Handle an error based on the configured settings\n   * @returns true if execution should continue, false if error was handled\n   */\n  _handle(A, e, r) {\n    switch (this._options.globalLevel, this._options.globalLevel) {\n      case 0:\n        return !1;\n      // Validation failed, handled silently\n      case 1:\n        return console.warn(`${this._options.consolePrefix} ${A}`, e), !1;\n      // Validation failed, warning logged\n      case 2:\n        return console.error(`${this._options.consolePrefix} ${A}`, e), !1;\n      // Validation failed, error logged\n      case 3:\n      default:\n        throw new Y(A, r);\n    }\n  }\n  /**\n   * Validate a condition and handle errors if validation fails\n   * @param condition The condition to validate\n   * @param message Error message if validation fails\n   * @param context Additional context for debugging\n   * @returns true if validation passed, false if validation failed and was handled\n   */\n  validate(A, e, r) {\n    return A ? !0 : (this._handle(e, r), !1);\n  }\n  /**\n   * Set global error level\n   */\n  setGlobalLevel(A) {\n    this._options.globalLevel = A;\n  }\n};\no(T, \"_instance\", null);\nlet Z = T;\nconst g = Z.getInstance(), KA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  P5AsciifyError: Y,\n  P5AsciifyErrorHandler: Z,\n  P5AsciifyErrorLevel: fA,\n  errorHandler: g\n}, Symbol.toStringTag, { value: \"Module\" }));\nclass kA {\n  /**\n   * Creates a new `P5AsciifyFontManager` instance.\n   * @param _p The p5 instance.\n   * @param _font The font to use for ASCII rendering.\n   * @ignore\n   */\n  constructor(A, e) {\n    /** An array of supported characters in the font. */\n    o(this, \"_characters\", []);\n    /** Maximum width and height of the glyphs in the font. */\n    o(this, \"_maxGlyphDimensions\");\n    /** Texture containing all characters in the font. As square as possible. */\n    o(this, \"_texture\");\n    /** Number of columns in the texture. */\n    o(this, \"_textureColumns\");\n    /** Number of rows in the texture. */\n    o(this, \"_textureRows\");\n    /** Font size to use for the texture that contains all characters of the font. */\n    o(this, \"_fontSize\", 16);\n    this._p = A, this._font = e, this._initializeGlyphsAndCharacters();\n  }\n  /**\n   * Sets up the font manager with the specified font size \n   * and initializes the texture containing all characters in the font.\n   * @param fontSize The font size to use for the texture.\n   * @ignore\n   */\n  async setup(A) {\n    return this._fontSize = A, this.reset();\n  }\n  /**\n   * Initializes the character glyphs and characters array.\n   */\n  _initializeGlyphsAndCharacters() {\n    if (R(j(this._p))) {\n      const A = [], e = /* @__PURE__ */ new Map();\n      this._font.data.cmap.tables.forEach((t) => {\n        if (t.format === 4)\n          for (let i = 0; i < t.startCount.length; i++) {\n            const s = t.startCount[i], a = t.endCount[i];\n            if (!(s === 65535 && a === 65535))\n              for (let E = s; E <= a; E++) {\n                const Q = String.fromCodePoint(E), h = PA(this._font, E);\n                h && h > 0 && (A.push(Q), e.set(Q, h));\n              }\n          }\n      });\n      const r = [...new Set(A)];\n      this._characters = r.map((t, i) => {\n        const s = t.codePointAt(0), a = e.get(t);\n        let E = 0;\n        a !== void 0 && this._font.data.hmtx && this._font.data.hmtx.aWidth && (E = this._font.data.hmtx.aWidth[a]);\n        const Q = i % 256, h = Math.floor(i / 256) % 256, c = Math.floor(i / 65536);\n        return {\n          character: t,\n          unicode: s,\n          // Create a path generator for this glyph\n          getPath: (p, d, l) => {\n            if (a === void 0) return X();\n            const _ = this._font.data.glyf[a];\n            return _ ? IA(this._font, _, p, d, l) : X();\n          },\n          advanceWidth: E,\n          color: this._p.color(Q, h, c)\n        };\n      });\n    } else {\n      const A = Object.values(this._font.font.glyphs.glyphs);\n      this._characters = [], A.forEach((e, r) => {\n        if (!e.unicode && (!e.unicodes || !e.unicodes.length))\n          return;\n        const t = this._characters.length, i = t % 256, s = Math.floor(t / 256) % 256, a = Math.floor(t / 65536), E = e.unicode ?? e.unicodes[0];\n        this._characters.push({\n          character: String.fromCodePoint(E),\n          unicode: E,\n          getPath: (Q, h, c) => e.getPath(Q, h, c),\n          advanceWidth: e.advanceWidth,\n          color: this._p.color(i, s, a)\n        });\n      });\n    }\n  }\n  /**\n   * Loads a font for ASCII rendering.\n   * \n   * Not intended to be called directly. Use {@link P5Asciifier}'s `font()` instead.\n   * Otherwise, other parts of the library are not updated with the new font information.\n   * \n   * @param font The p5.Font object to use for ASCII rendering.\n   * @ignore\n   */\n  loadFont(A) {\n    g.validate(\n      pA(this._p, A),\n      \"Invalid font parameter. Expected a p5.Font object.\",\n      { providedValue: A, method: \"loadFont\" }\n    ) && (this._font = A, this._initializeGlyphsAndCharacters());\n  }\n  /**\n   * Gets the color of a character in the font.\n   * @param char The character to get the color for.\n   * @returns An array containing the RGB color values for the character, \n   *          which can be used to set the fill color when drawing to a custom renderers `characterFramebuffer` \n   *          to convert those pixels into the selected character.\n   * @throws If the character is not found in the font.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Get the RGB color of the character 'A'\n   *      const color = p5asciify.asciifier().fontManager.glyphColor('A');\n   *      console.log(color);\n   *  }\n   * ```\n   */\n  glyphColor(A) {\n    if (!g.validate(\n      typeof A == \"string\" && A.length > 0,\n      \"Character must be a non-empty string.\",\n      { providedValue: A, method: \"glyphColor\" }\n    ))\n      return this._p.color(0);\n    const r = this._characters.find(\n      (i) => i.character === A\n    );\n    return g.validate(\n      r !== void 0,\n      (() => {\n        const i = A.codePointAt(0), s = i ? i.toString(16).padStart(4, \"0\") : \"unknown\";\n        return `Could not find character in character set: ${A} (U+${s})`;\n      })(),\n      { providedValue: A, method: \"glyphColor\" }\n    ) ? r.color : this._p.color(0);\n  }\n  /**\n   * Gets an array of RGB colors for a given string of characters.\n   * @param characters - A string of characters.\n   * @returns Array of RGB color values.\n   * @throws If a character is not found in the fonts available characters.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Get the RGB colors for the characters 'ABC'\n   *      const colors = p5asciify.asciifier().fontManager.glyphColors('ABC');\n   *      console.log(colors);\n   *  }\n   * ```\n   */\n  glyphColors(A = \"\") {\n    if (!g.validate(\n      typeof A == \"string\" || Array.isArray(A),\n      \"Characters must be a string or array of strings.\",\n      { providedValue: A, method: \"glyphColors\" }\n    ))\n      return [this._p.color(0)];\n    const r = [];\n    for (const t of Array.from(A)) {\n      const i = this.glyphColor(t);\n      r.push(i);\n    }\n    return r;\n  }\n  /**\n       * Calculates the maximum width and height of all the glyphs in the font.\n       * @param fontSize - The font size to use for calculations.\n       * @returns An object containing the maximum width and height of the glyphs.\n       */\n  _getMaxGlyphDimensions(A) {\n    this._p.textFont(this._font), this._p.textSize(A);\n    let e = 0, r = 0;\n    for (const t of this._characters) {\n      const i = this._font.textBounds(t.character, 0, 0, A), s = i.h, a = i.w;\n      e = Math.max(e, a), r = Math.max(r, s);\n    }\n    return {\n      width: Math.ceil(e),\n      height: Math.ceil(r)\n    };\n  }\n  /**\n   * Resets the texture atlas by recalculating the maximum glyph dimensions and recreating the texture.\n   * @ignore\n   */\n  async reset() {\n    return this._maxGlyphDimensions = this._getMaxGlyphDimensions(this._fontSize), this._createTexture(this._fontSize);\n  }\n  /**\n   * Sets the font size, recalculates the maximum glyph dimensions, and recreates the texture.\n   * @param fontSize - The new font size.\n   * @ignore\n   */\n  async setFontSize(A) {\n    return this._fontSize = A, this._maxGlyphDimensions = this._getMaxGlyphDimensions(this._fontSize), this._createTexture(this._fontSize);\n  }\n  /**\n   * Creates a texture containing all characters in the font, arranged in a 2d grid that is as square as possible.\n   * @param fontSize - The font size to use for creating the texture.\n   */\n  async _createTexture(A) {\n    this._textureColumns = Math.ceil(Math.sqrt(this.characters.length)), this._textureRows = Math.ceil(this.characters.length / this._textureColumns), this._texture ? this._texture.resize(this._maxGlyphDimensions.width * this._textureColumns, this._maxGlyphDimensions.height * this._textureRows) : this._texture = this._p.createFramebuffer({\n      width: this._maxGlyphDimensions.width * this._textureColumns,\n      height: this._maxGlyphDimensions.height * this._textureRows,\n      depthFormat: this._p.UNSIGNED_INT,\n      textureFiltering: this._p.NEAREST\n    }), this._texture.begin(), this._p.clear(), this._p.textFont(this._font), this._p.fill(255), this._p.textSize(A), this._p.textAlign(this._p.LEFT, this._p.TOP), this._p.noStroke();\n    for (let e = 0; e < this._characters.length; e++) {\n      const r = e % this._textureColumns, t = Math.floor(e / this._textureColumns), i = this._maxGlyphDimensions.width * r - this._maxGlyphDimensions.width * this._textureColumns / 2, s = this._maxGlyphDimensions.height * t - this._maxGlyphDimensions.height * this._textureRows / 2;\n      this._p.text(this._characters[e].character, i, s);\n    }\n    this._texture.end();\n  }\n  /**\n   * Returns the maximum width and height found in all the glyphs in the font.\n   */\n  get maxGlyphDimensions() {\n    return this._maxGlyphDimensions;\n  }\n  /**\n   * Returns the texture containing all characters in the font.\n   */\n  get texture() {\n    return this._texture;\n  }\n  /**\n   * Returns the number of columns in the texture containing all characters in the font.\n   */\n  get textureColumns() {\n    return this._textureColumns;\n  }\n  /**\n   * Returns the number of rows in the texture containing all characters in the font.\n   */\n  get textureRows() {\n    return this._textureRows;\n  }\n  /**\n   * Returns the font size used for the texture containing all characters in the font.\n   */\n  get fontSize() {\n    return this._fontSize;\n  }\n  /**\n   * The `p5.Font` object used for ASCII rendering.\n   * \n   * @example\n   * ```javascript\n   *  function drawAsciify() {\n   *      // Draw an FPS counter, using the font set in p5.asciify, on top of the ASCII rendering.\n   *      textFont(p5asciify.asciifier().fontManager.font);\n   *      textSize(16);\n   *      fill(255);\n   *      text(frameRate() + \" FPS\", 10, 10);\n   *  }\n   * ```\n   */\n  get font() {\n    return this._font;\n  }\n  /**\n   * An array of supported characters in the set font with additional information like unicode, and RGB color values.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Print the supported characters in the font to the console\n   *      console.log(p5asciify.asciifier().fontManager.characters);\n   *  }\n   * ```\n   */\n  get characters() {\n    return this._characters;\n  }\n  /**\n   * Returns all supported characters in the font as a single string.\n   * Useful for quick access to the complete character set or for iteration purposes.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Get all supported characters as a string\n   *      const allChars = p5asciify.asciifier().fontManager.charactersString;\n   *      console.log(\"Font supports these characters:\", allChars);\n   *      console.log(\"Total character count:\", allChars.length);\n   *  }\n   * ```\n   */\n  get charactersString() {\n    return this._characters.map((A) => A.character).join(\"\");\n  }\n}\nclass uA {\n  /**\n   * Constructs a new ASCII renderer instance. Called by derived classes.\n   * @param _p The p5 instance.\n   * @param _grid Grid object containing the relevant grid information.\n   * @param _fontManager The font manager instance containing the ASCII characters texture.\n   * @param _options The options for the ASCII renderer.\n   * @ignore\n   */\n  constructor(A, e, r, t, i) {\n    /** The primary color framebuffer, whose pixels define the character colors of the grid cells. */\n    o(this, \"_primaryColorFramebuffer\");\n    /** The secondary color framebuffer, whose pixels define the background colors of the grid cells. */\n    o(this, \"_secondaryColorFramebuffer\");\n    /** The character framebuffer, whose pixels define the ASCII characters to use in the grid cells. */\n    o(this, \"_characterFramebuffer\");\n    /** The transform framebuffer, where each pixels color channel defines a different transformation:\n     * - Red channel: Swap the character and background colors of the grid cells.\n     * - Green channel: Flip the ASCII characters horizontally.\n     * - Blue channel: Flip the ASCII characters vertically.\n     */\n    o(this, \"_transformFramebuffer\");\n    /** The rotation framebuffer, whose pixels define the rotation angle of the characters in the grid. */\n    o(this, \"_rotationFramebuffer\");\n    /**\n     * Framebuffer settings used to configure all internal framebuffers for the renderer.\n     * \n     * These settings are passed to `p5.createFramebuffer()` when creating or recreating framebuffers.\n     * \n     * **Note:** The `width`, `height`, and `density` properties are managed internally and always match the grid size and pixel density.\n     * \n     * Properties:\n     * - `format` (number): Data format of the texture. Either `UNSIGNED_BYTE`, `FLOAT`, or `HALF_FLOAT`. Default is `UNSIGNED_BYTE`.\n     * - `channels` (number): Whether to store `RGB` or `RGBA` color channels. Default is to match the main canvas, which is `RGBA`.\n     * - `depth` (boolean): Whether to include a depth buffer. Default is `true`.\n     * - `depthFormat` (number): Data format of depth information. Either `UNSIGNED_INT` or `FLOAT`. Default is `UNSIGNED_INT`.\n     * - `stencil` (boolean): Whether to include a stencil buffer for masking. `depth` must be `true` for this feature to work. Defaults to the value of `depth` (which is `true`).\n     * - `antialias` (boolean): Whether to perform anti-aliasing. If set to `true`, 2 samples will be used by default. The number of samples can also be set (e.g., 4). Default is `false`.\n     * - `textureFiltering` (number): How to read values from the framebuffer. Either `LINEAR` (nearby pixels will be interpolated) or `NEAREST` (no interpolation). Default is `NEAREST`.\n     * - `width` (number): Width of the framebuffer. Always matches the grid columns.\n     * - `height` (number): Height of the framebuffer. Always matches the grid rows.\n     * - `density` (number): Pixel density of the framebuffer. Always matches the main canvas pixel density.\n     */\n    o(this, \"_framebufferOptions\");\n    this._p = A, this._captureFramebuffer = e, this._grid = r, this._fontManager = t, this._options = i, this._framebufferOptions = {\n      antialias: !1,\n      textureFiltering: this._p.NEAREST,\n      depthFormat: this._p.UNSIGNED_INT,\n      density: 1,\n      width: this._grid.cols,\n      height: this._grid.rows\n    }, this._recreateFramebuffers();\n  }\n  /**\n   * Recreate all internal framebuffers used by the renderer.\n   */\n  _recreateFramebuffers() {\n    const A = {\n      ...this._framebufferOptions,\n      density: 1,\n      width: this._grid.cols,\n      height: this._grid.rows\n    };\n    this._primaryColorFramebuffer = this._p.createFramebuffer(A), this._secondaryColorFramebuffer = this._p.createFramebuffer(A), this._transformFramebuffer = this._p.createFramebuffer(A), this._characterFramebuffer = this._p.createFramebuffer(A), this._rotationFramebuffer = this._p.createFramebuffer(A);\n  }\n  /**\n   * Updates renderer options.\n   * @param newOptions - The new options to update.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Update the brightness renderer options\n   *      p5asciify.asciifier().renderers().get(\"brightness\").update({\n   *          enabled: true,\n   *          characterColor: color(255, 0, 0),\n   *          backgroundColor: color(0, 0, 255),\n   *          characters: '.:-=+*#%@',\n   *          invert: true,\n   *          rotation: 90,\n   *          // ...\n   *      });\n   *  }\n   * ```\n   */\n  update(A) {\n    return (A == null ? void 0 : A.enabled) !== void 0 && this.enabled(A.enabled), this;\n  }\n  /**\n   * Update the capture framebuffer used by the renderer.\n   * @param newCaptureFramebuffer - The new capture framebuffer or graphics to use.\n   * @ignore\n   */\n  setCaptureTexture(A) {\n    return this._captureFramebuffer = A, this.resizeFramebuffers(), this.resetShaders(), this;\n  }\n  /**\n   * Enable or disable the renderer.\n   * @param enabled - Whether to enable or disable the renderer.\n   * @returns The current/new state of the renderer.\n   * @throws If the provided enabled value is not a boolean.\n   * \n   * @example\n   * ```javascript\n   *  function keyPressed() {\n   *      if (key === 'd') {\n   *          // Disable the brightness renderer\n   *          p5asciify.asciifier().renderers().get(\"brightness\").enabled(false);\n   *      } else if (key === 'e') {\n   *          // Enable the brightness renderer\n   *          p5asciify.asciifier().renderers().get(\"brightness\").enabled(true);\n   *      }\n   *  }\n   * ```\n   */\n  enabled(A) {\n    if (A === void 0)\n      return this;\n    if (!g.validate(\n      typeof A == \"boolean\",\n      \"Enabled must be a boolean.\",\n      { providedValue: A, method: \"enabled\" }\n    ))\n      return this;\n    if (this._options.enabled = A, !A) {\n      const r = [\n        this._primaryColorFramebuffer,\n        this._secondaryColorFramebuffer,\n        this._transformFramebuffer,\n        this._rotationFramebuffer,\n        this._characterFramebuffer\n      ];\n      for (const t of r)\n        t.draw(() => {\n          this._p.clear();\n        });\n    }\n    return this;\n  }\n  /**\n   * Enable the renderer.\n   * @returns The new state of the renderer.\n   * \n   * @example\n   * ```javascript\n   *  function keyPressed() {\n   *      if (key === 'd') {\n   *          // Disable the brightness renderer\n   *          p5asciify.asciifier().renderers().get(\"brightness\").disable();\n   *      } else if (key === 'e') {\n   *          // Enable the brightness renderer\n   *          p5asciify.asciifier().renderers().get(\"brightness\").enable();\n   *      }\n   *  }\n   * ```\n   */\n  enable() {\n    return this.enabled(!0);\n  }\n  /**\n   * Disable the renderer.\n   * \n   * Disabling the renderer will clear all framebuffers, \n   * and prevent the renderer from being executed in the rendering pipeline.\n   * \n   * @returns The new state of the renderer.\n   * \n   * @example\n   * ```javascript\n   *  function keyPressed() {\n   *      if (key === 'd') {\n   *          // Disable the brightness renderer\n   *          p5asciify.asciifier().renderers().get(\"brightness\").disable();\n   *      } else if (key === 'e') {\n   *          // Enable the brightness renderer\n   *          p5asciify.asciifier().renderers().get(\"brightness\").enable();\n   *      }\n   *  }\n   * ```\n   */\n  disable() {\n    return this.enabled(!1);\n  }\n  /**\n   * Get the set options for the ASCII renderer.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Get the brightness renderer options\n   *      const brightnessOptions = p5asciify.asciifier().renderers().get(\"brightness\").options();\n   *      console.log(brightnessOptions);\n   *  }\n   * ```\n   */\n  get options() {\n    return this._options;\n  }\n  /**\n   * Get the primary color framebuffer, whose pixels define the character colors of the grid cells.\n   * \n   * Pre-built ASCII renderers like `'brightness'` write to this buffer automatically based on your settings. \n   * In `'custom2D'` renderers, you must write to it manually in your `draw()` function.\n   * \n   * @example\n   * ```javascript\n   *  let characterFramebuffer;\n   *  let primaryColorFramebuffer;\n   *  let secondaryColorFramebuffer;\n   *  \n   *  let asciifier;\n   * \n   *  function setup() {\n   *      createCanvas(400, 400, WEBGL);\n   *  }\n   * \n   *  function setupAsciify() {\n   *      // Get the asciifier instance\n   *      asciifier = p5asciify.asciifier();\n   * \n   *      // Enable the default custom renderer\n   *      asciifier.renderers().get(\"custom2D\").enable();\n   *      \n   *      // Assign the ascii renderer's framebuffers to a global variable\n   *      characterFramebuffer = asciifier.renderers().get(\"custom2D\").characterFramebuffer;\n   *      primaryColorFramebuffer = asciifier.renderers().get(\"custom2D\").primaryColorFramebuffer;\n   *      secondaryColorFramebuffer = asciifier.renderers().get(\"custom2D\").secondaryColorFramebuffer;\n   *  }\n   * \n   *  function draw() {\n   *      // Draw a rectangle with the character 'A' to the character framebuffer\n   *      characterFramebuffer.begin();\n   *      clear();\n   *      asciifier.fill(\"A\");\n   *      rect(0, 0, 100, 100);\n   *      characterFramebuffer.end();\n   * \n   *      // Makes all ascii characters on the grid white.\n   *      primaryColorFramebuffer.begin();\n   *      background(255);\n   *      primaryColorFramebuffer.end();\n   * \n   *      // Makes all cell background colors black.\n   *      secondaryColorFramebuffer.begin();\n   *      background(0);\n   *      secondaryColorFramebuffer.end();\n   *  }\n   * ```\n   */\n  get primaryColorFramebuffer() {\n    return this._primaryColorFramebuffer;\n  }\n  /**\n   * Get the secondary color framebuffer, whose pixels define the background colors of the grid cells.\n   * \n   * Pre-built ASCII renderers like `'brightness'` write to this buffer automatically based on your settings. \n   * In `'custom2D'` renderers, you must write to it manually in your `draw()` function.\n   * \n   * @example\n   * ```javascript\n   *  let characterFramebuffer;\n   *  let primaryColorFramebuffer;\n   *  let secondaryColorFramebuffer;\n   * \n   *  let asciifier;\n   * \n   *  function setup() {\n   *      createCanvas(400, 400, WEBGL);\n   *  }\n   * \n   *  function setupAsciify() {\n   *      // Get the asciifier instance\n   *      asciifier = p5asciify.asciifier();\n   * \n   *      // Enable the default custom renderer\n   *      asciifier.renderers().get(\"custom2D\").enable();\n   *      \n   *      // Assign the ascii renderer's framebuffers to a global variable\n   *      characterFramebuffer = asciifier.renderers().get(\"custom2D\").characterFramebuffer;\n   *      primaryColorFramebuffer = asciifier.renderers().get(\"custom2D\").primaryColorFramebuffer;\n   *      secondaryColorFramebuffer = asciifier.renderers().get(\"custom2D\").secondaryColorFramebuffer;\n   *  }\n   * \n   *  function draw() {\n   *      // Draw a rectangle with the character 'A' to the character framebuffer\n   *      characterFramebuffer.begin();\n   *      clear();\n   *      asciifier.fill(\"A\");\n   *      rect(0, 0, 100, 100);\n   *      characterFramebuffer.end();\n   * \n   *      // Makes all ascii characters on the grid white.\n   *      primaryColorFramebuffer.begin();\n   *      background(255);\n   *      primaryColorFramebuffer.end();\n   * \n   *      // Makes all cell background colors black.\n   *      secondaryColorFramebuffer.begin();\n   *      background(0);\n   *      secondaryColorFramebuffer.end();\n   *  }\n   * ```\n   */\n  get secondaryColorFramebuffer() {\n    return this._secondaryColorFramebuffer;\n  }\n  /**\n   * Get the transform framebuffer, where each pixels color channel defines a different transformation:\n   * - Red channel: Swap the character and background colors of the grid cells.\n   * - Green channel: Flip the ASCII characters horizontally.\n   * - Blue channel: Flip the ASCII characters vertically.\n   * \n   * Pre-built ASCII renderers like `'brightness'` write to this buffer automatically based on your settings. \n   * In `'custom2D'` renderers, you must write to it manually in your `draw()` function.\n   * \n   * @example\n   * ```javascript\n   *  let characterFramebuffer;\n   *  let primaryColorFramebuffer;\n   *  let secondaryColorFramebuffer;\n   *  let transformFramebuffer;\n   * \n   *  let asciifier;\n   * \n   *  function setup() {\n   *      createCanvas(400, 400, WEBGL);\n   *  }\n   * \n   *  function setupAsciify() {\n   * \n   *      // Get the asciifier instance\n   *      asciifier = p5asciify.asciifier();\n   * \n   *      // Enable the default custom renderer\n   *      asciifier.renderers().get(\"custom2D\").enable();\n   *      \n   *      // Assign the ascii renderer's framebuffers to a global variable\n   *      characterFramebuffer = asciifier.renderers().get(\"custom2D\").characterFramebuffer;\n   *      primaryColorFramebuffer = asciifier.renderers().get(\"custom2D\").primaryColorFramebuffer;\n   *      secondaryColorFramebuffer = asciifier.renderers().get(\"custom2D\").secondaryColorFramebuffer;\n   *      transformFramebuffer = asciifier.renderers().get(\"custom2D\").transformFramebuffer;\n   *  }\n   * \n   *  function draw() {\n   *      // Draw a rectangle with the character 'A' to the character framebuffer\n   *      characterFramebuffer.begin();\n   *      clear();\n   *      asciifier.fill(\"A\");\n   *      rect(0, 0, 100, 100);\n   *      characterFramebuffer.end();\n   * \n   *      // Makes all ascii characters on the grid white.\n   *      primaryColorFramebuffer.begin();\n   *      background(255);\n   *      primaryColorFramebuffer.end();\n   * \n   *      // Makes all cell background colors black.\n   *      secondaryColorFramebuffer.begin();\n   *      background(0);\n   *      secondaryColorFramebuffer.end();\n   * \n   *      // Swap the character and background colors of all grid cells,\n   *      // and flip the ASCII characters horizontally.\n   *      transformFramebuffer.begin();\n   *      background(255, 255, 0); \n   *      transformFramebuffer.end();\n   *  }\n   * ```\n   */\n  get transformFramebuffer() {\n    return this._transformFramebuffer;\n  }\n  /**\n   * Get the rotation framebuffer, whose pixels define the rotation angle of each character in the grid.\n   * \n   * Pre-built ASCII renderers like `'brightness'` write to this buffer automatically based on your settings. \n   * In `'custom2D'` renderers, you must write to it manually in your `draw()` function.\n   * \n   * @example\n   * ```javascript\n   *  let characterFramebuffer;\n   *  let primaryColorFramebuffer;\n   *  let secondaryColorFramebuffer;\n   *  let rotationFramebuffer;\n   * \n   *  let asciifier;\n   * \n   *  function setup() {\n   *      createCanvas(400, 400, WEBGL);\n   *  }\n   * \n   *  function setupAsciify() {\n   *      // Get the asciifier instance\n   *      asciifier = p5asciify.asciifier();\n   * \n   *      // Enable the default custom renderer\n   *      asciifier.renderers().get(\"custom2D\").enable();\n   *      \n   *      // Assign the ascii renderer's framebuffers to a global variable\n   *      characterFramebuffer = asciifier.renderers().get(\"custom2D\").characterFramebuffer;\n   *      primaryColorFramebuffer = asciifier.renderers().get(\"custom2D\").primaryColorFramebuffer;\n   *      secondaryColorFramebuffer = asciifier.renderers().get(\"custom2D\").secondaryColorFramebuffer;\n   *      rotationFramebuffer = asciifier.renderers().get(\"custom2D\").rotationFramebuffer;\n   *  }\n   * \n   *  function draw() {\n   *      // Draw a rectangle with the character 'A' to the character framebuffer\n   *      characterFramebuffer.begin();\n   *      clear();\n   *      asciifier.fill(\"A\");\n   *      rect(0, 0, 100, 100);\n   *      characterFramebuffer.end();\n   * \n   *      // Makes all ascii characters on the grid white.\n   *      primaryColorFramebuffer.begin();\n   *      background(255);\n   *      primaryColorFramebuffer.end();\n   * \n   *      // Makes all cell background colors black.\n   *      secondaryColorFramebuffer.begin();\n   *      background(0);\n   *      secondaryColorFramebuffer.end();\n   * \n   *      // Rotates all characters in the grid by X degrees. \n   *      // Utilize the red color channel for the rotation angle.\n   *      rotationFramebuffer.begin();\n   *      background('rgb(25%, 0%, 0%)'); // 25% of 360 degrees = 90 degrees\n   *      rotationFramebuffer.end();\n   *  }\n   * ```\n   */\n  get rotationFramebuffer() {\n    return this._rotationFramebuffer;\n  }\n  /**\n   * Get the framebuffer settings used to configure all internal framebuffers for the renderer.\n   */\n  get framebufferOptions() {\n    return this._framebufferOptions;\n  }\n  /**\n   * Get the character framebuffer, whose pixels define the ASCII characters to use in the grid cells.\n   * \n   * Pre-built ASCII renderers like `'brightness'` write to this buffer automatically based on your settings. \n   * In `'custom2D'` renderers, you must write to it manually in your `draw()` function.\n   * \n   * @example\n   * ```javascript\n   *  let characterFramebuffer;\n   *  let primaryColorFramebuffer;\n   *  let secondaryColorFramebuffer;\n   * \n   *  let asciifier;\n   * \n   *  function setup() {\n   *      createCanvas(400, 400, WEBGL);\n   *  }\n   * \n   *  function setupAsciify() {\n   *      // Get the asciifier instance\n   *      asciifier = p5asciify.asciifier();\n   * \n   *      // Enable the default custom renderer\n   *      asciifier.renderers().get(\"custom2D\").enable();\n   *      \n   *      // Assign the ascii renderer's framebuffers to a global variable\n   *      characterFramebuffer = asciifier.renderers().get(\"custom2D\").characterFramebuffer;\n   *      primaryColorFramebuffer = asciifier.renderers().get(\"custom2D\").primaryColorFramebuffer;\n   *      secondaryColorFramebuffer = asciifier.renderers().get(\"custom2D\").secondaryColorFramebuffer;\n   *  }\n   * \n   *  function draw() {\n   *      // Draw a rectangle with the character 'A' to the character framebuffer\n   *      characterFramebuffer.begin();\n   *      clear();\n   *      asciifier.fill(\"A\");\n   *      rect(0, 0, 100, 100);\n   *      characterFramebuffer.end();\n   * \n   *      // Makes all ascii characters on the grid white.\n   *      primaryColorFramebuffer.begin();\n   *      background(255);\n   *      primaryColorFramebuffer.end();\n   * \n   *      // Makes all cell background colors black.\n   *      secondaryColorFramebuffer.begin();\n   *      background(0);\n   *      secondaryColorFramebuffer.end();\n   *  }\n   * ```\n   */\n  get characterFramebuffer() {\n    return this._characterFramebuffer;\n  }\n  /**\n   * Get the grid object containing the relevant grid information.\n   * @ignore\n   */\n  get grid() {\n    return this._grid;\n  }\n}\nconst EA = {\n  /** Enable/disable the renderer */\n  enabled: !1\n};\nclass L extends uA {\n  /**\n   * Creates a new `\"custom2D\"` ASCII renderer instance.\n   * @param _p The p5 instance.\n   * @param _grid Grid object containing the relevant grid information.\n   * @param _fontManager The font texture atlas containing the ASCII characters texture.\n   * @param _options The options for the ASCII renderer.\n   * @ignore\n   */\n  constructor(A, e, r, t, i = EA) {\n    super(A, e, r, t, { ...EA, ...i });\n  }\n  resetShaders() {\n  }\n  /**\n   * Resize the framebuffers to match the 2D grid size based on the number of rows and columns.\n   * @ignore\n   */\n  resizeFramebuffers() {\n    this._primaryColorFramebuffer.resize(this._grid.cols, this._grid.rows), this._secondaryColorFramebuffer.resize(this._grid.cols, this._grid.rows), this._transformFramebuffer.resize(this._grid.cols, this._grid.rows), this._rotationFramebuffer.resize(this._grid.cols, this._grid.rows), this._characterFramebuffer.resize(this._grid.cols, this._grid.rows);\n  }\n}\nclass GA {\n  /**\n   * Create a new color palette instance.\n   * @param _p The p5 instance.\n   * @param _colors The colors to store.\n   */\n  constructor(A, e) {\n    /** The framebuffer used to store the color palette. */\n    o(this, \"_framebuffer\");\n    this._p = A, this._colors = e;\n    const r = Math.max(this._colors.length, 1);\n    this._framebuffer = this._p.createFramebuffer({\n      density: 1,\n      width: r,\n      height: 1,\n      depthFormat: this._p.UNSIGNED_INT,\n      textureFiltering: this._p.NEAREST\n    }), this._updateFramebuffer();\n  }\n  /**\n   * Update the framebuffer with the currently selected colors.\n   */\n  _updateFramebuffer() {\n    if (!this._framebuffer || !this._p) return;\n    const A = Math.max(this._colors.length, 1);\n    this._framebuffer.resize(A, 1), this._framebuffer.loadPixels();\n    for (let r = 0; r < A; r++) {\n      const t = r < this._colors.length ? this._colors[r] : this._p.color(0, 0, 0, 0), i = 4 * r;\n      this._framebuffer.pixels[i] = this._p.red(t), this._framebuffer.pixels[i + 1] = this._p.green(t), this._framebuffer.pixels[i + 2] = this._p.blue(t), this._framebuffer.pixels[i + 3] = this._p.alpha(t);\n    }\n    this._framebuffer.updatePixels();\n  }\n  /**\n   * Sets the colors of the palette and updates the framebuffer.\n   * @param newColors The new colors to set.\n   */\n  setColors(A) {\n    this._colors = A, this._updateFramebuffer();\n  }\n  /**\n   * Get the colors of the palette.\n   */\n  get colors() {\n    return this._colors;\n  }\n  /**\n   * Get the framebuffer containing the colors of the palette.\n   */\n  get framebuffer() {\n    return this._framebuffer;\n  }\n}\nclass z extends L {\n  /**\n   * Creates a new feature-based 2D ASCII renderer instance.\n   * @param p The p5 instance.\n   * @param grid Grid object containing the relevant grid information.\n   * @param fontManager The font texture atlas containing the ASCII characters texture.\n   * @param options The options for the ASCII renderer.\n   * @ignore\n   */\n  constructor(e, r, t, i, s) {\n    super(e, r, t, i, s);\n    /** {@link P5AsciifyColorPalette} object containing colors that correspond to the defined character set. */\n    o(this, \"_characterColorPalette\");\n    this._characterColorPalette = new GA(this._p, this._fontManager.glyphColors(this._options.characters)), this.update(this._options);\n  }\n  /**\n   * Set the characters for the character set.\n   * @param characters The characters to set for the character set.\n   * @throws If characters is not a string.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Set the character set to '.:-=+*#%@' for the brightness renderer.\n   *      p5asciify.asciifier().renderers().get(\"brightness\").characters('.:-=+*#%@');\n   *  }\n   * ```\n   */\n  characters(e) {\n    return !g.validate(\n      typeof e == \"string\",\n      \"Characters must be a string.\",\n      { providedValue: e, method: \"characters\" }\n    ) || e === this._options.characters ? this : (this._characterColorPalette.setColors(this._fontManager.glyphColors(e)), this.resetShaders(), this._options.characters = e, this);\n  }\n  /**\n   * Swap the colors of the ASCII character and cell background colors.\n   * @param invert Whether to swap the colors.\n   * @throws If invert is not a boolean.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Enable invert mode for the brightness renderer.\n   *      p5asciify.asciifier().renderers().get(\"brightness\").invert(true);\n   *  }\n   * ```\n   */\n  invert(e) {\n    return g.validate(\n      typeof e == \"boolean\",\n      \"Invert mode must be a boolean.\",\n      { providedValue: e, method: \"invert\" }\n    ) ? (this._options.invert = e, this) : this;\n  }\n  /**\n   * Define the rotation angle of all characters in the grid affected by the renderer in degrees.\n   * \n   * @remarks\n   * Currently, the angle format is fixed to degrees. In the future, this may be changed to be based on the `angleMode` of the sketch.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Rotate all characters in the grid by 90 degrees for the brightness renderer.\n   *      p5asciify.asciifier().renderers().get(\"brightness\").rotation(90);\n   *  }\n   * ```\n   * \n   * @param angle The rotation angle in degrees.\n   * @throws If angle is not a number.\n   */\n  rotation(e) {\n    if (!g.validate(\n      typeof e == \"number\" && !isNaN(e),\n      \"Rotation angle must be a valid number.\",\n      { providedValue: e, method: \"rotation\" }\n    ))\n      return this;\n    e = e % 360, e < 0 && (e += 360);\n    const t = e * 255 / 360, i = Math.floor(t), s = Math.round((t - i) * 255);\n    return this._options.rotation = this._p.color(i, s, 0), this;\n  }\n  /**\n   * Set the color of the ASCII characters, used in the fixed color mode.\n   * @param color The fixed color of the ASCII characters.\n   * @throws If color is not a p5.Color object.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *          // Set the character color to green for the brightness renderer.\n   *      // (Is applied if the character color mode of this renderer is set to 'fixed')\n   *      p5asciify.asciifier().renderers().get(\"brightness\").characterColor(color(0, 255, 0));\n   *  }\n   * ```\n   */\n  characterColor(e) {\n    return g.validate(\n      J(this._p, e),\n      \"Character color must be a valid p5.Color object.\",\n      { providedValue: e, method: \"characterColor\" }\n    ) ? (this._options.characterColor = e, this) : this;\n  }\n  /**\n   * Define whether to flip the ASCII characters horizontally.\n   * @param flip Whether to flip the characters horizontally.\n   * @throws If flip is not a boolean.\n   */\n  flipHorizontally(e) {\n    return g.validate(\n      typeof e == \"boolean\",\n      \"Flip horizontally must be a boolean.\",\n      { providedValue: e, method: \"flipHorizontally\" }\n    ) ? (this._options.flipHorizontally = e, this) : this;\n  }\n  /**\n   * Define whether to flip the ASCII characters vertically.\n   * @param flip Whether to flip the characters vertically.\n   * @throws If flip is not a boolean.\n   */\n  flipVertically(e) {\n    return g.validate(\n      typeof e == \"boolean\",\n      \"Flip vertically must be a boolean.\",\n      { providedValue: e, method: \"flipVertically\" }\n    ) ? (this._options.flipVertically = e, this) : this;\n  }\n  /**\n   * Set the background color of the ASCII characters, used in the fixed color mode.\n   * @param color The fixed color of the ASCII characters.\n   * @throws If color is not a p5.Color object.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Set the cell background color to red for the brightness renderer. \n   *      // (Is applied if the background color mode of this renderer is set to 'fixed')\n   *      p5asciify.asciifier().renderers().get(\"brightness\").backgroundColor(color(255, 0, 0));\n   *  }\n   * ```\n   */\n  backgroundColor(e) {\n    return g.validate(\n      J(this._p, e),\n      \"Background color must be a valid p5.Color object.\",\n      { providedValue: e, method: \"backgroundColor\" }\n    ) ? (this._options.backgroundColor = e, this) : this;\n  }\n  /**\n   * Sets the color mode for ASCII characters.\n   * @param mode The color mode ('sampled' or 'fixed')\n   * @throws If mode is not a string or not one of the allowed values ('sampled' or 'fixed')\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Set the character color mode to 'fixed' for the brightness renderer.\n   *      p5asciify.asciifier().renderers().get(\"brightness\").characterColorMode('fixed');\n   *  }\n   * ```\n   */\n  characterColorMode(e) {\n    const r = g.validate(\n      typeof e == \"string\",\n      \"Character color mode must be a string.\",\n      { providedValue: e, method: \"characterColorMode\" }\n    ), t = g.validate(\n      e === \"sampled\" || e === \"fixed\",\n      \"Character color mode must be either 'sampled' or 'fixed'.\",\n      { providedValue: e, method: \"characterColorMode\" }\n    );\n    return !r || !t ? this : (e === \"sampled\" ? this._options.characterColorMode = 0 : e === \"fixed\" && (this._options.characterColorMode = 1), this);\n  }\n  /**\n   * Sets the color mode for the grid cell background.\n   * @param mode The color mode ('sampled' or 'fixed')\n   * @throws If mode is not a string or not one of the allowed values ('sampled' or 'fixed')\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Set the background color mode to 'sampled' for the brightness renderer.\n   *      p5asciify.asciifier().renderers().get(\"brightness\").backgroundColorMode('sampled');\n   *  }\n   * ```\n   */\n  backgroundColorMode(e) {\n    const r = g.validate(\n      typeof e == \"string\",\n      \"Background color mode must be a string.\",\n      { providedValue: e, method: \"backgroundColorMode\" }\n    ), t = g.validate(\n      e === \"sampled\" || e === \"fixed\",\n      \"Background color mode must be either 'sampled' or 'fixed'.\",\n      { providedValue: e, method: \"backgroundColorMode\" }\n    );\n    return !r || !t ? this : (e === \"sampled\" ? this._options.backgroundColorMode = 0 : e === \"fixed\" && (this._options.backgroundColorMode = 1), this);\n  }\n  /**\n   * Updates renderer options.\n   * @param newOptions - The new options to update.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Update the brightness renderer options\n   *      p5asciify.asciifier().renderers().get(\"brightness\").update({\n   *          enabled: true,\n   *          characterColor: color(255, 0, 0),\n   *          backgroundColor: color(0, 0, 255),\n   *          characters: '.:-=+*#%@',\n   *          invert: true,\n   *          rotation: 90,\n   *          // ...\n   *      });\n   *  }\n   * ```\n   */\n  update(e) {\n    return super.update(e), (e == null ? void 0 : e.enabled) !== void 0 && this.enabled(e.enabled), (e == null ? void 0 : e.characterColor) !== void 0 && (e.characterColor = this._p.color(e.characterColor), this.characterColor(e.characterColor)), (e == null ? void 0 : e.backgroundColor) !== void 0 && (e.backgroundColor = this._p.color(e.backgroundColor), this.backgroundColor(e.backgroundColor)), (e == null ? void 0 : e.characters) !== void 0 && this.characters(e.characters), (e == null ? void 0 : e.invert) !== void 0 && this.invert(e.invert), (e == null ? void 0 : e.rotation) !== void 0 && this.rotation(e.rotation), (e == null ? void 0 : e.characterColorMode) !== void 0 && this.characterColorMode(e.characterColorMode), (e == null ? void 0 : e.backgroundColorMode) !== void 0 && this.backgroundColorMode(e.backgroundColorMode), (e == null ? void 0 : e.flipHorizontally) !== void 0 && this.flipHorizontally(e.flipHorizontally), (e == null ? void 0 : e.flipVertically) !== void 0 && this.flipVertically(e.flipVertically), this;\n  }\n  /**\n   * Get the {@link P5AsciifyColorPalette} object containing colors that correspond to the defined character set.\n   */\n  get characterColorPalette() {\n    return this._characterColorPalette;\n  }\n}\nvar S = `precision mediump float;\n\nattribute vec3 aPosition;\nattribute vec2 aTexCoord;\n\nvarying vec2 v_texCoord;\n\nvoid main() {\n    vec4 positionVec4 = vec4(aPosition, 1.0);\n\n    positionVec4.xy = positionVec4.xy * 2.0 - 1.0;\n\n    gl_Position = positionVec4;\n\n    v_texCoord = aTexCoord;\n}`, TA = `precision mediump float;\n\nuniform sampler2D u_sketchTexture;             \nuniform vec2 u_gridCellDimensions;             \n\nvoid main() {\n    \n    vec2 cellCoord = floor(gl_FragCoord.xy);\n\n    \n    vec2 cellSizeInTexCoords = 1.0 / u_gridCellDimensions;\n\n    \n    vec2 cellCenterTexCoord = (cellCoord + vec2(0.5)) * cellSizeInTexCoords;\n\n    \n    vec4 finalColor;\n\n    finalColor = texture2D(u_sketchTexture, cellCenterTexCoord);\n\n    \n    gl_FragColor = finalColor;\n}`, RA = `precision mediump float;\n\nuniform sampler2D u_colorSampleFramebuffer;\nuniform sampler2D u_charPaletteTexture;\nuniform vec2 u_charPaletteSize;\nuniform vec2 u_textureSize;\nuniform ivec2 u_brightnessRange;\n\nvoid main() {\n    \n    vec2 pos = (floor(gl_FragCoord.xy) + 0.5) / u_textureSize;\n    \n    \n    vec4 inputColor = texture2D(u_colorSampleFramebuffer, pos);\n    \n    \n    if (inputColor.a == 0.0) {\n        gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n    \n    \n    float brightness = dot(inputColor.rgb, vec3(0.299, 0.587, 0.114));\n    \n    \n    float brightness255 = brightness * 255.0;\n    \n    \n    if (brightness255 < float(u_brightnessRange.x) || brightness255 > float(u_brightnessRange.y)) {\n        gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n    \n    \n    float normalizedBrightness = (brightness255 - float(u_brightnessRange.x)) / \n                               (float(u_brightnessRange.y) - float(u_brightnessRange.x));\n    \n    \n    float index = clamp(floor(normalizedBrightness * u_charPaletteSize.x), 0.0, u_charPaletteSize.x - 1.0);\n    \n    \n    vec3 charColor = texture2D(u_charPaletteTexture, vec2((index + 0.5) / u_charPaletteSize.x, 0.0)).rgb;\n    gl_FragColor = vec4(charColor, inputColor.a);\n}`;\nconst lA = {\n  /** Enable/disable the renderer */\n  enabled: !0,\n  /** Characters used for brightness mapping (from darkest to brightest) */\n  characters: \" .:-=+*%@#\",\n  /** Color of the ASCII characters. Only used when `characterColorMode` is set to `fixed` */\n  characterColor: \"#FFFFFF\",\n  /** Character color mode */\n  characterColorMode: \"sampled\",\n  /** Cell background color. Only used when `characterColorMode` is set to `fixed` */\n  backgroundColor: \"#000000\",\n  /** Background color mode */\n  backgroundColorMode: \"fixed\",\n  /** Swap the cells ASCII character colors with it's cell background colors */\n  invert: !1,\n  /** Rotation angle of all characters in the grid in degrees */\n  rotation: 0,\n  /** Flip the ASCII characters horizontally */\n  flipHorizontally: !1,\n  /** Flip the ASCII characters vertically */\n  flipVertically: !1,\n  /** Range of brightness values to map to ASCII characters */\n  brightnessRange: [0, 255]\n};\nclass CA extends z {\n  /**\n   * Creates a new `\"brightness\"` ASCII renderer instance.\n   * @param p5Instance The p5 instance.\n   * @param grid Grid object containing the relevant grid information.\n   * @param fontManager The font texture atlas containing the ASCII characters texture.\n   * @param options The options for the ASCII renderer.\n   * @ignore\n   */\n  constructor(e, r, t, i, s = lA) {\n    super(e, r, t, i, { ...lA, ...s });\n    o(this, \"colorSampleShader\");\n    o(this, \"asciiCharacterShader\");\n    o(this, \"colorSampleFramebuffer\");\n    this.colorSampleShader = this._p.createShader(S, TA), this.asciiCharacterShader = this._p.createShader(S, RA), this.colorSampleFramebuffer = this._p.createFramebuffer(this._framebufferOptions);\n  }\n  resetShaders() {\n  }\n  _recreateFramebuffers() {\n    const e = {\n      ...this._framebufferOptions,\n      density: 1,\n      width: this._grid.cols,\n      height: this._grid.rows\n    };\n    this.colorSampleFramebuffer = this._p.createFramebuffer(e), super._recreateFramebuffers();\n  }\n  resizeFramebuffers() {\n    super.resizeFramebuffers(), this.colorSampleFramebuffer.resize(this._grid.cols, this._grid.rows);\n  }\n  update(e) {\n    return super.update(e), e.brightnessRange !== void 0 && this.brightnessRange(e.brightnessRange), this;\n  }\n  /**\n   * Sets the brightness range for the ASCII character mapping.\n   * This range defines the minimum and maximum brightness values that will be mapped to ASCII characters.\n   * \n   * If a pixel's brightness is not within the range, the corresponding cell will be left transparent,\n   * rendering whatever is behind it, like the canvas bit or the set background color.\n   * \n   * @example\n   * ```javascript\n   * function setupAsciify() {\n   *      // Set the brightness range for the renderer\n   *      p5asciify.renderers().get(\"brightness\").brightnessRange([50, 200]);\n   *  }\n   * ```\n   * \n   * @param range A tuple [min, max] representing the brightness range.\n   * @throws If the provided range is not an array of two numbers, or if the numbers are not within the valid range (0-255).\n   */\n  brightnessRange(e) {\n    if (!g.validate(\n      Array.isArray(e) && e.length === 2 && typeof e[0] == \"number\" && typeof e[1] == \"number\" && !isNaN(e[0]) && !isNaN(e[1]),\n      \"Brightness range must be an array with exactly two numbers.\",\n      { providedValue: e, method: \"brightnessRange\" }\n    ))\n      return this;\n    const [t, i] = e, s = g.validate(\n      t >= 0 && t <= 255 && i >= 0 && i <= 255,\n      \"Brightness values must be between 0 and 255.\",\n      { providedValue: e, method: \"brightnessRange\" }\n    ), a = g.validate(\n      t <= i,\n      \"Start value must be less than or equal to the end value.\",\n      { providedValue: e, method: \"brightnessRange\" }\n    );\n    return !s || !a ? this : (this._options.brightnessRange = [t, i], this);\n  }\n  render() {\n    this.colorSampleFramebuffer.begin(), this._p.clear(), this._p.shader(this.colorSampleShader), this.colorSampleShader.setUniform(\"u_sketchTexture\", this._captureFramebuffer), this.colorSampleShader.setUniform(\"u_gridCellDimensions\", [this._grid.cols, this._grid.rows]), this._p.rect(0, 0, this.colorSampleFramebuffer.width, this.colorSampleFramebuffer.height), this.colorSampleFramebuffer.end(), this._primaryColorFramebuffer.begin(), this._options.characterColorMode === 1 ? this._p.background(this._options.characterColor) : (this._p.clear(), this._p.image(this.colorSampleFramebuffer, -this._grid.cols / 2, -this._grid.rows / 2, this._grid.cols, this._grid.rows)), this._primaryColorFramebuffer.end(), this._secondaryColorFramebuffer.begin(), this._options.backgroundColorMode === 1 ? this._p.background(this._options.backgroundColor) : (this._p.clear(), this._p.image(this.colorSampleFramebuffer, -this._grid.cols / 2, -this._grid.rows / 2, this._grid.cols, this._grid.rows)), this._secondaryColorFramebuffer.end(), this._transformFramebuffer.begin(), this._p.background(this._options.invert ? 255 : 0, this._options.flipHorizontally ? 255 : 0, this._options.flipVertically ? 255 : 0), this._transformFramebuffer.end(), this._rotationFramebuffer.begin(), this._p.background(this._options.rotation), this._rotationFramebuffer.end(), this._characterFramebuffer.begin(), this._p.clear(), this._p.shader(this.asciiCharacterShader), this.asciiCharacterShader.setUniform(\"u_textureSize\", [this._grid.cols, this._grid.rows]), this.asciiCharacterShader.setUniform(\"u_colorSampleFramebuffer\", this.colorSampleFramebuffer), this.asciiCharacterShader.setUniform(\"u_charPaletteTexture\", this._characterColorPalette.framebuffer), this.asciiCharacterShader.setUniform(\"u_charPaletteSize\", [this._characterColorPalette.colors.length, 1]), this.asciiCharacterShader.setUniform(\"u_brightnessRange\", this._options.brightnessRange), this._p.rect(0, 0, this._characterFramebuffer.width, this._characterFramebuffer.height), this._characterFramebuffer.end();\n  }\n}\nvar YA = `precision mediump float;\n\nuniform sampler2D u_sketchTexture;\nuniform sampler2D u_sampleTexture;             \nuniform vec2 u_gridCellDimensions;             \nuniform int u_sampleMode;                      \nuniform vec4 u_staticColor;                    \n\nvoid main() {\n    \n    vec2 cellCoord = floor(gl_FragCoord.xy);\n\n    \n    vec2 cellSizeInTexCoords = 1.0 / u_gridCellDimensions;\n\n    \n    vec2 cellCenterTexCoord = (cellCoord + vec2(0.5)) * cellSizeInTexCoords;\n\n    \n    vec4 finalColor;\n\n    vec4 sampleColor = texture2D(u_sampleTexture, cellCenterTexCoord);\n\n    if(sampleColor != vec4(0.0, 0.0, 0.0, 0.0)) {\n        if(u_sampleMode == 0) {\n            \n            finalColor = texture2D(u_sketchTexture, cellCenterTexCoord);\n        } else {\n            \n            finalColor = u_staticColor;\n        }\n    } \n\n    \n    gl_FragColor = finalColor;\n}`, zA = `precision mediump float;\n\nuniform sampler2D u_sampleTexture;\nuniform vec2 u_gridCellDimensions;\nuniform bool u_invert;\nuniform bool u_flipH;\nuniform bool u_flipV;\nuniform vec3 u_compareColor;\n\nvoid main() {\n    \n    vec2 cellCoord = floor(gl_FragCoord.xy);\n\n    \n    vec2 cellSizeInTexCoords = vec2(1.0) / u_gridCellDimensions;\n\n    \n    vec2 cellCenterTexCoord = (cellCoord + vec2(0.5)) * cellSizeInTexCoords;\n\n    bool shouldInvert;\n\n    \n    shouldInvert = texture2D(u_sampleTexture, cellCenterTexCoord).rgb != u_compareColor;\n\n    if(shouldInvert) {\n        \n        \n        \n        \n        float r = u_invert ? 1.0 : 0.0;\n        float g = u_flipH ? 1.0 : 0.0;\n        float b = u_flipV ? 1.0 : 0.0;\n        \n        gl_FragColor = vec4(r, g, b, 1.0);\n    } else {\n        gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }\n}`, HA = `precision mediump float;\n\nuniform sampler2D u_sampleTexture;\nuniform vec2 u_gridCellDimensions;\nuniform vec3 u_rotationColor;\nuniform vec3 u_compareColor;\n\nvoid main() {\n    \n    vec2 cellCoord = floor(gl_FragCoord.xy);\n\n    \n    vec2 cellSizeInTexCoords = vec2(1.0) / u_gridCellDimensions;\n\n    \n    vec2 cellCenterTexCoord = (cellCoord + vec2(0.5)) * cellSizeInTexCoords;\n\n    bool shouldRotate;\n\n        \n    shouldRotate = texture2D(u_sampleTexture, cellCenterTexCoord).rgb != u_compareColor;\n\n    if(shouldRotate) {\n        gl_FragColor = vec4(u_rotationColor, 1.0);\n    } else {\n        gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }\n}`, UA = `precision mediump float;\n\nuniform sampler2D u_sketchTexture;\nuniform vec2 u_gridCellDimensions;\n\nvoid main() {\n    \n    vec2 cellCoord = floor(gl_FragCoord.xy);\n    \n    \n    vec2 cellSizeInTexCoords = vec2(1.0) / u_gridCellDimensions;\n    \n    \n    vec2 cellCenterTexCoord = (cellCoord + vec2(0.5)) * cellSizeInTexCoords;\n    \n    \n    gl_FragColor = texture2D(u_sketchTexture, cellCenterTexCoord);\n}`, NA = `precision mediump float;\n\nvarying vec2 v_texCoord;\n\nuniform sampler2D u_texture;\nuniform vec2 u_textureSize;\nuniform float u_threshold;\n\nuniform sampler2D u_colorPaletteTexture;\n\nvoid main() {\n    vec2 texelSize = 1.0 / u_textureSize;\n\n    float kernelX[9];\n    float kernelY[9];\n\n    kernelX[0] = -1.0; kernelX[1] = 0.0; kernelX[2] = 1.0;\n    kernelX[3] = -2.0; kernelX[4] = 0.0; kernelX[5] = 2.0;\n    kernelX[6] = -1.0; kernelX[7] = 0.0; kernelX[8] = 1.0;\n\n    kernelY[0] = -1.0; kernelY[1] = -2.0; kernelY[2] = -1.0;\n    kernelY[3] = 0.0;  kernelY[4] = 0.0;  kernelY[5] = 0.0;\n    kernelY[6] = 1.0;  kernelY[7] = 2.0;  kernelY[8] = 1.0;\n\n    \n    vec3 texColor[9];\n    for(int i = 0; i < 3; i++) {\n        for(int j = 0; j < 3; j++) {\n            texColor[i * 3 + j] = texture2D(u_texture, v_texCoord + vec2(float(i - 1), float(j - 1)) * texelSize).rgb;\n        }\n    }\n\n    vec3 sobelX = vec3(0.0);\n    vec3 sobelY = vec3(0.0);\n    for(int i = 0; i < 9; i++) {\n        sobelX += kernelX[i] * texColor[i];\n        sobelY += kernelY[i] * texColor[i];\n    }\n\n    vec3 sobel = sqrt(sobelX * sobelX + sobelY * sobelY);\n    float intensity = length(sobel) / sqrt(3.0);\n    \n    vec4 edgeColor = vec4(0.0);\n    \n    if(intensity > u_threshold) {\n        float angleDeg = degrees(atan(sobelY.r, sobelX.r));\n        \n        \n        int charIndex = 0;\n        \n        if(angleDeg >= -22.5 && angleDeg < 22.5) charIndex = 0;\n        else if(angleDeg >= 22.5 && angleDeg < 67.5) charIndex = 1;\n        else if(angleDeg >= 67.5 && angleDeg < 112.5) charIndex = 2;\n        else if(angleDeg >= 112.5 && angleDeg < 157.5) charIndex = 3;\n        else if(angleDeg >= 157.5 || angleDeg < -157.5) charIndex = 4;\n        else if(angleDeg >= -157.5 && angleDeg < -112.5) charIndex = 5;\n        else if(angleDeg >= -112.5 && angleDeg < -67.5) charIndex = 6;\n        else if(angleDeg >= -67.5 && angleDeg < -22.5) charIndex = 7;\n        \n        \n        float paletteCoord = (float(charIndex) + 0.5) / 8.0;\n        edgeColor = texture2D(u_colorPaletteTexture, vec2(paletteCoord, 0.5));\n    }\n\n    gl_FragColor = edgeColor;\n}`;\nconst _A = (n, A, e) => `\nprecision mediump float;uniform sampler2D u_image;uniform vec2 u_imageSize,u_gridCellDimensions;uniform int u_threshold;const vec3 i=vec3(0);vec3 f[${n}];int u[${n}];float r(float i){return floor(i+.5);}void main(){vec2 v=floor(gl_FragCoord.xy);ivec2 b=ivec2(v);v=u_imageSize/u_gridCellDimensions;b=ivec2(r(float(b.x)*v.x),r(float(b.y)*v.y));int m=0;for(int b=0;b<${n};b++)f[b]=i,u[b]=0;for(int v=0;v<${e};v++)for(int r=0;r<${A};r++){ivec2 y=b+ivec2(r,v);if(y.x<0||y.y<0||y.x>=int(u_imageSize.x)||y.y>=int(u_imageSize.y))continue;vec3 e=texture2D(u_image,(vec2(y)+.5)/u_imageSize).xyz;if(length(e-i)<.001)continue;m++;bool x=false;for(int b=0;b<${n};b++)if(length(e-f[b])<.001){u[b]++;x=true;break;}if(!x)for(int b=0;b<${n};b++)if(u[b]==0){f[b]=e;u[b]=1;break;}}vec3 e=i;int x=0;for(int b=0;b<${n};b++)if(u[b]>x)e=f[b],x=u[b];gl_FragColor=m<u_threshold?vec4(i,0):vec4(e,1);}\n`, hA = {\n  /** Enable/disable the renderer */\n  enabled: !1,\n  /** Characters used for edge representation (8 characters for different angles) */\n  characters: \"-/|\\\\-/|\\\\\",\n  /** Color of the ASCII characters. Only used when `characterColorMode` is set to `fixed` */\n  characterColor: \"#FFFFFF\",\n  /** Character color mode */\n  characterColorMode: \"sampled\",\n  /** Cell background color. Only used when `characterColorMode` is set to `fixed` */\n  backgroundColor: \"#000000\",\n  /** Background color mode */\n  backgroundColorMode: \"fixed\",\n  /** Swap the cells ASCII character colors with it's cell background colors */\n  invert: !1,\n  /** Threshold for Sobel edge detection. Responsible for edge detection sensitivity */\n  sobelThreshold: 0.5,\n  /** Sampling threshold for edge detection. In this case, 16 pixels in a grid cell need to contain an edge to render it */\n  sampleThreshold: 16,\n  /** Rotation angle of all characters in the grid in degrees */\n  rotation: 0,\n  /** Flip the ASCII characters horizontally */\n  flipHorizontally: !1,\n  /** Flip the ASCII characters vertically */\n  flipVertically: !1\n};\nclass DA extends z {\n  /**\n   * Creates a new `\"edge\"` ASCII renderer instance.\n   * @param p5Instance The p5 instance.\n   * @param grid Grid object containing the relevant grid information.\n   * @param fontManager The font texture atlas containing the ASCII characters texture.\n   * @param options The options for the ASCII renderer.\n   * @ignore\n   */\n  constructor(e, r, t, i, s = hA) {\n    super(e, r, t, i, { ...hA, ...s });\n    o(this, \"sobelShader\");\n    o(this, \"sampleShader\");\n    o(this, \"colorSampleShader\");\n    o(this, \"transformShader\");\n    o(this, \"rotationShader\");\n    o(this, \"asciiCharacterShader\");\n    o(this, \"sobelFramebuffer\");\n    o(this, \"sampleFramebuffer\");\n    this.sobelShader = this._p.createShader(S, NA), this.sampleShader = this._p.createShader(S, _A(16, this._grid.cellHeight, this._grid.cellWidth)), this.colorSampleShader = this._p.createShader(S, YA), this.transformShader = this._p.createShader(S, zA), this.rotationShader = this._p.createShader(S, HA), this.asciiCharacterShader = this._p.createShader(S, UA), this.sobelFramebuffer = this._p.createFramebuffer({\n      density: 1,\n      width: this._captureFramebuffer.width,\n      height: this._captureFramebuffer.height,\n      depthFormat: this._p.UNSIGNED_INT,\n      textureFiltering: this._p.NEAREST\n    }), this.sampleFramebuffer = this._p.createFramebuffer(this._framebufferOptions);\n  }\n  resizeFramebuffers() {\n    super.resizeFramebuffers(), this.sampleFramebuffer.resize(this._grid.cols, this._grid.rows), this.sobelFramebuffer.resize(this._captureFramebuffer.width, this._captureFramebuffer.height);\n  }\n  resetShaders() {\n    this.sampleShader = this._p.createShader(S, _A(16, this._grid.cellHeight, this._grid.cellWidth));\n  }\n  _recreateFramebuffers() {\n    const e = {\n      ...this._framebufferOptions,\n      density: 1,\n      width: this._grid.cols,\n      height: this._grid.rows\n    };\n    this.sampleFramebuffer = this._p.createFramebuffer(e), super._recreateFramebuffers();\n  }\n  /**\n   * Set the threshold value for the Sobel edge detection algorithm.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Set the threshold value for the Sobel edge detection algorithm\n   *      p5asciify.renderers().get(\"edge\").sobelThreshold(0.5);\n   *  }\n   * ```\n   * \n   * @param value The threshold value for the Sobel edge detection algorithm.\n   * @throws If the value is not a valid number between 0 and 1.\n   */\n  sobelThreshold(e) {\n    const r = g.validate(\n      typeof e == \"number\" && !Number.isNaN(e) && Number.isFinite(e),\n      \"Sobel threshold must be a valid number\",\n      { providedValue: e, method: \"sobelThreshold\" }\n    ), t = g.validate(\n      e >= 0 && e <= 1,\n      \"Sobel threshold must be between 0 and 1\",\n      { providedValue: e, method: \"sobelThreshold\" }\n    );\n    return !r || !t ? this : (this._options.sobelThreshold = e, this);\n  }\n  /**\n   * Set the sample threshold value for the edge detection algorithm.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Set the sample threshold value for the edge detection algorithm\n   *      p5asciify.renderers().get(\"edge\").sampleThreshold(32);\n   *  }\n   * ```\n   * \n   * @param value The sample threshold value for the edge detection algorithm.\n   * @throws If the value is not a valid number greater than or equal to 0.\n   */\n  sampleThreshold(e) {\n    const r = g.validate(\n      typeof e == \"number\" && !Number.isNaN(e) && Number.isFinite(e),\n      \"Sample threshold must be a valid number\",\n      { providedValue: e, method: \"sampleThreshold\" }\n    ), t = g.validate(\n      e >= 0,\n      \"Sample threshold must be greater than or equal to 0\",\n      { providedValue: e, method: \"sampleThreshold\" }\n    );\n    return !r || !t ? this : (this._options.sampleThreshold = e, this);\n  }\n  update(e) {\n    return super.update(e), e.sobelThreshold !== void 0 && this.sobelThreshold(e.sobelThreshold), e.sampleThreshold !== void 0 && this.sampleThreshold(e.sampleThreshold), this;\n  }\n  render() {\n    this.sobelFramebuffer.begin(), this._p.clear(), this._p.shader(this.sobelShader), this.sobelShader.setUniform(\"u_texture\", this._captureFramebuffer), this.sobelShader.setUniform(\"u_textureSize\", [this._captureFramebuffer.width, this._captureFramebuffer.height]), this.sobelShader.setUniform(\"u_threshold\", this._options.sobelThreshold), this.sobelShader.setUniform(\"u_colorPaletteTexture\", this._characterColorPalette.framebuffer), this.sobelShader.setUniform(\"u_totalChars\", this._options.characters.length), this._p.rect(0, 0, this.sobelFramebuffer.width, this.sobelFramebuffer.height), this.sobelFramebuffer.end(), this.sampleFramebuffer.begin(), this._p.clear(), this._p.shader(this.sampleShader), this.sampleShader.setUniform(\"u_imageSize\", [this._captureFramebuffer.width, this._captureFramebuffer.height]), this.sampleShader.setUniform(\"u_image\", this.sobelFramebuffer), this.sampleShader.setUniform(\"u_gridCellDimensions\", [this._grid.cols, this._grid.rows]), this.sampleShader.setUniform(\"u_threshold\", this._options.sampleThreshold), this._p.rect(0, 0, this.sampleFramebuffer.width, this.sampleFramebuffer.height), this.sampleFramebuffer.end(), this._primaryColorFramebuffer.begin(), this._p.clear(), this._p.shader(this.colorSampleShader), this.colorSampleShader.setUniform(\"u_sketchTexture\", this._captureFramebuffer), this.colorSampleShader.setUniform(\"u_sampleTexture\", this.sampleFramebuffer), this.colorSampleShader.setUniform(\"u_gridCellDimensions\", [this._grid.cols, this._grid.rows]), this.colorSampleShader.setUniform(\"u_sampleMode\", this._options.characterColorMode), this.colorSampleShader.setUniform(\"u_staticColor\", this._options.characterColor._array), this._p.rect(0, 0, this._primaryColorFramebuffer.width, this._primaryColorFramebuffer.height), this._primaryColorFramebuffer.end(), this._secondaryColorFramebuffer.begin(), this._p.clear(), this._p.shader(this.colorSampleShader), this.colorSampleShader.setUniform(\"u_sketchTexture\", this._captureFramebuffer), this.colorSampleShader.setUniform(\"u_sampleTexture\", this.sampleFramebuffer), this.colorSampleShader.setUniform(\"u_gridCellDimensions\", [this._grid.cols, this._grid.rows]), this.colorSampleShader.setUniform(\"u_sampleMode\", this._options.backgroundColorMode), this.colorSampleShader.setUniform(\"u_staticColor\", this._options.backgroundColor._array), this._p.rect(0, 0, this._secondaryColorFramebuffer.width, this._secondaryColorFramebuffer.height), this._secondaryColorFramebuffer.end(), this._transformFramebuffer.begin(), this._p.clear(), this._p.shader(this.transformShader), this.transformShader.setUniform(\"u_invert\", this._options.invert), this.transformShader.setUniform(\"u_flipH\", this._options.flipHorizontally), this.transformShader.setUniform(\"u_flipV\", this._options.flipVertically), this.transformShader.setUniform(\"u_sampleTexture\", this.sampleFramebuffer), this.transformShader.setUniform(\"u_compareColor\", [0, 0, 0]), this.transformShader.setUniform(\"u_gridCellDimensions\", [this._grid.cols, this._grid.rows]), this._p.rect(0, 0, this._transformFramebuffer.width, this._transformFramebuffer.height), this._transformFramebuffer.end(), this._rotationFramebuffer.begin(), this._p.clear(), this._p.shader(this.rotationShader), this.rotationShader.setUniform(\"u_rotationColor\", this._options.rotation._array), this.rotationShader.setUniform(\"u_sampleTexture\", this.sampleFramebuffer), this.rotationShader.setUniform(\"u_compareColor\", [0, 0, 0]), this.rotationShader.setUniform(\"u_gridCellDimensions\", [this._grid.cols, this._grid.rows]), this._p.rect(0, 0, this._rotationFramebuffer.width, this._rotationFramebuffer.height), this._rotationFramebuffer.end(), this._characterFramebuffer.begin(), this._p.clear(), this._p.shader(this.asciiCharacterShader), this.asciiCharacterShader.setUniform(\"u_sketchTexture\", this.sampleFramebuffer), this.asciiCharacterShader.setUniform(\"u_gridCellDimensions\", [this._grid.cols, this._grid.rows]), this._p.rect(0, 0, this._characterFramebuffer.width, this._characterFramebuffer.height), this._characterFramebuffer.end();\n  }\n}\nvar $A = `precision mediump float;\n\nuniform sampler2D u_characterTexture;\nuniform vec2 u_charsetDimensions;\n\nuniform sampler2D u_primaryColorTexture;\nuniform sampler2D u_secondaryColorTexture;\nuniform sampler2D u_transformTexture;\nuniform sampler2D u_asciiCharacterTexture;\nuniform sampler2D u_rotationTexture;\n\nuniform sampler2D u_captureTexture;\nuniform vec2 u_captureDimensions;\nuniform int u_backgroundMode; \n\nuniform vec2 u_gridCellDimensions;\nuniform vec2 u_gridPixelDimensions;\n\nuniform float u_pixelRatio;\n\nmat2 rotate2D(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nvoid main() {\n    \n    vec2 logicalFragCoord = gl_FragCoord.xy / u_pixelRatio;\n\n    \n    vec2 adjustedCoord = (logicalFragCoord) / u_gridPixelDimensions;\n\n    \n    vec2 gridCoord = adjustedCoord * u_gridCellDimensions;\n    vec2 cellCoord = floor(gridCoord);\n\n    \n    vec2 charIndexTexCoord = (cellCoord + vec2(0.5)) / u_gridCellDimensions;\n\n    \n    vec4 primaryColor = texture2D(u_primaryColorTexture, charIndexTexCoord);\n\n    \n    vec4 secondaryColor = texture2D(u_secondaryColorTexture, charIndexTexCoord);\n\n    \n    vec4 transformColor = texture2D(u_transformTexture, charIndexTexCoord);\n    bool isInverted = transformColor.r > 0.5; \n    bool flipHorizontal = transformColor.g > 0.5; \n    bool flipVertical = transformColor.b > 0.5;   \n\n    \n    vec4 encodedIndexVec = texture2D(u_asciiCharacterTexture, charIndexTexCoord);\n\n    if(encodedIndexVec.a < 0.01) {\n        if(u_backgroundMode == 0) {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        } else if(u_backgroundMode == 1) {\n            vec2 captureTexCoord = logicalFragCoord / u_captureDimensions;\n            gl_FragColor = texture2D(u_captureTexture, captureTexCoord);\n        }\n        return;\n    }\n\n    \n    int charIndex = int(encodedIndexVec.r * 255.0 + 0.5) + int(encodedIndexVec.g * 255.0 + 0.5) * 256;\n\n    \n    int charCol = charIndex - (charIndex / int(u_charsetDimensions.x)) * int(u_charsetDimensions.x);\n    int charRow = charIndex / int(u_charsetDimensions.x);\n\n    \n    vec2 charCoord = vec2(float(charCol) / u_charsetDimensions.x, float(charRow) / u_charsetDimensions.y);\n\n    \n    vec4 rotationColor = texture2D(u_rotationTexture, charIndexTexCoord);\n    \n    \n    \n    \n    float redValue = rotationColor.r * 255.0;\n    float greenValue = rotationColor.g * 255.0;\n    \n    \n    float scaledAngle = redValue + (greenValue / 255.0);\n    \n    \n    float angleDegrees = (scaledAngle * 360.0) / 255.0;\n    \n    \n    float rotationAngle = angleDegrees * 3.14159265359 / 180.0;\n\n    \n    vec2 fractionalPart = fract(gridCoord) - 0.5;\n\n    \n    if(flipHorizontal) {\n        fractionalPart.x = -fractionalPart.x;\n    }\n    if(flipVertical) {\n        fractionalPart.y = -fractionalPart.y;\n    }\n\n    \n    fractionalPart = rotate2D(rotationAngle) * fractionalPart;\n    fractionalPart += 0.5;\n\n    \n    vec2 cellMin = charCoord;\n    vec2 cellMax = charCoord + vec2(1.0 / u_charsetDimensions.x, 1.0 / u_charsetDimensions.y);\n    vec2 texCoord = charCoord + fractionalPart * vec2(1.0 / u_charsetDimensions.x, 1.0 / u_charsetDimensions.y);\n\n    \n    bool outsideBounds = any(lessThan(texCoord, cellMin)) || any(greaterThan(texCoord, cellMax));\n\n    if(outsideBounds) {\n        \n        gl_FragColor = isInverted ? primaryColor : secondaryColor;\n        return;\n    }\n\n    \n    vec4 charTexel = texture2D(u_characterTexture, texCoord);\n\n    \n    float inv = isInverted ? 1.0 : 0.0;\n    charTexel.rgb = mix(charTexel.rgb, 1.0 - charTexel.rgb, inv);\n\n    \n    gl_FragColor = mix(secondaryColor, primaryColor, charTexel);\n}`;\nclass wA {\n  /**\n   * Creates a new `P5AsciifyDisplayRenderer` instance.\n   * @param _p The p5 instance.\n   * @param _grid The grid instance.\n   * @param _fontManager The font texture atlas instance.\n   * @ignore\n   */\n  constructor(A, e, r) {\n    /** The asciified texture */\n    o(this, \"_resultFramebuffer\");\n    /** Final shader to render the ASCII output. */\n    o(this, \"_shader\");\n    /** Background mode: 0 for transparent fixed color, 1 for sampled background color */\n    o(this, \"_backgroundMode\", 0);\n    this._p = A, this._grid = e, this._fontManager = r, this._shader = this._p.createShader(S, $A), this._resultFramebuffer = this._p.createFramebuffer({\n      width: this._grid.width,\n      height: this._grid.height,\n      depthFormat: this._p.UNSIGNED_INT,\n      textureFiltering: this._p.NEAREST\n    });\n  }\n  /**\n   * Renders the ASCII output to the result framebuffer.\n   * @param characterFramebuffer The framebuffer containing the character indices.\n   * @param primaryColorFramebuffer The framebuffer containing the primary color values.\n   * @param secondaryColorFramebuffer The framebuffer containing the secondary color values.\n   * @param transformFramebuffer The framebuffer containing the inversion values.\n   * @param rotationFramebuffer The framebuffer containing the rotation values.\n   * @param captureFramebuffer The framebuffer containing the captured image.\n   * @param backgroundColor The background color to use for the ASCII output.\n   * @ignore\n   */\n  render(A, e, r, t, i, s, a = \"#000000\") {\n    this._resultFramebuffer.begin(), this._p.background(a), this._p.shader(this._shader);\n    const E = {\n      u_pixelRatio: this._p.pixelDensity(),\n      u_characterTexture: this._fontManager.texture,\n      u_charsetDimensions: [this._fontManager.textureColumns, this._fontManager.textureRows],\n      u_primaryColorTexture: e,\n      u_secondaryColorTexture: r,\n      u_transformTexture: t,\n      u_rotationTexture: i,\n      u_captureTexture: s,\n      u_captureDimensions: [s.width, s.height],\n      u_asciiCharacterTexture: A,\n      u_gridPixelDimensions: [this._grid.width, this._grid.height],\n      u_gridCellDimensions: [this._grid.cols, this._grid.rows],\n      u_backgroundMode: this._backgroundMode || 0\n      // Default to 0 (fixed background color)\n    };\n    for (const [Q, h] of Object.entries(E))\n      this._shader.setUniform(Q, h);\n    this._p.rect(0, 0, this._resultFramebuffer.width, this._resultFramebuffer.height), this._resultFramebuffer.end();\n  }\n  /**\n   * Resizes the framebuffer to match the grid width/height.\n   * @ignore\n   */\n  resizeFramebuffers() {\n    this._resultFramebuffer.resize(this._grid.width, this._grid.height);\n  }\n  /**\n   * Sets the background mode for the ASCII output.\n   * @param mode - 0 for fixed background color, 1 for sampled background color.\n   * @ignore\n   */\n  backgroundMode(A) {\n    this._backgroundMode = A;\n  }\n  /**\n   * Returns the framebuffer containing the final ASCII output.\n   * @ignore\n   */\n  get resultFramebuffer() {\n    return this._resultFramebuffer;\n  }\n}\nconst K = {\n  brightness: CA,\n  edge: DA,\n  custom2D: L\n};\nclass xA {\n  /**\n   * Creates a new ASCII renderer manager instance.\n   * @param _p The p5 instance.\n   * @param _grid The grid instance.\n   * @param _fontManager The font texture atlas instance.\n   * @ignore\n   */\n  constructor(A, e, r, t, i) {\n    /** The current dimensions of the canvas. If the dimensions change, the grid is reset and the renderers are resized. */\n    o(this, \"_currentCanvasDimensions\");\n    /** The list of available renderers. */\n    o(this, \"_renderers\");\n    /** The primary color framebuffer, whose pixels define the character colors of the grid cells. */\n    o(this, \"_primaryColorFramebuffer\");\n    /** The secondary color framebuffer, whose pixels define the background colors of the grid cells. */\n    o(this, \"_secondaryColorFramebuffer\");\n    /** The character framebuffer, whose pixels define the ASCII characters to use in the grid cells. */\n    o(this, \"_characterFramebuffer\");\n    /** The transform framebuffer, where each pixels color channel defines a different transformation:\n     * - Red channel: Swap the character and background colors of the grid cells.\n     * - Green channel: Flip the ASCII characters horizontally.\n     * - Blue channel: Flip the ASCII characters vertically.\n     */\n    o(this, \"_transformFramebuffer\");\n    /** The rotation framebuffer, whose pixels define the rotation angle of the characters in the grid. */\n    o(this, \"_rotationFramebuffer\");\n    /** The ASCII display renderer, which performs the final ASCII conversion */\n    o(this, \"_asciiDisplayRenderer2D\");\n    /** Whether any renderers are enabled. */\n    o(this, \"_hasEnabledRenderers\", !1);\n    /**\n     * Framebuffer settings used to configure all internal framebuffers for the renderer.\n     * \n     * These settings are passed to `p5.createFramebuffer()` when creating or recreating framebuffers.\n     * \n     * **Note:** The `width`, `height`, and `density` properties are managed internally and always match the grid size and pixel density.\n     * \n     * Properties:\n     * - `format` (number): Data format of the texture. Either `UNSIGNED_BYTE`, `FLOAT`, or `HALF_FLOAT`. Default is `UNSIGNED_BYTE`.\n     * - `channels` (number): Whether to store `RGB` or `RGBA` color channels. Default is to match the main canvas, which is `RGBA`.\n     * - `depth` (boolean): Whether to include a depth buffer. Default is `true`.\n     * - `depthFormat` (number): Data format of depth information. Either `UNSIGNED_INT` or `FLOAT`. Default is `UNSIGNED_INT`.\n     * - `stencil` (boolean): Whether to include a stencil buffer for masking. `depth` must be `true` for this feature to work. Defaults to the value of `depth` (which is `true`).\n     * - `antialias` (boolean): Whether to perform anti-aliasing. If set to `true`, 2 samples will be used by default. The number of samples can also be set (e.g., 4). Default is `false`.\n     * - `textureFiltering` (number): How to read values from the framebuffer. Either `LINEAR` (nearby pixels will be interpolated) or `NEAREST` (no interpolation). Default is `NEAREST`.\n     * - `width` (number): Width of the framebuffer. Always matches the grid columns.\n     * - `height` (number): Height of the framebuffer. Always matches the grid rows.\n     * - `density` (number): Pixel density of the framebuffer. Always matches the main canvas pixel density.\n     */\n    o(this, \"_framebufferOptions\");\n    this._p = A, this._captureFramebuffer = e, this._grid = r, this._fontManager = t, this._pluginRegistry = i, this._currentCanvasDimensions = {\n      width: this._captureFramebuffer.width,\n      height: this._captureFramebuffer.height\n    }, this._renderers = [\n      { name: \"custom2D\", renderer: new L(this._p, this._captureFramebuffer, this._grid, this._fontManager) },\n      { name: \"edge\", renderer: new DA(this._p, this._captureFramebuffer, this._grid, this._fontManager) },\n      { name: \"brightness\", renderer: new CA(this._p, this._captureFramebuffer, this._grid, this._fontManager) }\n    ], this._framebufferOptions = {\n      antialias: !1,\n      textureFiltering: this._p.NEAREST,\n      depthFormat: this._p.UNSIGNED_INT,\n      density: 1,\n      width: this._grid.cols,\n      height: this._grid.rows\n    }, this._asciiDisplayRenderer2D = new wA(this._p, this._grid, this._fontManager), this._recreateFramebuffers();\n  }\n  /**\n   * Runs all renderers in the pipeline, merging their framebuffers together,\n   * and passing them to the ASCII display renderer for final rendering.\n   * \n   * All {@link P5Asciifier} instances and their renderer managers call this method automatically \n   * after the user's `draw()` function when part of the {@link P5AsciifierManager} instance {@link p5asciify}.\n   * \n   * @param inputFramebuffer The input framebuffer to transform into ASCII.\n   * \n   * @ignore\n   */\n  render(A = \"#000000\") {\n    this._characterFramebuffer.draw(() => this._p.clear()), this._primaryColorFramebuffer.draw(() => this._p.clear()), this._secondaryColorFramebuffer.draw(() => this._p.clear()), this._transformFramebuffer.draw(() => this._p.clear()), this._rotationFramebuffer.draw(() => this._p.clear()), this._hasEnabledRenderers = !1;\n    for (let e = this._renderers.length - 1; e >= 0; e--) {\n      const r = this._renderers[e];\n      if (r.renderer.options.enabled) {\n        r.renderer instanceof z && r.renderer.render();\n        const t = -this._grid.cols / 2, i = -this._grid.rows / 2;\n        this._characterFramebuffer.draw(() => this._p.image(r.renderer.characterFramebuffer, t, i)), this._primaryColorFramebuffer.draw(() => this._p.image(r.renderer.primaryColorFramebuffer, t, i)), this._secondaryColorFramebuffer.draw(() => this._p.image(r.renderer.secondaryColorFramebuffer, t, i)), this._transformFramebuffer.draw(() => this._p.image(r.renderer.transformFramebuffer, t, i)), this._rotationFramebuffer.draw(() => this._p.image(r.renderer.rotationFramebuffer, t, i)), this._hasEnabledRenderers = !0;\n      }\n    }\n    this._asciiDisplayRenderer2D.render(\n      this._characterFramebuffer,\n      this._primaryColorFramebuffer,\n      this._secondaryColorFramebuffer,\n      this._transformFramebuffer,\n      this._rotationFramebuffer,\n      this._captureFramebuffer,\n      A\n    ), this.checkCanvasDimensions();\n  }\n  /**\n   * Checks if the canvas dimensions have changed.\n   * If they have, the grid is reset and the renderers are resized.\n   * \n   * Is called automatically when {@link render} is called \n   * and the canvas dimensions are different to the previous {@link render} call.\n   */\n  checkCanvasDimensions() {\n    (this._currentCanvasDimensions.width !== this._captureFramebuffer.width || this._currentCanvasDimensions.height !== this._captureFramebuffer.height) && (this._currentCanvasDimensions.width = this._captureFramebuffer.width, this._currentCanvasDimensions.height = this._captureFramebuffer.height, this._grid.reset(), this.resetRendererDimensions());\n  }\n  /**\n   * Sets a new capture texture for the renderer manager and its renderers.\n   * @param newCaptureFramebuffer The new capture framebuffer or graphics to use for rendering.\n   * @ignore\n   */\n  setCaptureTexture(A) {\n    this._captureFramebuffer = A, this.resetRendererDimensions(), this._renderers.forEach((e) => {\n      e.renderer.setCaptureTexture(A);\n    });\n  }\n  _recreateFramebuffers() {\n    const A = {\n      ...this._framebufferOptions,\n      density: 1,\n      width: this._grid.cols,\n      height: this._grid.rows\n    };\n    this._primaryColorFramebuffer = this._p.createFramebuffer(A), this._secondaryColorFramebuffer = this._p.createFramebuffer(A), this._transformFramebuffer = this._p.createFramebuffer(A), this._characterFramebuffer = this._p.createFramebuffer(A), this._rotationFramebuffer = this._p.createFramebuffer(A);\n  }\n  /**\n   * Resets the dimensions of all renderers.\n   * \n   * Is called automatically when {@link render} is called \n   * and the canvas dimensions are different to the previous {@link render} call.\n   * \n   * @ignore\n   */\n  resetRendererDimensions() {\n    this._primaryColorFramebuffer.resize(this._grid.cols, this._grid.rows), this._secondaryColorFramebuffer.resize(this._grid.cols, this._grid.rows), this._characterFramebuffer.resize(this._grid.cols, this._grid.rows), this._transformFramebuffer.resize(this._grid.cols, this._grid.rows), this._rotationFramebuffer.resize(this._grid.cols, this._grid.rows), this._renderers.forEach((A) => {\n      A.renderer.resizeFramebuffers(), A.renderer instanceof z && A.renderer.resetShaders();\n    }), this._asciiDisplayRenderer2D.resizeFramebuffers();\n  }\n  /**\n   * Adds a new renderer to the list of renderers.\n   * @param name The name of the renderer to add.\n   * @param type The type of the renderer to add.\n   * @param options The options to use for the renderer.\n   * @returns The ASCII renderer instance that was added.\n   * @throws If the renderer name is an empty string or the renderer type is invalid.\n   * \n   * @example\n   * ```javascript\n   *  let asciifier;\n   *  let brightnessAsciiRenderer;\n   * \n   *  function setupAsciify() {\n   *      asciifier = p5asciify.asciifier();\n   * \n   *      // Remove all existing default renderers provided by `p5.asciify`.\n   *      asciifier.renderers().clear();\n   * \n   *      // Add a new brightness renderer with custom options.\n   *      brightnessAsciiRenderer = asciifier.renderers().add('brightness', 'brightness', {\n   *          enabled: true,\n   *          characterColor: '#FF0000',\n   *          backgroundColor: '#0000FF',\n   *          characterColorMode: \"fixed\",\n   *          backgroundColorMode: \"fixed\",\n   *      });\n   *  }\n   * ```\n   */\n  add(A, e, r) {\n    const t = g.validate(\n      typeof A == \"string\" && A.trim() !== \"\",\n      \"Renderer name must be a non-empty string.\",\n      { providedValue: A, method: \"add\" }\n    ), i = g.validate(\n      typeof e == \"string\" && e.trim() !== \"\",\n      \"Renderer type must be a non-empty string.\",\n      { providedValue: e, method: \"add\" }\n    );\n    if (!t || !i)\n      return null;\n    let s;\n    const a = K[e];\n    if (a)\n      s = new a(this._p, this._captureFramebuffer, this._grid, this._fontManager, r);\n    else {\n      const Q = this._pluginRegistry.get(e);\n      Q && (s = Q.create(\n        this._p,\n        this._captureFramebuffer,\n        this._grid,\n        this._fontManager,\n        r\n      ));\n    }\n    return g.validate(\n      s !== void 0,\n      (() => {\n        const Q = [\n          ...Object.keys(K),\n          ...this._pluginRegistry.getIds()\n        ].join(\", \");\n        return `Invalid renderer type: ${e}. Valid types are: ${Q}`;\n      })(),\n      { providedValue: e, method: \"add\" }\n    ) ? (this._renderers.unshift({ name: A, renderer: s }), s) : null;\n  }\n  /**\n   * Gets the ASCII renderer instance with the given name.\n   * @param rendererName The name of the renderer to get.\n   * @returns The ASCII renderer instance with the given name.\n   * \n   * @example\n   * ```javascript\n   *  let brightnessRenderer;\n   * \n   *  function setupAsciify() {\n   *      // Get the brightness renderer instance by name.\n   *      brightnessRenderer = p5asciify.asciifier().renderers().get('brightness');\n   * \n   *      // Use the brightness renderer instance to modify its properties during run-time,\n   *      // instead of constantly calling `p5asciify.asciifier().renderers().get('brightness')`.\n   *  }\n   * ```\n   */\n  get(A) {\n    var i;\n    if (!g.validate(\n      typeof A == \"string\" && A.trim() !== \"\",\n      \"Renderer name must be a non-empty string.\",\n      { providedValue: A, method: \"get\" }\n    ))\n      return null;\n    const r = (i = this._renderers.find((s) => s.name === A)) == null ? void 0 : i.renderer;\n    return g.validate(\n      r !== void 0,\n      `Renderer '${A}' not found. Available renderers: ${this._renderers.map((s) => s.name).join(\", \")}`,\n      { providedValue: A, method: \"get\" }\n    ) ? r : null;\n  }\n  /**\n   * Gets a list of all available renderer types (built-in and plugins)\n   * @returns An array of available renderer type IDs\n   */\n  getAvailableRendererTypes() {\n    return [\n      ...Object.keys(K),\n      ...this._pluginRegistry.getIds()\n    ];\n  }\n  /**\n   * Moves a renderer down in the list of renderers, meaning it will be rendered earlier in the pipeline.\n   * @param renderer The renderer to move down in the list.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Move the `\"brightness\"` renderer down in the list of renderers.\n   *      p5asciify.asciifier().renderers().moveDown('brightness');\n   * \n   *      // Alternatively, you can also pass the renderer instance itself.\n   *  }\n   * ```\n   */\n  moveDown(A) {\n    const e = this._getRendererIndex(A), r = g.validate(\n      e >= 0 && e < this._renderers.length,\n      \"Renderer not found in the renderer list.\",\n      { providedValue: A, method: \"moveDown\" }\n    ), t = g.validate(\n      e < this._renderers.length - 1,\n      \"Renderer is already at the bottom of the list.\",\n      { providedValue: A, method: \"moveDown\" }\n    );\n    !r || !t || this.swap(A, this._renderers[e + 1].renderer);\n  }\n  /**\n   * Moves a renderer up in the list of renderers, meaning it will be rendered later in the pipeline.\n   * @param renderer The renderer to move up in the list.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Move the `\"brightness\"` renderer up in the list of renderers.\n   *      p5asciify.asciifier().renderers().moveUp('brightness');\n   * \n   *      // Alternatively, you can also pass the renderer instance itself.\n   *  }\n   * ```\n   */\n  moveUp(A) {\n    const e = this._getRendererIndex(A), r = g.validate(\n      e >= 0 && e < this._renderers.length,\n      \"Renderer not found in the renderer list.\",\n      { providedValue: A, method: \"moveUp\" }\n    ), t = g.validate(\n      e > 0,\n      \"Renderer is already at the top of the list.\",\n      { providedValue: A, method: \"moveUp\" }\n    );\n    !r || !t || this.swap(A, this._renderers[e - 1].renderer);\n  }\n  /**\n   * Removes a renderer from the list of renderers.\n   * @param renderer The name of the renderer or the renderer instance itself.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Remove the `\"brightness\"` renderer from the list of renderers.\n   *      p5asciify.asciifier().renderers().remove('brightness');\n   * \n   *      // Alternatively, you can also pass the renderer instance itself.\n   * }\n   * ```\n   */\n  remove(A) {\n    const e = this._getRendererIndex(A);\n    g.validate(\n      e >= 0 && e < this._renderers.length,\n      \"Renderer not found in the renderer list.\",\n      { providedValue: A, method: \"remove\" }\n    ) && this._renderers.splice(e, 1);\n  }\n  /**\n   * Clears the list of renderers. \n   * Can be useful when you want to start fresh without the default renderers provided by the library.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Clear all existing renderers.\n   *      p5asciify.asciifier().renderers().clear();\n   * \n   *     // With no renderers, you can add your own custom renderer.\n   *     // Otherwise, `p5.asciify` will now render the input image without any ASCII conversion.\n   *  }\n   * ```\n   */\n  clear() {\n    this._renderers = [];\n  }\n  /**\n   * Swaps the positions of two renderers in the renderer list.\n   * @param renderer1 The name of the first renderer or the renderer instance itself.\n   * @param renderer2 The name of the second renderer or the renderer instance itself.\n   * @throws If one or more renderers are not found.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Swap the positions of the `\"brightness\"` and `\"edge\"` renderers.\n   *      p5asciify.asciifier().renderers().swap('brightness', 'edge');\n   * \n   *      // Alternatively, you can also pass the renderer instances themselves.\n   *  }\n   * ```\n   */\n  swap(A, e) {\n    const r = this._getRendererIndex(A), t = this._getRendererIndex(e);\n    if (!g.validate(\n      r >= 0 && r < this._renderers.length && t >= 0 && t < this._renderers.length,\n      \"One or more renderers not found in the renderer list.\",\n      { providedValues: [A, e], method: \"swap\" }\n    ))\n      return;\n    const s = this._renderers[r];\n    this._renderers[r] = this._renderers[t], this._renderers[t] = s;\n  }\n  /**\n   * Enables all renderers in the list of renderers at once.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *     // Enable all default renderers provided by `p5.asciify`.\n   *      p5asciify.asciifier().renderers().enable();\n   *  }\n   * ```\n   */\n  enable() {\n    this._renderers.forEach((A) => A.renderer.enabled(!0));\n  }\n  /**\n   * Disables all renderers in the list of renderers at once.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Disable all renderers in the list.\n   *      p5asciify.asciifier().renderers().disable();\n   *  }\n   * ```\n   */\n  disable() {\n    this._renderers.forEach((A) => A.renderer.enabled(!1));\n  }\n  /**\n   * Enables or disables all renderers in the list of renderers at once.\n   * @param enabled Whether to enable or disable all renderers.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Enable all default renderers provided by `p5.asciify`.\n   *      p5asciify.asciifier().renderers().enabled(true);\n   *  }\n   * ```\n   */\n  enabled(A) {\n    A ? this.enable() : this.disable();\n  }\n  /**\n   * Gets the index of a renderer in the list of renderers.\n   * @param renderer The renderer to get the index of.\n   * @returns The index of the renderer in the list of renderers. Returns -1 if the renderer is not found.\n   */\n  _getRendererIndex(A) {\n    return typeof A == \"string\" ? this._renderers.findIndex((e) => e.name === A) : this._renderers.findIndex((e) => e.renderer === A);\n  }\n  /**\n   * Returns the list of renderers in the pipeline.\n   * \n   * The first renderer in the list is executed last, and the last renderer in the list is executed first.\n   */\n  get renderers() {\n    return this._renderers;\n  }\n  /**\n   * Returns the {@link P5AsciifyDisplayRenderer} instance which performs the final ASCII conversion.\n   */\n  get asciiDisplayRenderer() {\n    return this._asciiDisplayRenderer2D;\n  }\n  /**\n   * Returns the primary color framebuffer, \n   * which contains the primary color framebuffers of all renderers in the pipeline stacked on top of each other.\n   * @ignore\n   */\n  get characterFramebuffer() {\n    return this._characterFramebuffer;\n  }\n  /**\n   * Returns the primary color framebuffer,\n   * which contains the primary color framebuffers of all renderers in the pipeline stacked on top of each other.\n   * @ignore\n   */\n  get primaryColorFramebuffer() {\n    return this._primaryColorFramebuffer;\n  }\n  /**\n   * Returns the secondary color framebuffer,\n   * which contains the secondary color framebuffers of all renderers in the pipeline stacked on top of each other.\n   * @ignore\n   */\n  get secondaryColorFramebuffer() {\n    return this._secondaryColorFramebuffer;\n  }\n  /**\n   * Returns the inversion framebuffer,\n   * which contains the inversion framebuffers of all renderers in the pipeline stacked on top of each other.\n   * @ignore\n   */\n  get transformFramebuffer() {\n    return this._transformFramebuffer;\n  }\n  /**\n   * Returns the rotation framebuffer,\n   * which contains the rotation framebuffers of all renderers in the pipeline stacked on top of each other.\n   * @ignore\n   */\n  get rotationFramebuffer() {\n    return this._rotationFramebuffer;\n  }\n  /**\n   * Returns a boolean indicating whether any renderers are enabled in the pipeline.\n   */\n  get hasEnabledRenderers() {\n    return this._hasEnabledRenderers;\n  }\n}\nclass gA {\n  /**\n   * Creates a new instance of the `P5Asciifier` class.\n   * @param pluginRegistry The plugin registry instance.\n   * @ignore\n   */\n  constructor(A) {\n    /** Manages the font and provides methods to access font properties. */\n    o(this, \"_fontManager\");\n    /** Contains the grid dimensions and offsets to create a perfect grid based on the canvas and font glyph dimensions. */\n    o(this, \"_grid\");\n    /** Wraps around the user's `draw()` function to capture it's output for the ascii renderers to asciify. */\n    o(this, \"_captureFramebuffer\");\n    /** Manages the available ASCII renderers and handles rendering the ASCII output to the canvas. */\n    o(this, \"_rendererManager\");\n    /** The font size for the ASCII renderers. */\n    o(this, \"_fontSize\", 16);\n    /** The background color for the ASCII output, which is used to fill the space not covered by cells in the grid. */\n    o(this, \"_backgroundColor\", \"#000000\");\n    /** The `p5.js` instance. */\n    o(this, \"_p\");\n    /** Defines if the ASCII output should be rendered to the canvas or not. */\n    o(this, \"_renderToCanvas\", !0);\n    /** The plugin registry instance. */\n    o(this, \"_pluginRegistry\");\n    /** Indicates if the setup has been completed. */\n    o(this, \"_setupDone\", !1);\n    this._pluginRegistry = A;\n  }\n  /**\n   * Initializes the asciifier by setting the `p5.js` instance and loading the font manager with the default font.\n   * \n   * This method is called automatically when p5.js is initialized or a new `P5Asciifier` instance is added through the {@link P5AsciifierManager} instance {@link p5asciify}.\n   * @param p The p5.js instance of the sketch.\n   * @param fontBase64 The base64 string of the font to use for ASCII conversion.\n   * \n   * @ignore\n   */\n  async init(A) {\n    this._p = A;\n  }\n  /**\n   * Sets up the asciifier by initializing the font texture atlas, grid, and renderer manager.\n   * \n   * There is no need to call this method manually if the asciifier is added through the {@link P5AsciifierManager} instance {@link p5asciify}.\n   * \n   * @ignore\n   */\n  async setup(A, e) {\n    this._captureFramebuffer = A, this._fontManager = new kA(this._p, e), R(j(this._p)) ? await this._fontManager.setup(this._fontSize) : this._fontManager.setup(this._fontSize), this._grid = new VA(\n      this._captureFramebuffer,\n      this._fontManager.maxGlyphDimensions.width,\n      this._fontManager.maxGlyphDimensions.height\n    ), this._rendererManager = new xA(\n      this._p,\n      this._captureFramebuffer,\n      this._grid,\n      this._fontManager,\n      this._pluginRegistry\n    ), this._setupDone = !0;\n  }\n  /**\n   * Renders the ASCII output to the canvas.\n   * \n   * Automatically called after the user's `draw()` function has finished when managed by the {@link P5AsciifierManager} instance {@link p5asciify}.\n   * \n   * @ignore\n   */\n  asciify() {\n    this._rendererManager.render(this._backgroundColor), this._renderToCanvas && (this._rendererManager.hasEnabledRenderers ? this._p.image(this._rendererManager.asciiDisplayRenderer.resultFramebuffer, -(this._p.width / 2) + this._grid.offsetX, -(this._p.height / 2) + this._grid.offsetY) : (this._p.clear(), this._p.image(this._captureFramebuffer, -(this._captureFramebuffer.width / 2), -(this._captureFramebuffer.height / 2))));\n  }\n  /**\n   * Sets the font size for the ASCII renderers of the asciifier.\n   * @param fontSize The font size to set.\n   * @throws If the font size is not a positive number.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Set the font size to 32 to use for all ASCII renderers of the asciifier.\n   *      p5asciify.asciifier().fontSize(32);\n   *  }\n   * ```\n   */\n  fontSize(A) {\n    !g.validate(\n      typeof A == \"number\" && A > 0,\n      `Invalid font size: ${A}. Expected a positive number.`,\n      { providedValue: A, method: \"fontSize\" }\n    ) || this._fontSize === A || this._setupDone && (this._fontSize = A, this._fontManager.setFontSize(A), this._grid.resizeCellPixelDimensions(\n      this._fontManager.maxGlyphDimensions.width,\n      this._fontManager.maxGlyphDimensions.height\n    ), this._rendererManager.resetRendererDimensions());\n  }\n  /**\n   * Returns the {@link P5AsciifyRendererManager}, containing all ASCII renderers in the rendering pipeline of the asciifier.\n   * @returns The renderer manager.\n   * \n   * @example\n   * ```javascript\n   *  let defaultBrightnessRenderer;\n   * \n   *  function setupAsciify() {\n   *      // Fetch the default brightness renderer from the renderer manager.\n   *      defaultBrightnessRenderer = p5asciify.asciifier().renderers().get(\"brightness\");\n   * \n   *      // Update any options for the renderer.\n   *      defaultBrightnessRenderer.update({ invert: true });\n   *  }\n   * ```\n   */\n  renderers() {\n    return this._rendererManager;\n  }\n  /**\n   * Returns a specific renderer by name from the renderer manager.\n   * @param name The name of the renderer to retrieve.\n   * @returns The renderer instance if found, or null if not found.\n   * \n   * @example\n   * ```javascript\n   * let brightnessRenderer;\n   * \n   * function setupAsciify() {\n   *     // Fetch the brightness renderer from the renderer manager.\n   *     brightnessRenderer = p5asciify.asciifier().renderer(\"brightness\");\n   * \n   *     // Alternatively:\n   *     // brightnessRenderer = p5asciifier.renderer(\"brightness\");\n   *     // brightnessRenderer = p5asciifier.renderers().get(\"brightness\");\n   *     // brightnessRenderer = p5asciify.asciifier().renderers().get(\"brightness\");\n   * }\n   * ```\n   */\n  renderer(A) {\n    return this._rendererManager.get(A);\n  }\n  /**\n   * Sets the framebuffer or graphics object to capture for ASCII conversion.\n   * \n   * Updates the capture source that will be processed by the ASCII rendering pipeline.\n   * This allows switching between different rendering targets without recreating the asciifier.\n   * \n   * @param captureFramebuffer - The framebuffer or graphics object to capture from.\n   *                            Can be a p5.Framebuffer or p5.Graphics.\n   */\n  setCaptureTexture(A) {\n    this._captureFramebuffer !== A && (this._captureFramebuffer = A, this._grid.updateTexture(A), this._rendererManager.setCaptureTexture(A));\n  }\n  /**\n   * Sets the font for the ascii renderers in the rendering pipeline of the asciifier.\n   * @param font The `p5.Font` object to use for ASCII rendering.\n   * @param options An object containing options affecting what happens after the font is loaded.\n   * @param options.updateCharacters If `true` *(default)*, updates set character sets in pre-defined renderers like the brightness-based ASCII renderer.\n   *                                 This might cause an error if the new font does not contain the character sets used with the previous font.\n   *                                 If `false`, those character sets are not updated, potentially leading to missing/different characters in the ASCII output if the mapping is not the same.\n   * @throws If the font parameter is invalid.\n   * \n   * @example\n   * ```javascript\n   *  let font;\n   * \n   *  function preload() {\n   *      // Load font during preload using p5.js `loadFont` function.\n   *      font = loadFont('path/to/font.ttf');\n   *  }\n   * \n   *  function setupAsciify() {\n   *      // Set the font to the default asciifier instance.\n   *      p5asciify.asciifier().font(font);\n   *  }\n   * ```\n   */\n  font(A, e = { updateCharacters: !0 }) {\n    this._fontManager.font !== A && (this._fontManager.loadFont(A), this._setupDone && (this._fontManager.reset(), this._grid.resizeCellPixelDimensions(\n      this._fontManager.maxGlyphDimensions.width,\n      this._fontManager.maxGlyphDimensions.height\n    ), e.updateCharacters && this._rendererManager.renderers.forEach(\n      (r) => {\n        r.renderer instanceof z && r.renderer.characters(r.renderer.options.characters);\n      }\n    ), this._rendererManager.resetRendererDimensions()));\n  }\n  /**\n   * Sets the background color for the resulting {@link texture} of the ASCII output, and the SVG export.\n   * \n   * To make the background transparent, pass an appropriate color value with an alpha value of `0`.\n   * \n   * @param color The color to set. Needs to be a valid type to pass to the `background()` function provided by p5.js.\n   * @throws If the color is not a string, array or `p5.Color`.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Set the background color to black.\n   *      p5asciify.asciifier().background('#000000');\n   *  }\n   * ```\n   */\n  background(A) {\n    g.validate(\n      typeof A == \"string\" || Array.isArray(A) || J(this._p, A),\n      `Invalid color type: ${typeof A}. Expected string, array or p5.Color.`,\n      { providedValue: A, method: \"background\" }\n    ) && (this._backgroundColor = A);\n  }\n  /**\n   * Sets the grid dimensions for the ASCII renderers. \n   * Calling this method will make the grid dimensions fixed, no longer adjusting automatically when the canvas size changes.\n   * \n   * To make the grid dimensions responsive to the canvas size again, use the {@link gridResponsive} method.\n   * \n   * @param gridCols The number of columns in the grid.\n   * @param gridRows The number of rows in the grid.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Set the grid dimensions to 100 columns, 50 rows.\n   *      p5asciify.asciifier().gridDimensions(100, 50);\n   *  }\n   * ```\n   */\n  gridDimensions(A, e) {\n    this._grid.cols === A && this._grid.rows === e || (this._grid.resizeGridDimensions(A, e), this._rendererManager.resetRendererDimensions());\n  }\n  /**\n   * Adjust the grid dimensions to be responsive to the canvas size or fixed.\n   * \n   * If `true`, the grid dimensions will be adjusted every time the canvas size changes to create a perfect grid on the x and y axes.\n   * \n   * If `false`, the grid dimensions will be fixed and not change when the canvas size changes.\n   * \n   * @param bool Determines if the grid dimensions should be responsive to the canvas size.\n   */\n  gridResponsive(A = !0) {\n    A ? this._grid.resetGridDimensions() : this._grid.fixedDimensions = !0;\n  }\n  /**\n   * Saves the current ASCII output as an SVG file.\n   * @param options The options for saving the SVG file.\n   * @throws If no renderer is available to fetch ASCII output from.\n   * \n   * @example\n   * ```javascript\n   * function drawAsciify() {\n   *     // Save the ASCII output as an SVG file with default options\n   *     if (frameCount === 60) {\n   *         p5asciify.asciifier().saveSVG(\"asciify_output\");\n   *     }\n   *     \n   *     // Save without cell background rectangles\n   *     if (frameCount === 120) {\n   *         p5asciify.asciifier().saveSVG({\n   *             filename: \"asciify_clean\",\n   *             includeBackgrounds: false\n   *         });\n   *     }\n   * }\n   * ```\n   */\n  saveSVG(A = {}) {\n    new BA(this._p).saveSVG(\n      this._rendererManager,\n      this._grid,\n      this._fontManager,\n      this._backgroundColor,\n      A\n    );\n  }\n  /**\n   * Returns the current ASCII output as an SVG string.\n   * @param options Options for SVG generation (same as saveSVG options except filename)\n   * @returns SVG string representation of the ASCII output\n   * @throws If no renderer is available to fetch ASCII output from.\n   * \n   * @example\n   * ```javascript\n   *  function drawAsciify() {\n   *      // Get the ASCII output as an SVG string\n   *      if (frameCount === 60) {\n   *          const svgString = p5asciify.asciifier().toSVG();\n   *          console.log(svgString);\n   *      }\n   *      \n   *      // Get SVG without background rectangles and in text mode\n   *      if (frameCount === 120) {\n   *          const svgString = p5asciify.asciifier().toSVG({\n   *              includeBackgroundRectangles: false,\n   *              drawMode: 'text'\n   *          });\n   *          console.log(svgString);\n   *      }\n   *  }\n   * ```\n   */\n  toSVG(A = {}) {\n    return new BA(this._p).generateSVG(\n      this._rendererManager,\n      this._grid,\n      this._fontManager,\n      this._backgroundColor,\n      A\n    );\n  }\n  /**\n   * Saves the current ASCII output as a JSON file.\n   * @param options The options for saving the JSON file.\n   * @throws If no renderer is available to fetch ASCII output from.\n   */\n  saveJSON(A = {}) {\n    new QA(this._p).saveJSON(\n      this._rendererManager,\n      this._grid,\n      this._fontManager,\n      A\n    );\n  }\n  /**\n   * Returns the current ASCII output as a JSON string.\n   * @param options Options for JSON generation (same as saveJSON options except filename)\n   * @returns JSON string representation of the ASCII output\n   * @throws If no renderer is available to fetch ASCII output from.\n   * \n   * @example\n   * ```javascript\n   *  function drawAsciify() {\n   *      // Get the ASCII output as a JSON string\n   *      if (frameCount === 60) {\n   *          const jsonString = p5asciify.asciifier().toJSON();\n   *          console.log(jsonString);\n   *      }\n   *      \n   *      // Get JSON without empty cells and without pretty printing\n   *      if (frameCount === 120) {\n   *          const compactJson = p5asciify.asciifier().toJSON({\n   *              includeEmptyCells: false,\n   *              prettyPrint: false\n   *          });\n   *          console.log(compactJson);\n   *      }\n   *  }\n   * ```\n   */\n  toJSON(A = {}) {\n    return new QA(this._p).generateJSON(\n      this._rendererManager,\n      this._grid,\n      this._fontManager,\n      A\n    );\n  }\n  /**\n   * Generates the ASCII output as an array of string rows.\n   * @returns Array of strings representing ASCII output.\n   * @throws If no renderer is available.\n   */\n  _generateAsciiTextOutput() {\n    const A = this._rendererManager.characterFramebuffer;\n    A.loadPixels();\n    const e = A.pixels, r = this._grid.cols, t = this._grid.rows, i = this._fontManager.characters, s = [];\n    let a = 0;\n    for (let E = 0; E < t; E++) {\n      let Q = \"\";\n      for (let h = 0; h < r; h++) {\n        const c = a * 4, p = e[c], d = e[c + 1];\n        let l = p + (d << 8);\n        l >= i.length && (l = i.length - 1), Q += i[l].character, a++;\n      }\n      s.push(Q);\n    }\n    return s;\n  }\n  /**\n   * Returns the current ASCII output as a string.\n   * @returns Multi-line string representation of the ASCII output.\n   * @throws If no renderer is available to fetch ASCII output from.\n   * \n   * @example\n   * ```javascript\n   *  function drawAsciify() {\n   *      // Print the ASCII output to the console.\n   *      if (frameCount === 1101100011101010110111001100001) {\n   *          console.log(p5asciify.asciifier().toString());\n   *      }\n   *  }\n   * ```\n   */\n  toString() {\n    return this._generateAsciiTextOutput().join(`\n`);\n  }\n  /**\n   * Saves the ASCII output to a text file.\n   * @param filename The filename to save the text file as. If not provided, a default filename is used.\n   * @throws If no renderer is available to fetch ASCII output from.\n   * \n   * @example\n   * ```javascript\n   * function drawAsciify() {\n   *     // Save the ASCII output to a text file.\n   *      if (frameCount === 11100110110111101101100) {\n   *         p5asciify.asciifier().saveStrings(\"ascii_output\");\n   *     }\n   * }\n   * ```\n   */\n  saveStrings(A) {\n    if (!A) {\n      const e = /* @__PURE__ */ new Date(), r = e.toISOString().split(\"T\")[0], t = e.toTimeString().split(\" \")[0].replace(/:/g, \"-\");\n      A = `asciify_output_${r}_${t}`;\n    }\n    this._p.saveStrings(this._generateAsciiTextOutput(), `${A}.txt`);\n  }\n  /**\n   * Sets whether the ASCII output should be rendered to the canvas or not.\n   * \n   * If this is set to `false`, the canvas will remain clear/empty until you start drawing stuff again in `drawAsciify()` after the `draw()`function finishes.\n   * This is because `p5.asciify` wraps your `draw()` loop inside a framebuffer's `begin()` and `end()`.\n   * \n   * By default, this is set to `true`, meaning the ASCII output will be rendered to the canvas **after** the `draw()` function ends, \n   * but before the `drawAsciify()` function is called.\n   * \n   * @param bool `true` to render to the canvas, `false` to not render.\n   */\n  renderToCanvas(A) {\n    g.validate(\n      typeof A == \"boolean\",\n      `Invalid type for renderToCanvas: ${typeof A}. Expected boolean.`,\n      { providedValue: A, method: \"renderToCanvas\" }\n    ) && (this._renderToCanvas = A);\n  }\n  /**\n   * Sets the background mode for the ASCII output.\n   * \n   * If the mode is set to `fixed`, the background color set via {@link background} will be used for transparent cells.\n   * \n   * If the mode is set to `sampled`, the background color will be sampled from the pixel data of the texture that is being captured.\n   * \n   * @param mode The background mode to set. Can be either `\"fixed\"` or `\"sampled\"`.\n   */\n  backgroundMode(A = \"fixed\") {\n    g.validate(\n      A === \"fixed\" || A === \"sampled\",\n      `Invalid background mode: ${A}. Expected \"fixed\" or \"sampled\".`,\n      { providedValue: A, method: \"backgroundMode\" }\n    ) && this._rendererManager.asciiDisplayRenderer.backgroundMode(A === \"fixed\" ? 0 : 1);\n  }\n  /**\n   * Loads a JSON string or object and returns the framebuffers for the character, primary color, secondary color, transform, and rotation.\n   * \n   * This method is useful for loading JSON exports from the {@link saveJSON} method in custom renderers.\n   * The framebuffers match the dimensions of the grid defined in the JSON.\n   * Each framebuffer contains the pixel data for the respective properties, \n   * which can be drawn to the respective custom renderers framebuffers via the `image()` function.\n   * \n   * @param json The JSON string or object to load.\n   * @returns An object containing the framebuffers for character, primary color, secondary color, transform, and rotation.\n   * @throws If the JSON format is invalid or unsupported.\n   */\n  loadJSON(A) {\n    let e;\n    if (!g.validate(\n      A != null,\n      \"JSON input cannot be null or undefined.\",\n      { providedValue: A, method: \"loadJSON\" }\n    ))\n      return {\n        characterFramebuffer: null,\n        primaryColorFramebuffer: null,\n        secondaryColorFramebuffer: null,\n        transformFramebuffer: null,\n        rotationFramebuffer: null\n      };\n    try {\n      e = typeof A == \"string\" ? JSON.parse(A) : A;\n    } catch (B) {\n      return g.validate(\n        !1,\n        `Invalid JSON format: ${B.message}`,\n        { providedValue: A, method: \"loadJSON\" }\n      ), {\n        characterFramebuffer: null,\n        primaryColorFramebuffer: null,\n        secondaryColorFramebuffer: null,\n        transformFramebuffer: null,\n        rotationFramebuffer: null\n      };\n    }\n    const t = g.validate(\n      e && typeof e == \"object\" && e.metadata && e.cells,\n      \"Invalid JSON format: missing metadata or cells\",\n      { providedValue: e, method: \"loadJSON\" }\n    );\n    if (!g.validate(\n      e.metadata.version === \"1.0\",\n      `Unsupported JSON version: ${e.metadata.version}`,\n      { providedValue: e.metadata.version, method: \"loadJSON\" }\n    ) || !t)\n      return {\n        characterFramebuffer: null,\n        primaryColorFramebuffer: null,\n        secondaryColorFramebuffer: null,\n        transformFramebuffer: null,\n        rotationFramebuffer: null\n      };\n    const s = e.metadata.gridSize, a = s.cols, E = s.rows, Q = {\n      width: a,\n      height: E,\n      antialias: !1,\n      textureFiltering: this._p.NEAREST,\n      depthFormat: this._p.UNSIGNED_INT\n    }, h = this._p.createFramebuffer(Q), c = this._p.createFramebuffer(Q), p = this._p.createFramebuffer(Q), d = this._p.createFramebuffer(Q), l = this._p.createFramebuffer(Q), _ = (B, C, f, b) => {\n      B.begin(), this._p.push(), this._p.noStroke(), this._p.fill(b);\n      const D = C - a / 2 + 0.5, I = f - E / 2 + 0.5;\n      this._p.rect(D, I, 1, 1), this._p.pop(), B.end();\n    };\n    for (const B of e.cells)\n      if (!(B.x < 0 || B.y < 0 || B.x >= a || B.y >= E)) {\n        if (B.character) {\n          const C = this._fontManager.glyphColor(B.character);\n          _(h, B.x, B.y, C);\n        }\n        if (B.color && _(c, B.x, B.y, B.color), B.backgroundColor && _(p, B.x, B.y, B.backgroundColor), B.rotation !== void 0) {\n          const C = Math.round(B.rotation % 360 * 0.7083333333333334);\n          _(l, B.x, B.y, C);\n        }\n        if (B.flipHorizontal !== void 0 || B.flipVertical !== void 0 || B.inverted !== void 0) {\n          const C = B.inverted === !0, f = B.flipHorizontal === !0, b = B.flipVertical === !0;\n          _(d, B.x, B.y, [\n            C ? 255 : 0,\n            f ? 255 : 0,\n            b ? 255 : 0,\n            255\n          ]);\n        }\n      }\n    return {\n      characterFramebuffer: h,\n      primaryColorFramebuffer: c,\n      secondaryColorFramebuffer: p,\n      transformFramebuffer: d,\n      rotationFramebuffer: l\n    };\n  }\n  /**\n   * Sets the p5.js `fill()` color to the color of the given character in the font texture atlas.\n   * \n   * This method can be useful when drawing to a custom renderers `characterFramebuffer`, \n   * which is used to convert the pixel data to ASCII characters.\n   * \n   * @param character The character to get the color for.\n   * \n   * @example\n   * ```javascript\n   *  let characterFramebuffer;\n   *  let primaryColorFramebuffer;\n   *  let secondaryColorFramebuffer;\n   * \n   *  let asciifier;\n   * \n   *  function setup() {\n   *      createCanvas(400, 400, WEBGL);\n   *  }\n   * \n   *  function setupAsciify() {\n   *      asciifier = p5asciify.asciifier();\n   * \n   *      // Enable the default custom renderer\n   *      asciifier.renderers().get(\"custom\").enable();\n   *      \n   *      // Assign the ascii renderer's character framebuffer to a global variable\n   *      characterFramebuffer = asciifier.renderers().get(\"custom\").characterFramebuffer;\n   *      primaryColorFramebuffer = asciifier.renderers().get(\"custom\").primaryColorFramebuffer;\n   *      secondaryColorFramebuffer = asciifier.renderers().get(\"custom\").secondaryColorFramebuffer;\n   *  }\n   * \n   *  function draw() {\n   *      // Draw a rectangle with the character 'A' to the character framebuffer\n   *      characterFramebuffer.begin();\n   *      clear();\n   *      asciifier.fill(\"A\");\n   *      rect(0, 0, 10, 10);\n   *      characterFramebuffer.end();\n   * \n   *      // Makes all ascii characters on the grid white.\n   *      primaryColorFramebuffer.begin();\n   *      background(255);\n   *      primaryColorFramebuffer.end();\n   * \n   *      // Makes all cell background colors black.\n   *      secondaryColorFramebuffer.begin();\n   *      background(0);\n   *      secondaryColorFramebuffer.end();\n   *  }\n   * ```\n   */\n  fill(A) {\n    this._p.fill(this._fontManager.glyphColor(A));\n  }\n  /**\n   * Returns the {@link P5AsciifyGrid} instance, which contains information about grid properties.\n   * \n   * @example\n   * ```javascript\n   * let framebuffer;\n   * \n   * function setupAsciify() {\n   *      // Can be useful to create a framebuffer with the same dimensions as the grid.\n   *      framebuffer = createFramebuffer({\n   *          width: p5asciify.asciifier().grid.cols, \n   *          height: p5asciify.asciifier().grid.rows\n   *      });\n   * }\n   * ```\n   */\n  get grid() {\n    return this._grid;\n  }\n  /**\n   * Returns the font manager, which manages the font and provides methods to access font properties like available characters and their corresponding rgb values,\n   * and the texture containing all the characters in the font.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Print all existing characters in the font to the console.\n   *      console.log(p5asciify.asciifier().fontManager.characters);\n   *  }\n   * ```\n   */\n  get fontManager() {\n    return this._fontManager;\n  }\n  /**\n   * Retrieves the framebuffer that contains the content to asciify.\n   * \n   * The returned framebuffer either contains everything drawn on the p5.js main canvas, or a custom framebuffer if set during initialization.\n   * \n   * @ignore\n   */\n  get captureFramebuffer() {\n    return this._captureFramebuffer;\n  }\n  /**\n   * Returns the ASCII output texture as a `p5.Framebuffer`, which can be used for further processing or rendering.\n   * Can also be used via the p5.js `texture()` function.\n   * \n   * @example\n   * ```javascript\n   *  // Draw something on the canvas to asciify.\n   *  function draw() {\n   *      background(0);\n   *      fill(255);\n   *      box(100);\n   *  }\n   * \n   *  // Apply the asciified output as a texture to a 3D box.\n   *  function drawAsciify() {\n   *      orbitControl();\n   * \n   *      clear();\n   *      texture(p5asciify.asciifier().texture);\n   *      rotateX(frameCount * 0.01);\n   *      rotateY(frameCount * 0.01);\n   *      box(100);\n   *  }\n   * ```\n   */\n  get texture() {\n    return this._rendererManager.asciiDisplayRenderer.resultFramebuffer;\n  }\n}\nconst v = class v {\n  constructor() {\n    o(this, \"registeredHooks\", /* @__PURE__ */ new Map());\n    o(this, \"p5AddonRegistered\", !1);\n    o(this, \"hookHandlers\");\n    // Cache for user functions\n    o(this, \"_cachedSetupAsciifyFn\", null);\n    o(this, \"_cachedDrawAsciifyFn\", null);\n    if (v._instance)\n      throw new Y(\"P5AsciifyHookManager is a singleton and cannot be instantiated multiple times.\");\n  }\n  static getInstance() {\n    return v._instance || (v._instance = new v()), v._instance;\n  }\n  /**\n   * Initialize the hook manager with dependency injection\n   * @param handlers The hook handlers that implement core functionality\n   * @ignore\n   */\n  initialize(A) {\n    this.hookHandlers || (this.hookHandlers = A, this._registerCoreHooks(), this._integrateWithP5());\n  }\n  /**\n   * Register the core p5.asciify hooks using injected handlers\n   * @private\n   */\n  _registerCoreHooks() {\n    const A = this.hookHandlers, e = function() {\n      return A.handleInit(this);\n    };\n    this._registerHook(\"init\", e, !1);\n    const r = function() {\n      if (!(this._renderer.drawingContext instanceof WebGLRenderingContext || this._renderer.drawingContext instanceof WebGL2RenderingContext))\n        throw new Y(\"WebGL renderer is required for p5.asciify to run.\");\n      if (O(this.VERSION, \"1.8.0\") < 0)\n        throw new Y(\"p5.asciify requires p5.js v1.8.0 or higher to run.\");\n      if (O(this.VERSION, \"2.0.0\") >= 0)\n        return (async () => {\n          await A.handleSetup(this);\n          const s = v.getInstance();\n          s._cachedSetupAsciifyFn = this.setupAsciify || (this._isGlobal && typeof window < \"u\" && typeof window.setupAsciify == \"function\" ? window.setupAsciify : null), s._cachedDrawAsciifyFn = this.drawAsciify || (this._isGlobal && typeof window < \"u\" && typeof window.drawAsciify == \"function\" ? window.drawAsciify : null), typeof s._cachedSetupAsciifyFn == \"function\" && await s._cachedSetupAsciifyFn.call(this);\n        })();\n      {\n        A.handleSetup(this);\n        const s = v.getInstance();\n        s._cachedSetupAsciifyFn = this.setupAsciify || (this._isGlobal && typeof window < \"u\" && typeof window.setupAsciify == \"function\" ? window.setupAsciify : null), s._cachedDrawAsciifyFn = this.drawAsciify || (this._isGlobal && typeof window < \"u\" && typeof window.drawAsciify == \"function\" ? window.drawAsciify : null), typeof s._cachedSetupAsciifyFn == \"function\" && s._cachedSetupAsciifyFn.call(this);\n      }\n    };\n    this._registerHook(\"afterSetup\", r, !1);\n    const t = function() {\n      A.handlePreDraw(this);\n    };\n    this._registerHook(\"pre\", t, !1);\n    const i = function() {\n      A.handlePostDraw(this);\n      const s = v.getInstance();\n      typeof s._cachedDrawAsciifyFn == \"function\" && s._cachedDrawAsciifyFn.call(this);\n    };\n    this._registerHook(\"post\", i, !1);\n  }\n  /**\n   * Integrate with p5.js based on version\n   * @private\n   */\n  _integrateWithP5() {\n    if (typeof P > \"u\" || !P || !P.VERSION) {\n      console.log(\"p5.asciify loading without automatic hooks!\");\n      return;\n    }\n    O(P.VERSION, \"2.0.0\") >= 0 && typeof P.registerAddon == \"function\" ? this.p5AddonRegistered || (P.registerAddon(this._createP5Addon()), this.p5AddonRegistered = !0) : this._registerLegacyHooks();\n  }\n  /**\n   * Create p5.js v2.0.0+ addon configuration\n   * @private\n   */\n  _createP5Addon() {\n    const A = this;\n    return function(r, t, i) {\n      i.presetup = async function() {\n        const s = A.getHooks(\"init\");\n        for (const a of s)\n          await a.fn.call(this);\n      }, i.postsetup = async function() {\n        const s = A.getHooks(\"afterSetup\");\n        for (const a of s)\n          await a.fn.call(this);\n      }, i.predraw = function() {\n        const s = A.getHooks(\"pre\");\n        for (const a of s)\n          a.fn.call(this);\n      }, i.postdraw = function() {\n        const s = A.getHooks(\"post\");\n        for (const a of s)\n          a.fn.call(this);\n      };\n    };\n  }\n  /**\n   * Register hooks with p5.js v1.x.x legacy system\n   * @private\n   */\n  _registerLegacyHooks() {\n    this.registeredHooks.forEach((A, e) => {\n      A.registered || (P.prototype.registerMethod(e, A.proxyFn), A.registered = !0);\n    });\n  }\n  /**\n   * Register a hook function with proxy-based activation control\n   * @param hookType The type of hook to register\n   * @param fn The function to execute\n   * @param isCore Whether this is a core hook (protected from deactivation)\n   */\n  _registerHook(A, e, r = !1) {\n    const t = this, s = {\n      originalFn: e,\n      proxyFn: function() {\n        const a = t.registeredHooks.get(A);\n        if (a && a.active)\n          return a.originalFn.call(this);\n      },\n      active: !0,\n      // Start active by default\n      isCore: r,\n      registered: !1\n    };\n    this.registeredHooks.set(A, s);\n  }\n  /**\n   * Activate a hook by setting its proxy to active\n   * @param hookType The type of hook to activate\n   */\n  activateHook(A) {\n    if (!g.validate(\n      A && typeof A == \"string\" && A.trim() !== \"\",\n      \"Hook type must be a non-empty string.\",\n      { providedValue: A, method: \"activateHook\" }\n    ))\n      return;\n    const r = this.registeredHooks.get(A);\n    g.validate(\n      r !== void 0,\n      `Hook '${A}' not found.`,\n      { providedValue: A, method: \"activateHook\" }\n    ) && (r.active = !0);\n  }\n  /**\n   * Deactivate a hook by setting its proxy to inactive\n   * @param hookType The type of hook to deactivate\n   */\n  deactivateHook(A) {\n    if (!g.validate(\n      A && typeof A == \"string\" && A.trim() !== \"\",\n      \"Hook type must be a non-empty string.\",\n      { providedValue: A, method: \"deactivateHook\" }\n    ))\n      return;\n    const r = this.registeredHooks.get(A);\n    !g.validate(\n      r !== void 0,\n      `Hook '${A}' not found.`,\n      { providedValue: A, method: \"deactivateHook\" }\n    ) || !g.validate(\n      !r.isCore,\n      `Core hook '${A}' cannot be deactivated.`,\n      { providedValue: A, method: \"deactivateHook\" }\n    ) || (r.active = !1);\n  }\n  /**\n   * Check if a hook is currently active\n   * @param hookType The type of hook to check\n   * @returns Whether the hook is active\n   */\n  isHookActive(A) {\n    const e = this.registeredHooks.get(A);\n    return e ? e.active : !1;\n  }\n  /**\n   * Get all hooks for a specific type (used internally by addon system)\n   * @param hookType The type of hooks to retrieve\n   * @returns Array of active hook functions\n   * @ignore\n   */\n  getHooks(A) {\n    const e = this.registeredHooks.get(A);\n    return e && e.active ? [{ fn: e.originalFn }] : [];\n  }\n};\n// Singleton pattern for easy access from addon config\no(v, \"_instance\", null);\nlet cA = v;\nconst mA = `data:font/truetype;charset=utf-8;base64,n`;\nclass vA {\n  constructor() {\n    // Map of plugin id to plugin instance\n    o(this, \"_plugins\", /* @__PURE__ */ new Map());\n  }\n  /**\n   * Registers a new renderer plugin.\n   * @param plugin The renderer plugin to register\n   * @throws If a plugin with the same ID is already registered or conflicts with built-in renderers\n   */\n  register(A) {\n    return !g.validate(\n      A && typeof A == \"object\",\n      \"Plugin must be a valid P5AsciifyRendererPlugin object.\",\n      { providedValue: A, method: \"register\" }\n    ) || !g.validate(\n      typeof A.id == \"string\" && A.id.trim() !== \"\",\n      \"Plugin must have a valid non-empty ID.\",\n      { providedValue: A.id, method: \"register\" }\n    ) || !g.validate(\n      !this._plugins.has(A.id),\n      `A plugin with ID '${A.id}' is already registered.`,\n      { providedValue: A.id, method: \"register\" }\n    ) ? !1 : (this._plugins.set(A.id, A), !0);\n  }\n  /**\n   * Check if a plugin with the given ID is registered\n   * @param id Plugin ID to check\n   * @returns True if the plugin exists, false otherwise\n   */\n  has(A) {\n    return this._plugins.has(A);\n  }\n  /**\n   * Get a plugin by its ID\n   * @param id Plugin ID\n   * @returns The plugin instance or undefined if not found\n   */\n  get(A) {\n    return this._plugins.get(A);\n  }\n  /**\n   * Unregister a plugin by its ID\n   * @param id Plugin ID to remove\n   * @returns True if the plugin was removed, false if it wasn't found\n   */\n  unregister(A) {\n    return this._plugins.delete(A);\n  }\n  /**\n   * Get all registered plugin IDs\n   * @returns Array of plugin IDs\n   */\n  getIds() {\n    return Array.from(this._plugins.keys());\n  }\n  /**\n   * Get all registered plugins\n   * @returns Array of plugin instances\n   */\n  getAll() {\n    return Array.from(this._plugins.values());\n  }\n}\nconst k = class k {\n  /**\n   * Creates a new `P5AsciifierManager` instance.\n   */\n  constructor() {\n    /** The p5.js instance used by the library. */\n    o(this, \"_p\");\n    /** The list of {@link P5Asciifier} instances managed by the library. */\n    o(this, \"_asciifiers\");\n    /** The base font used by the library. */\n    o(this, \"_baseFont\");\n    /** Contains the content that has been drawn to the `p5.js` canvas throughout the `draw()` loop. */\n    o(this, \"_sketchFramebuffer\");\n    /** The plugin registry instance. */\n    o(this, \"_pluginRegistry\");\n    /** The hook manager instance. */\n    o(this, \"_hookManager\");\n    /** Indicates whether the setup phase has been completed. */\n    o(this, \"_setupDone\", !1);\n    /** The version of the p5.js library used. */\n    o(this, \"_p5Version\");\n    /** The background color for the ASCII outputs, which is used to fill transparent areas. */\n    o(this, \"_backgroundColor\", \"#000000\");\n    if (k._instance)\n      throw new Y(\"P5AsciifierManager is a singleton and cannot be instantiated directly. Use P5AsciifierManager.getInstance() instead.\");\n    this._pluginRegistry = new vA(), this._asciifiers = [new gA(this._pluginRegistry)], this._hookManager = cA.getInstance(), this._hookManager.initialize(this);\n  }\n  /**\n   * Gets the singleton instance of `P5AsciifierManager`.\n   */\n  static getInstance() {\n    return k._instance || (k._instance = new k()), k._instance;\n  }\n  /**\n   * Handle initialization hook\n   * @ignore\n   */\n  async handleInit(A) {\n    return await this.init(A);\n  }\n  /**\n   * Handle setup hook\n   * @ignore\n   */\n  async handleSetup(A) {\n    return await this.setup();\n  }\n  /**\n   * Handle pre-draw hook\n   * @ignore\n   */\n  handlePreDraw(A) {\n    this._sketchFramebuffer && (this._sketchFramebuffer.begin(), A.clear());\n  }\n  /**\n   * Handle post-draw hook\n   * @ignore\n   */\n  handlePostDraw(A) {\n    this._sketchFramebuffer && (this._sketchFramebuffer.end(), this.asciify());\n  }\n  /**\n   * Initializes the `p5.asciify` library by setting the `p5.js` instance.\n   * \n   * This method is called automatically by the library when the `p5.js` instance is created.\n   * \n   * **If the `init` hook is disabled, this method will not be called automatically.**\n   * \n   * @param p The p5.js instance to use for the library.\n   */\n  async init(A) {\n    if (this._p = A, this._p5Version = j(A), !this._p5Version)\n      throw new Y(\"Could not determine p5.js version. Ensure p5.js is properly loaded.\");\n    this._applyShaderPrecisionFix(), R(this._p5Version) ? (this._baseFont = await this._p.loadFont(mA), await Promise.all(\n      this._asciifiers.map((e) => e.init(A))\n    )) : (!this._p.preload && typeof globalThis.preload != \"function\" && (this._p.preload = () => {\n    }), this._p._incrementPreload(), await new Promise((e) => {\n      this._baseFont = A.loadFont(mA, (r) => {\n        this._asciifiers.forEach((t) => {\n          t.init(A);\n        }), e();\n      });\n    }));\n  }\n  /**\n   * Sets up the {@link P5Asciifier} instances managed by the library.\n   * \n   * This method is called automatically by the library after the `setup()` function of the `p5.js` instance has finished executing.\n   * \n   * **If the `afterSetup` hook is disabled, this method will not be called automatically.**\n   */\n  async setup() {\n    if (this._sketchFramebuffer = this._p.createFramebuffer({\n      depthFormat: this._p.UNSIGNED_INT,\n      textureFiltering: this._p.NEAREST\n    }), R(this._p5Version))\n      for (const A of this._asciifiers)\n        await A.setup(this._sketchFramebuffer, this._baseFont);\n    else\n      for (const A of this._asciifiers)\n        A.setup(this._sketchFramebuffer, this._baseFont);\n    this._setupDone = !0;\n  }\n  /**\n   * Set the background color when drawing all managed {@link P5Asciifier} instances to the canvas.\n   * \n   * To make the background transparent, pass an appropriate color value with an alpha value of `0`.\n   * \n   * @param color The color to set. Needs to be a valid type to pass to the `background()` function provided by p5.js.\n   * @throws If the color is not a string, array or `p5.Color`.\n   * \n   * @example\n   * ```javascript\n   *  function setupAsciify() {\n   *      // Set the background color to black.\n   *      p5asciify.background('#000000');\n   *  }\n   * ```\n   */\n  background(A) {\n    g.validate(\n      typeof A == \"string\" || Array.isArray(A) || J(this._p, A),\n      `Invalid color type: ${typeof A}. Expected string, array or p5.Color.`,\n      { providedValue: A, method: \"background\" }\n    ) && (this._backgroundColor = A);\n  }\n  /**\n   * Sets the font size for all managed {@link P5Asciifier} instances simultaneously.\n   * @param size The font size to set for the {@link P5Asciifier} instances.\n   */\n  fontSize(A) {\n    this._asciifiers.forEach((e) => {\n      e.fontSize(A);\n    });\n  }\n  /**\n   * Sets the font for all managed {@link P5Asciifier} instances simultaneously.\n   * @param font The `p5.Font` instance to set as the font for all managed {@link P5Asciifier} instances.\n   */\n  font(A) {\n    this._asciifiers.forEach((e) => {\n      e.font(A);\n    });\n  }\n  /**\n   * Sets the grid dimensions for all managed {@link P5Asciifier} instances simultaneously.\n   * @param gridCols The number of columns in the ASCII grid.\n   * @param gridRows The number of rows in the ASCII grid.\n   */\n  gridDimensions(A, e) {\n    this._asciifiers.forEach((r) => {\n      r.gridDimensions(A, e);\n    });\n  }\n  /**\n   * Sets whether the ASCII grid should be responsive to the size of the canvas for all managed {@link P5Asciifier} instances.\n   * @param bool If `true`, the ASCII grid will adjust its size based on the canvas dimensions. Otherwise, it will always use the set grid dimensions.\n   */\n  gridResponsive(A = !0) {\n    this._asciifiers.forEach((e) => {\n      e.gridResponsive(A);\n    });\n  }\n  /**\n   * Sets the background mode for all managed {@link P5Asciifier} instances simultaneously.\n   * @param mode The background mode to set for the {@link P5Asciifier} instances.\n   */\n  backgroundMode(A = \"fixed\") {\n    this._asciifiers.forEach((e) => {\n      e.backgroundMode(A);\n    });\n  }\n  /**\n   * Executes the ASCII conversion rendering pipelines for each {@link P5Asciifier} instance managed by the library.\n   * \n   * This method is called automatically by the library after the `draw()` function of the `p5.js` instance has finished executing.\n   * \n   * **If the `post` hook is disabled, this method will not be called automatically.**\n   */\n  asciify() {\n    this._p.background(this._backgroundColor), this._asciifiers.forEach((A) => {\n      A.asciify();\n    });\n  }\n  /**\n   * Returns the {@link P5Asciifier} instance at the specified index.\n   * \n   * When passing no arguments, the method returns the first {@link P5Asciifier} instance in the list, \n   * which usually corresponds to the default {@link P5Asciifier} provided by the library, which is applied to the main canvas of the `p5.js` instance.\n   * \n   * @param index The index of the {@link P5Asciifier} instance to return.\n   * @returns The {@link P5Asciifier} instance at the specified index.\n   * @throws If the index is out of bounds.\n   */\n  asciifier(A = 0) {\n    return !g.validate(\n      typeof A == \"number\" && !isNaN(A) && Number.isInteger(A),\n      \"Index must be a valid integer.\",\n      { providedValue: A, method: \"asciifier\" }\n    ) || !g.validate(\n      A >= 0 && A < this._asciifiers.length,\n      `Invalid asciifier index: ${A}. Valid range is 0 to ${this._asciifiers.length - 1}.`,\n      { providedValue: A, method: \"asciifier\" }\n    ) ? null : this._asciifiers[A];\n  }\n  /**\n   * Adds a new {@link P5Asciifier} instance to the library.\n   * @param framebuffer   The framebuffer to capture for ASCII conversion.\n   *                      If not provided, the main canvas of the `p5.js` instance will be used.\n   * @returns The newly created {@link P5Asciifier} instance, or null if validation fails.\n   */\n  add(A) {\n    if (!g.validate(\n      this._setupDone,\n      \"Cannot add asciifier before initializing p5.asciify. Ensure p5.asciify is initialized first.\",\n      { providedValue: this._setupDone, method: \"add\" }\n    ))\n      return null;\n    const r = new gA(this._pluginRegistry);\n    return R(this._p5Version) ? (async () => {\n      try {\n        return await r.init(this._p), this._setupDone && this._sketchFramebuffer && await r.setup(A || this._sketchFramebuffer, this._baseFont), this._asciifiers.push(r), r;\n      } catch (t) {\n        return g.validate(\n          !1,\n          `Failed to initialize asciifier: ${t instanceof Error ? t.message : \"Unknown error\"}`,\n          { providedValue: t, method: \"add\" }\n        ), null;\n      }\n    })() : (r.init(this._p), this._setupDone && r.setup(A || this._sketchFramebuffer, this._baseFont), this._asciifiers.push(r), r);\n  }\n  /**\n   * Removes a {@link P5Asciifier} instance.\n   * @param indexOrAsciifier The index of the {@link P5Asciifier} instance to remove, or the {@link P5Asciifier} instance itself.\n   */\n  remove(A) {\n    if (typeof A == \"number\") {\n      const e = A;\n      if (!g.validate(\n        typeof e == \"number\" && !isNaN(e) && Number.isInteger(e),\n        \"Index must be a valid integer.\",\n        { providedValue: e, method: \"remove\" }\n      ) || !g.validate(\n        e >= 0 && e < this._asciifiers.length,\n        `Invalid asciifier index: ${e}. Valid range is 0 to ${this._asciifiers.length - 1}.`,\n        { providedValue: e, method: \"remove\" }\n      ))\n        return;\n      this._asciifiers.splice(e, 1);\n    } else {\n      const e = A;\n      if (!g.validate(\n        e && e instanceof gA,\n        \"Asciifier must be a valid P5Asciifier instance.\",\n        { providedValue: e, method: \"remove\" }\n      ))\n        return;\n      const t = this._asciifiers.indexOf(e);\n      if (!g.validate(\n        t !== -1,\n        \"The specified asciifier was not found in the list.\",\n        { providedValue: e, method: \"remove\" }\n      ))\n        return;\n      this._asciifiers.splice(t, 1);\n    }\n  }\n  /**\n   * Register a new renderer plugin with p5.asciify\n   * @param plugin The renderer plugin to register\n   */\n  registerPlugin(A) {\n    this._pluginRegistry.register(A);\n  }\n  /**\n   * Activate a registered hook provided by `p5.asciify`.\n   * \n   * @param hookType The type of hook to activate\n   */\n  activateHook(A) {\n    this._hookManager.activateHook(A);\n  }\n  /**\n   * Deactivate a registered hook provided by `p5.asciify`.\n   * @param hookType The type of hook to deactivate\n   */\n  deactivateHook(A) {\n    this._hookManager.deactivateHook(A);\n  }\n  /**\n   * Set the global error level for the library.\n   * \n   * Controls how validation failures and errors are handled throughout p5.asciify.\n   * This affects all asciifier instances and library operations.\n   * \n   * @param level - The error level to set. Use {@link P5AsciifyErrorLevel} enum values.\n   * \n   * @example\n   * ```typescript\n   * // Set to warning level for non-critical applications\n   * p5asciify.setErrorLevel(P5AsciifyErrorLevel.WARNING);\n   * \n   * // Silent mode for production environments\n   * p5asciify.setErrorLevel(P5AsciifyErrorLevel.SILENT);\n   * ```\n   * \n   * @see {@link P5AsciifyErrorLevel} for detailed descriptions of each level\n   */\n  setErrorLevel(A) {\n    g.setGlobalLevel(A);\n  }\n  /**\n   * Apply shader precision fix for Android devices.\n   * This fixes p5.js shaders to use highp precision instead of mediump.\n   * Generally fixed in p5.js v1.11.3+, but this provides backwards compatibility.\n   * @private\n   */\n  _applyShaderPrecisionFix() {\n    const A = [\n      [\"_getImmediateModeShader\", \"_defaultImmediateModeShader\"],\n      [\"_getNormalShader\", \"_defaultNormalShader\"],\n      [\"_getColorShader\", \"_defaultColorShader\"],\n      [\"_getPointShader\", \"_defaultPointShader\"],\n      [\"_getLineShader\", \"_defaultLineShader\"],\n      [\"_getFontShader\", \"_defaultFontShader\"]\n    ];\n    let e = null;\n    const r = [\n      // Strategy 1: Instance constructor (works in flok.cc)\n      () => {\n        var t, i;\n        return (i = (t = this._p) == null ? void 0 : t.constructor) == null ? void 0 : i.RendererGL;\n      },\n      // Strategy 2: Global p5 (works in P5LIVE)\n      () => typeof P < \"u\" && P.RendererGL ? P.RendererGL : void 0\n    ];\n    for (const t of r)\n      try {\n        const i = t();\n        if (i && i.prototype) {\n          e = i;\n          break;\n        }\n      } catch {\n        continue;\n      }\n    if (!e || !e.prototype) {\n      console.warn(\"p5.asciify: Could not find RendererGL class, skipping shader precision fix for Android devices running below p5.js v1.11.3.\");\n      return;\n    }\n    for (const [t, i] of A)\n      if (typeof e.prototype[t] == \"function\") {\n        const s = e.prototype[t];\n        e.prototype[t] = function() {\n          return this[i] || (this[i] = s.call(this), this[i] && this[i]._vertSrc && (this[i]._vertSrc = this[i]._vertSrc.replace(\n            /mediump/g,\n            \"highp\"\n          )), this[i] && this[i]._fragSrc && (this[i]._fragSrc = this[i]._fragSrc.replace(\n            /mediump/g,\n            \"highp\"\n          ))), this[i];\n        };\n      }\n  }\n  /**\n   * Get the plugin registry\n   * @returns The plugin registry instance\n   */\n  get pluginRegistry() {\n    return this._pluginRegistry;\n  }\n  /**\n   * Returns the list of {@link P5Asciifier} instances managed by the library.\n   */\n  get asciifiers() {\n    return this._asciifiers;\n  }\n  /**\n   * Returns the sketch framebuffer used to store the content drawn to the `p5.js` canvas.\n   * @ignore\n   */\n  get sketchFramebuffer() {\n    return this._sketchFramebuffer;\n  }\n};\n/** Singleton instance of the manager */\no(k, \"_instance\", null);\nlet dA = k;\nconst OA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  BRIGHTNESS_DEFAULT_OPTIONS: lA,\n  EDGE_DEFAULT_OPTIONS: hA,\n  P5AsciifyAbstractFeatureRenderer2D: z,\n  P5AsciifyBrightnessRenderer: CA,\n  P5AsciifyEdgeRenderer: DA\n}, Symbol.toStringTag, { value: \"Module\" })), JA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  CUSTOM_DEFAULT_OPTIONS_2D: EA,\n  P5AsciifyRenderer2D: L,\n  feature: OA\n}, Symbol.toStringTag, { value: \"Module\" })), XA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  P5AsciifyDisplayRenderer: wA,\n  P5AsciifyRenderer: uA,\n  P5AsciifyRendererManager: xA,\n  RENDERER_TYPES: K,\n  renderer2d: JA\n}, Symbol.toStringTag, { value: \"Module\" })), ZA = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  P5AsciifyPluginRegistry: vA\n}, Symbol.toStringTag, { value: \"Module\" }));\nlet U;\ntypeof window < \"u\" && window.p5asciify ? U = window.p5asciify : U = dA.getInstance();\nconst qA = U, Ae = U.asciifier();\ntypeof window < \"u\" && (window.p5asciify || (window.p5asciify = U), window.p5asciifier || (window.p5asciifier = U.asciifier()), window.P5AsciifyAbstractFeatureRenderer2D || (window.P5AsciifyAbstractFeatureRenderer2D = z), window.P5AsciifyRenderer2D || (window.P5AsciifyRenderer2D = L), window.P5AsciifyRenderer || (window.P5AsciifyRenderer = uA), window.P5AsciifyErrorLevel || (window.P5AsciifyErrorLevel = fA));\nexport {\n  gA as P5Asciifier,\n  dA as P5AsciifierManager,\n  GA as P5AsciifyColorPalette,\n  kA as P5AsciifyFontManager,\n  VA as P5AsciifyGrid,\n  cA as P5AsciifyHookManager,\n  KA as errors,\n  Ae as p5asciifier,\n  qA as p5asciify,\n  ZA as plugins,\n  XA as renderers,\n  WA as utils\n};\n"],
  "mappings": "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",
  "names": ["T", "v", "k"]
}
