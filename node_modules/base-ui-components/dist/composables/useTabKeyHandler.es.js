import b from "@babel/runtime/helpers/typeof";
import { ref as o, computed as p, watchEffect as h } from "vue";
function H(r, c) {
  var s = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, a = o(c), f = o(s), t = p(function() {
    var e;
    if (b(r) === "object" && r !== null && r !== void 0 && r.value)
      return r.value;
    if (typeof r == "string" && (e = document) !== null && e !== void 0 && e.querySelector(r)) {
      var n;
      return (n = document) === null || n === void 0 ? void 0 : n.querySelector(r);
    }
  });
  function v() {
    if (!t.value)
      return [];
    var e = Array.from(t.value.querySelectorAll(a.value));
    return e.filter(function(n) {
      return n.checkVisibility();
    });
  }
  function i() {
    var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "next", n = v();
    if (n.length) {
      var u = null, l = null;
      if (n.forEach(function(m, y) {
        m.matches(":focus") && (u = y);
      }), u === null) {
        n[0].focus();
        return;
      }
      e === "next" && (l = n[u + 1] ? u + 1 : 0), e === "prev" && (l = n[u - 1] ? u - 1 : n.length - 1), n[l].focus();
    }
  }
  function d(e) {
    if (!f.value) {
      if (e.shiftKey && e.key === "Tab") {
        e.preventDefault(), i("prev");
        return;
      }
      e.key === "Tab" && (e.preventDefault(), i("next"));
    }
  }
  return h(function() {
    t.value && t.value.addEventListener("keydown", d);
  }), {
    focusableHTMLTags: a,
    disableHandler: f
  };
}
export {
  H as useTabKeyHandler
};
//# sourceMappingURL=useTabKeyHandler.es.js.map
