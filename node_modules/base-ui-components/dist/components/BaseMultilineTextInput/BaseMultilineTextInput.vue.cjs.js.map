{"version":3,"file":"BaseMultilineTextInput.vue.cjs.js","sources":["../../../src/components/BaseMultilineTextInput/BaseMultilineTextInput.vue"],"sourcesContent":["<template>\n  <BaseInput\n    :id=\"idInt\"\n    v-model=\"fieldContent[activeTabInt]\"\n    :is-active.sync=\"isActive\"\n    :label=\"label\"\n    :show-label=\"showLabel\"\n    :placeholder=\"placeholder\"\n    :required=\"required\"\n    :invalid=\"invalid\"\n    :disabled=\"disabled\"\n    :show-error-icon=\"showErrorIcon\"\n    :error-message=\"errorMessage\"\n    :clearable=\"clearable\"\n    :use-fade-out=\"false\"\n    class=\"base-multiline-text-input\"\n    v-on=\"$listeners\">\n    <template #label-addition>\n      <div class=\"base-multiline-text-input__additions\">\n        <!-- @slot to add drop down needed for text input field (base specific) or any other element deemed necessary -->\n        <slot name=\"label-addition\" />\n        <BaseSwitchButton\n          v-if=\"tabs && tabs[0] !== 'default'\"\n          v-model=\"activeTabInt\"\n          :options=\"switchTabs\"\n          :label=\"tabsLegend\"\n          :active-tab=\"activeTab\"\n          class=\"base-multiline-text-input__tabs\">\n          <template\n            #right-of-content=\"tab\">\n            <BaseIcon\n              v-if=\"hasText(tab.value)\"\n              class=\"base-multiline-text-input__text-icon\"\n              name=\"text\" />\n          </template>\n        </BaseSwitchButton>\n      </div>\n    </template>\n    <template #input>\n      <div\n        ref=\"textareaWrapper\"\n        :class=\"['base-multiline-text-input__textarea-wrapper',\n                 { 'base-multiline-text-input__textarea-wrapper__fade-out': showFadeOut }]\">\n        <!-- need to disable because label is there - it is just in BaseInput component -->\n        <!-- eslint-disable-next-line  vuejs-accessibility/form-control-has-label -->\n        <textarea\n          :id=\"idInt\"\n          ref=\"textarea\"\n          v-model=\"fieldContent[activeTabInt]\"\n          :required=\"required\"\n          :aria-required=\"required.toString()\"\n          :aria-describedby=\"idInt\"\n          :aria-invalid=\"invalid.toString()\"\n          :disabled=\"disabled\"\n          :aria-disabled=\"disabled.toString()\"\n          :placeholder=\"placeholder\"\n          class=\"base-multiline-text-input__textarea\"\n          v-on=\"inputListeners\"\n          @keydown.tab=\"isActive = false\" />\n      </div>\n    </template>\n    <template\n      #input-field-addition-before>\n      <!-- @slot Slot to allow for additional elements in the input field <div> (before <input>) -->\n      <slot name=\"input-field-addition-before\" />\n    </template>\n    <template #input-field-addition-after>\n      <!-- @slot for adding elements after input -->\n      <slot name=\"input-field-addition-after\" />\n    </template>\n    <template #post-input-field>\n      <!-- @slot elements after the actual input element but within the input field container. for an example see [BaseChipsInputField](BaseChipsInputField)-->\n      <slot name=\"post-input-field\" />\n    </template>\n    <template #error-icon>\n      <!-- @slot use a custom icon instead of standard error/warning icon. for an example see [BaseChipsInputField](BaseChipsInputField)-->\n      <slot name=\"error-icon\" />\n    </template>\n    <template #remove-icon>\n      <!-- @slot use a custom icon instead of standard remove icon. for an example see [BaseChipsInputField](BaseChipsInputField)-->\n      <slot name=\"remove-icon\" />\n    </template>\n  </BaseInput>\n</template>\n\n<script>\nimport BaseInput from '@/components/BaseInput/BaseInput';\nimport BaseIcon from '@/components/BaseIcon/BaseIcon';\nimport { createId } from '@/utils/utils';\n\n/**\n * A multiline textfield base component\n */\n\nexport default {\n  name: 'BaseMultilineTextInput',\n  components: {\n    BaseInput,\n    BaseIcon,\n    BaseSwitchButton: () => import('@/components/BaseSwitchButton/BaseSwitchButton').then(m => m.default || m),\n  },\n  model: {\n    prop: 'input',\n    event: 'input',\n  },\n  props: {\n    /**\n     * input displayed in the textarea.\n     *   if `tabs` prop is set, this needs to be an object with properties corresponding to\n     *   tab names.\n     */\n    input: {\n      type: [Object, String],\n      default: '',\n    },\n    /**\n     * set the label for the input component\n     */\n    label: {\n      type: String,\n      default: '',\n    },\n    /**\n     * set `true` if label should be visible\n     */\n    showLabel: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * set input field placeholder\n     */\n    placeholder: {\n      type: String,\n      default: '',\n    },\n    /**\n     * set tabs for the input field\n     */\n    tabs: {\n      type: Array,\n      default: () => ['default'],\n    },\n    /**\n     * give the possibility to specify what should be displayed in the tabs\n     */\n    tabLabels: {\n      type: Array,\n      default: () => [],\n    },\n    /**\n     * set the currently active tab (specify the property of the object not the label)\n     */\n    activeTab: {\n      type: String,\n      default() {\n        return this.tabs[0] || 'default';\n      },\n    },\n    /**\n     * set a legend for the tabs to be read (for accessibility only, hidden)\n     */\n    tabsLegend: {\n      type: String,\n      default: 'Radiogroup',\n    },\n    /**\n     * set id which is used for label + id\n     */\n    id: {\n      type: [String, Number],\n      default: '',\n    },\n    /**\n     * set a language (ISO 639-1)\n     */\n    language: {\n      type: String,\n      default: '',\n    },\n    /**\n     * mark as required field (currently only used for `aria-required`)\n     */\n    required: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * mark the form field as invalid and ideally also provide an error message\n     * to display below the form field.\n     * for an example see [BaseInput](BaseInput)\n     */\n    invalid: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * set true if input field should be disabled.\n     * for an example see [BaseInput](BaseInput)\n     */\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    /**\n     * add an error message to be displayed below form field if field is invalid.\n     * for an example see [BaseInput](BaseInput)\n     */\n    errorMessage: {\n      type: String,\n      default: '',\n    },\n    /**\n     * define if error icon should be shown.\n     * for an example see [BaseInput](BaseInput)\n     */\n    showErrorIcon: {\n      type: Boolean,\n      default: true,\n    },\n    /**\n     * if true a remove icon will be shown allowing to remove\n     * all input at once.\n     * for an example see [BaseInput](BaseInput)\n     */\n    clearable: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      activeTabInt: this.activeTab || 'default',\n      fieldContent: {},\n      isActive: false,\n    };\n  },\n  computed: {\n    /**\n     * check if an id was provided (to handle label input connection), if not create one\n     * @returns {String|string}\n     */\n    idInt() {\n      return this.id || createId();\n    },\n    // TODO: refactor component props to already match object necessary for switch component\n    switchTabs() {\n      return this.tabs.map((tab, index) => ({ value: tab, label: this.tabLabels[index] || tab }));\n    },\n    inputListeners() {\n      return {\n        // add all the listeners from the parent\n        ...this.$listeners,\n        // and add custom listeners\n        ...{\n          input: () => {\n            /**\n             * Event emitted on input, passing input string or input object\n             *\n             * @event input\n             * @param {string, Object} - the altered field input\n             */\n            this.$emit('input', this.emitFieldContent());\n          },\n        },\n      };\n    },\n    showFadeOut() {\n      if (this.$refs && this.$refs.textarea) {\n        return !this.isActive\n          && this.$refs.textarea.scrollHeight > this.$refs.textareaWrapper.clientHeight;\n      }\n      return !this.isActive;\n    },\n  },\n  watch: {\n    // watch for input changes from outside\n    input: {\n      handler(val) {\n        if ((typeof val === 'object' && JSON.stringify(val) !== JSON.stringify(this.fieldContent))\n          || (typeof val === 'string' && val !== this.fieldContent[this.activeTabInt])) {\n          // if input changes set internal fieldContent variable\n          this.setFieldContent(val);\n        }\n      },\n      immediate: true,\n      deep: true,\n    },\n    // get updates for active tab from outside\n    activeTab(val) {\n      this.activeTabInt = val;\n    },\n  },\n  methods: {\n    setFieldContent(val) {\n      if (this.tabs.length < 2) {\n        const propName = this.activeTabInt || 'default';\n        this.$set(this.fieldContent, propName, typeof val === 'string' ? val : val[propName]);\n      } else {\n        this.tabs.forEach(tab => this.$set(\n          this.fieldContent,\n          tab,\n          val[tab],\n        ));\n      }\n    },\n    emitFieldContent() {\n      if (typeof this.input === 'object') {\n        return this.fieldContent;\n      }\n      return this.fieldContent[this.activeTabInt];\n    },\n    hasText(val) {\n      return !!this.fieldContent[val];\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import '../../styles/variables.scss';\n\n.base-multiline-text-input {\n  font-family: inherit;\n  font-size: inherit;\n\n  .base-multiline-text-input__additions {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: flex-end;\n    margin-bottom: -$spacing-small-half;\n\n    .base-multiline-text-input__tabs {\n      align-self: center;\n      flex-shrink: 0;\n\n      .base-multiline-text-input__text-icon {\n        margin-left: $spacing-small;\n        height: 10px;\n        width: 10px;\n        vertical-align: middle;\n        margin-bottom: $spacing-small-half;\n        color: $font-color-second;\n        fill: $font-color-second;\n      }\n    }\n  }\n\n  .base-multiline-text-input__textarea-wrapper {\n    width: 100%;\n\n    &.base-multiline-text-input__textarea-wrapper__fade-out::after {\n      content: '';\n      width: 100%;\n      height: $fade-out-width;\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      background: linear-gradient(to bottom, rgba(255, 255, 255, 0) , white);\n      pointer-events: none;\n    }\n\n    .base-multiline-text-input__textarea {\n      width: 100%;\n      line-height: $line-height;\n      padding: $spacing-small-half 0;\n      margin: 0;\n      height: 240px;\n      appearance: none;\n      resize: none;\n      -ms-overflow-style: none;  /* Internet Explorer 10+ */\n      scrollbar-width: none;  /* Firefox */\n\n      &::-webkit-scrollbar {\n        display: none;  /* Safari and Chrome */\n      }\n    }\n  }\n}\n\n@media screen and (max-width: $tablet) {\n  .base-multiline-text-input {\n    .base-multiline-text-input__additions {\n      justify-content: flex-end;\n    }\n  }\n}\n\n@media screen and (max-width: $mobile) {\n  .base-multiline-text-input\n  .base-multiline-text-input__additions {\n    margin-bottom: -$spacing-small;\n  }\n}\n\n</style>\n"],"names":["_sfc_main","BaseInput","BaseIcon","m","createId","tab","index","val","propName"],"mappings":"qWA8FAA,EAAA,CACA,KAAA,yBACA,WAAA,CACA,UAAAC,EAAA,QACA,SAAAC,EAAA,QACA,iBAAA,IAAA,QAAA,QAAA,EAAA,KAAA,IAAA,QAAA,iDAAA,GAAA,KAAAC,GAAAA,EAAA,SAAAA,CAAA,CACA,EACA,MAAA,CACA,KAAA,QACA,MAAA,OACA,EACA,MAAA,CAMA,MAAA,CACA,KAAA,CAAA,OAAA,MAAA,EACA,QAAA,EACA,EAIA,MAAA,CACA,KAAA,OACA,QAAA,EACA,EAIA,UAAA,CACA,KAAA,QACA,QAAA,EACA,EAIA,YAAA,CACA,KAAA,OACA,QAAA,EACA,EAIA,KAAA,CACA,KAAA,MACA,QAAA,IAAA,CAAA,SAAA,CACA,EAIA,UAAA,CACA,KAAA,MACA,QAAA,IAAA,CAAA,CACA,EAIA,UAAA,CACA,KAAA,OACA,SAAA,CACA,OAAA,KAAA,KAAA,CAAA,GAAA,SACA,CACA,EAIA,WAAA,CACA,KAAA,OACA,QAAA,YACA,EAIA,GAAA,CACA,KAAA,CAAA,OAAA,MAAA,EACA,QAAA,EACA,EAIA,SAAA,CACA,KAAA,OACA,QAAA,EACA,EAIA,SAAA,CACA,KAAA,QACA,QAAA,EACA,EAMA,QAAA,CACA,KAAA,QACA,QAAA,EACA,EAKA,SAAA,CACA,KAAA,QACA,QAAA,EACA,EAKA,aAAA,CACA,KAAA,OACA,QAAA,EACA,EAKA,cAAA,CACA,KAAA,QACA,QAAA,EACA,EAMA,UAAA,CACA,KAAA,QACA,QAAA,EACA,CACA,EACA,MAAA,CACA,MAAA,CACA,aAAA,KAAA,WAAA,UACA,aAAA,CAAA,EACA,SAAA,EACA,CACA,EACA,SAAA,CAKA,OAAA,CACA,OAAA,KAAA,IAAAC,EAAAA,UACA,EAEA,YAAA,CACA,OAAA,KAAA,KAAA,IAAA,CAAAC,EAAAC,KAAA,CAAA,MAAAD,EAAA,MAAA,KAAA,UAAAC,CAAA,GAAAD,CAAA,EAAA,CACA,EACA,gBAAA,CACA,MAAA,CAEA,GAAA,KAAA,WAGA,MAAA,IAAA,CAOA,KAAA,MAAA,QAAA,KAAA,iBAAA,CAAA,CACA,CAEA,CACA,EACA,aAAA,CACA,OAAA,KAAA,OAAA,KAAA,MAAA,SACA,CAAA,KAAA,UACA,KAAA,MAAA,SAAA,aAAA,KAAA,MAAA,gBAAA,aAEA,CAAA,KAAA,QACA,CACA,EACA,MAAA,CAEA,MAAA,CACA,QAAAE,EAAA,EACA,OAAAA,GAAA,UAAA,KAAA,UAAAA,CAAA,IAAA,KAAA,UAAA,KAAA,YAAA,GACA,OAAAA,GAAA,UAAAA,IAAA,KAAA,aAAA,KAAA,YAAA,IAEA,KAAA,gBAAAA,CAAA,CAEA,EACA,UAAA,GACA,KAAA,EACA,EAEA,UAAAA,EAAA,CACA,KAAA,aAAAA,CACA,CACA,EACA,QAAA,CACA,gBAAAA,EAAA,CACA,GAAA,KAAA,KAAA,OAAA,EAAA,CACA,MAAAC,EAAA,KAAA,cAAA,UACA,KAAA,KAAA,KAAA,aAAAA,EAAA,OAAAD,GAAA,SAAAA,EAAAA,EAAAC,CAAA,CAAA,CACA,MACA,KAAA,KAAA,QAAAH,GAAA,KAAA,KACA,KAAA,aACAA,EACAE,EAAAF,CAAA,CACA,CAAA,CAEA,EACA,kBAAA,CACA,OAAA,OAAA,KAAA,OAAA,SACA,KAAA,aAEA,KAAA,aAAA,KAAA,YAAA,CACA,EACA,QAAAE,EAAA,CACA,MAAA,CAAA,CAAA,KAAA,aAAAA,CAAA,CACA,CACA,CACA"}