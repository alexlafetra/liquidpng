import i from "../BaseButton/BaseButton.vue.es.js";
import o from "../BaseIcon/BaseIcon.vue.es.js";
import l from "../BaseLoader/BaseLoader.vue.es.js";
import u from "../BasePopUp/BasePopUp.vue.es.js";
import c from "../BaseProgressBar/BaseProgressBar.vue.es.js";
import d from "../../mixins/i18n.es.js";
import "./BaseUploadPopUp.vue.es2.js";
import "./BaseUploadPopUp.vue.es3.js";
import p from "../../_virtual/_plugin-vue2_normalizer.es.js";
const m = {
  name: "BaseUploadPopUp",
  components: {
    BaseButton: i,
    BaseIcon: o,
    BaseLoader: l,
    BasePopUp: u,
    BaseProgressBar: c
  },
  mixins: [d],
  props: {
    /**
     * register files to upload
     * array with file-object(s) from file-input field
     */
    fileList: {
      type: Array,
      default: () => []
    },
    /**
     * define current status
     * @values initial, saving, success, failed
     */
    currentStatus: {
      type: String,
      default: "initial",
      validate(t) {
        return ["initial", "saving", "success", "failed"].includes(t);
      }
    },
    /**
     * define button text
     * could be string or path to i18n json as well
     */
    cancelButtonText: {
      type: String,
      default: "cancel"
    },
    /**
     * specify informational texts for the component -
     * this needs to be an object with the following properties:
     *
     *   **title** `string` - text used in the popup header
     *   **upload** `string` - default button text
     *   **done** `string` - button text when upload finished
     *   **retry** `string` - button text when an upload error occurs
     *   **quotaExceeded** `- string` text used when user quota is exceeded
     *
     * The values of this object might be plain text or a key for an i18n file
     */
    uploadText: {
      type: Object,
      default: () => ({
        title: "File Upload",
        upload: "Upload",
        done: "Done",
        retry: "Try Again",
        quotaExceeded: "Unfortunately you exceeded your quota, because you have only {space} of space left. Please remove some files to enable uploading."
      })
    },
    /**
     * current upload progress in percent per file
     * array with current upload progress per file
     * e.g. [11, 55, 100]
     */
    uploadPercentage: {
      type: Array,
      default: () => []
    },
    /**
     * define current free storage space (bytes)
     */
    userSpace: {
      type: Number,
      default: 1e7
    },
    /**
     * define rejected files
     * array with filename(s)
     */
    rejectedFiles: {
      type: Array,
      default: () => []
    },
    /**
     * define uploaded files
     * array with filename(s)
     */
    uploadedFiles: {
      type: Array,
      default: () => []
    },
    /**
     * define errors for rejected files
     * array with objects
     * eg: `[{ name: 'foo.txt', message: 'The file may include a virus' }]`
     * Note: each object must contain the properties: `name`, `message`
     */
    fileErrors: {
      type: Array,
      default: () => [],
      // checking if all necessary properties are part of the provided object
      validator: (t) => t.length ? !["name", "message"].every((e) => Object.keys(t).includes(e)) : !0
    }
  },
  computed: {
    buttonText() {
      return this.currentStatus === "initial" || this.currentStatus === "saving" ? this.getI18nTerm(this.getLangLabel(this.uploadText.upload)) : this.rejectedFiles.length ? this.getI18nTerm(this.getLangLabel(this.uploadText.retry)) : this.getI18nTerm(this.getLangLabel(this.uploadText.done));
    },
    userQuotaExceeded() {
      return this.userSpace < this.fileList.reduce((t, e) => t + e.size, 0);
    }
  },
  methods: {
    convertSpace(t, e) {
      let a = t;
      const r = e ? 1e3 : 1024;
      if (Math.abs(t) < r)
        return `${t} B`;
      const s = e ? ["kB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"] : ["KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"];
      let n = -1;
      do
        a /= r, n += 1;
      while (Math.abs(a) >= r && n < s.length - 1);
      return `${a.toFixed(1)} ${s[n]}`;
    },
    getStatus(t) {
      return this.uploadedFiles.includes(t) ? "success" : this.rejectedFiles.includes(t) ? "fail" : "";
    },
    getErrorMessage(t) {
      if (this.fileErrors.find((e) => e.name === t)) {
        const { message: e } = this.fileErrors.find((a) => a.name === t);
        return e;
      }
      return "";
    },
    cancelUpload() {
      this.$emit("cancel-upload");
    },
    startUpload() {
      this.$emit("start-upload");
    },
    removeFile(t) {
      this.$emit("remove-file", t);
    }
  }
};
var g = function() {
  var e = this, a = e._self._c;
  return e.fileList.length ? a("BasePopUp", { attrs: { title: e.getI18nTerm(e.getLangLabel(e.uploadText.title)) }, on: { close: e.cancelUpload } }, [a("transition-group", { attrs: { name: "list-complete" } }, [e.userQuotaExceeded ? a("div", { key: "user-warning", staticClass: "base-uploader-user-warning" }, [a("BaseIcon", { staticClass: "icon base-uploader-user-warning-icon", attrs: { name: "attention" } }), e._v(" " + e._s(e.getI18nTerm(e.getLangLabel(e.uploadText.quotaExceeded), 1, { space: e.convertSpace(e.userSpace) })) + " ")], 1) : e._e(), a("div", { key: "upload-area", staticClass: "popup-upload-area" }, [a("transition-group", { staticClass: "transition", attrs: { name: "bar-move" } }, e._l(e.fileList, function(r, s) {
    return a("BaseProgressBar", { key: r.name, staticClass: "upload-bar", attrs: { progress: e.uploadPercentage[s], "file-name": r.name, "file-size": e.userQuotaExceeded ? e.convertSpace(r.size) : "", status: e.getStatus(r.name), "error-message": e.getErrorMessage(r.name), "show-remove": e.currentStatus === "initial" && e.fileList.length > 1 }, on: { "remove-item": function(n) {
      return e.removeFile(s);
    } } });
  }), 1)], 1)]), e._t("default"), a("template", { slot: "button-row" }, [e.currentStatus === "initial" || e.currentStatus === "failed" ? a("BaseButton", { staticClass: "base-upload-bar-button", attrs: { text: e.getI18nTerm(e.cancelButtonText), icon: "remove", "icon-position": "right", "icon-size": "small" }, on: { clicked: e.cancelUpload } }) : e._e(), a("BaseButton", { ref: "uploadButton", staticClass: "base-upload-bar-button", attrs: { text: e.buttonText, icon: e.currentStatus !== "saving" && e.currentStatus !== "failed" ? "check-mark" : "", "icon-position": "right", "icon-size": "small", disabled: e.currentStatus === "saving" || e.userQuotaExceeded }, on: { clicked: e.startUpload } }, [e.currentStatus === "saving" ? a("template", { slot: "right-of-text" }, [a("span", { staticClass: "base-upload-bar-loader" }, [a("BaseLoader")], 1)]) : e._e()], 2)], 1)], 2) : e._e();
}, f = [], h = /* @__PURE__ */ p(
  m,
  g,
  f,
  !1,
  null,
  "eaa8e63e",
  null,
  null
);
const U = h.exports;
export {
  U as default
};
//# sourceMappingURL=BaseUploadPopUp.vue.es.js.map
